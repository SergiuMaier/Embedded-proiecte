
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000025a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800192  00800192  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000339  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3b       	cpi	r26, 0xB8	; 184
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 00 	call	0xba	; 0xba <main>
  9e:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:

#include "functii_afisare.h"

void new_line(){
	
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Meniu\n\r 2. Afisare timp\n\r 3. Schimbare stare LED\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_data>
  b8:	08 95       	ret

000000ba <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
  ba:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_devices>
	init_USART(MYUBRR);
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 b4 00 	call	0x168	; 0x168 <init_USART>
	
	send_data(CLEAR);
  c6:	82 e5       	ldi	r24, 0x52	; 82
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_data>
	afisare_meniu();
  ce:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();
  d2:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x1c>

000000d8 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  d8:	84 b5       	in	r24, 0x24	; 36
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  e2:	85 b5       	in	r24, 0x25	; 37
  e4:	83 60       	ori	r24, 0x03	; 3
  e6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <init_devices>:
}

void init_devices(){
	
	cli();
  f4:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  fa:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
  fc:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_timer>
	
	sei();
 100:	78 94       	sei
 102:	08 95       	ret

00000104 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	
	cli();
 114:	f8 94       	cli
	
	contor++;
 116:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <contor>
 11a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <contor+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <contor+0x1>
 124:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <contor>
	
	if(contor >= 1000){
 128:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <contor>
 12c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <contor+0x1>
 130:	88 3e       	cpi	r24, 0xE8	; 232
 132:	93 40       	sbci	r25, 0x03	; 3
 134:	80 f0       	brcs	.+32     	; 0x156 <__vector_14+0x52>
		secunde++;
 136:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <secunde>
 13a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <secunde+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <secunde+0x1>
 144:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <secunde>
		contor = 0;
 148:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <contor+0x1>
 14c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <contor>
		flag_timer = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <flag_timer>
	}
	
	sei();
 156:	78 94       	sei
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <init_USART>:

char msg[10]; //trebuie mutate de aici

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 168:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 16c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 170:	e1 ec       	ldi	r30, 0xC1	; 193
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 61       	ori	r24, 0x18	; 24
 178:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << TXCIE0)|(1 << UDRIE0);
 17a:	80 81       	ld	r24, Z
 17c:	80 6e       	ori	r24, 0xE0	; 224
 17e:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 180:	e2 ec       	ldi	r30, 0xC2	; 194
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8e 60       	ori	r24, 0x0E	; 14
 188:	80 83       	st	Z, r24
	
	sei();
 18a:	78 94       	sei
 18c:	08 95       	ret

0000018e <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 18e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <transmit_data>
	
	UDR0 = data;
 196:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 19a:	08 95       	ret

0000019c <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 19c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a0:	88 23       	and	r24, r24
 1a2:	e4 f7       	brge	.-8      	; 0x19c <receive_data>

	return UDR0;
 1a4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1a8:	08 95       	ret

000001aa <send_data>:
	read_data(msg);
	send_data(msg);
	//switch_data(msg);
}

void send_data(char data[]){
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	8c 01       	movw	r16, r24
	
	uint8_t i = 0;
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i]){
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <send_data+0x12>
		transmit_data(data[i]);
 1b6:	0e 94 c7 00 	call	0x18e	; 0x18e <transmit_data>
		i++;
 1ba:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[]){
	
	uint8_t i = 0;
	
	while(data[i]){
 1bc:	f8 01       	movw	r30, r16
 1be:	ec 0f       	add	r30, r28
 1c0:	f1 1d       	adc	r31, r1
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	f7 cf       	rjmp	.-18     	; 0x1b6 <send_data+0xc>
		transmit_data(data[i]);
		i++;
	}
}
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <read_data>:

void read_data(char data[])
{	
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	8c 01       	movw	r16, r24
	char response;
	uint8_t i;
	i = 0;
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <read_data+0x1e>
	{	
		response = receive_data();		
 1dc:	0e 94 ce 00 	call	0x19c	; 0x19c <receive_data>
		
		if(response == '\r')
 1e0:	8d 30       	cpi	r24, 0x0D	; 13
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <read_data+0x22>
		{
			break;	
		}
		else
		{
			data[i] = response;
 1e4:	f8 01       	movw	r30, r16
 1e6:	ec 0f       	add	r30, r28
 1e8:	f1 1d       	adc	r31, r1
 1ea:	80 83       	st	Z, r24
			i++;
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
{	
	char response;
	uint8_t i;
	i = 0;
	
	while (i < (MAX_LENGTH - 1))
 1ee:	c1 33       	cpi	r28, 0x31	; 49
 1f0:	a8 f3       	brcs	.-22     	; 0x1dc <read_data+0xc>
			data[i] = response;
			i++;
		}
	}
	
	data[i] = 0; //final de string
 1f2:	f8 01       	movw	r30, r16
 1f4:	ec 0f       	add	r30, r28
 1f6:	f1 1d       	adc	r31, r1
 1f8:	10 82       	st	Z, r1
}
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	08 95       	ret

00000202 <__vector_18>:

	return UDR0;
}

ISR(USART_RX_vect) //atunci cand este apasata tasta Enter
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	//flag_rx = 1;
	
	read_data(msg);
 224:	8e ea       	ldi	r24, 0xAE	; 174
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <read_data>
	send_data(msg);
 22c:	8e ea       	ldi	r24, 0xAE	; 174
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 d5 00 	call	0x1aa	; 0x1aa <send_data>
	//switch_data(msg);
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
