
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  0000043a  000004ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  008001b4  008001b4  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001048  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c0  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00002dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_18>
  4c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3d       	cpi	r26, 0xD3	; 211
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 01 01 	call	0x202	; 0x202 <main>
  9e:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:

#include "functii_afisare.h"

void new_line(){
	
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Afisare timp\n\r 2. Ascundere timp\n\r 5. LED ON/OFF\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
  b8:	08 95       	ret

000000ba <switch_data>:
}

void switch_data(char c){
	
	switch(c)
  ba:	82 33       	cpi	r24, 0x32	; 50
  bc:	51 f0       	breq	.+20     	; 0xd2 <switch_data+0x18>
  be:	85 33       	cpi	r24, 0x35	; 53
  c0:	b9 f0       	breq	.+46     	; 0xf0 <switch_data+0x36>
  c2:	81 33       	cpi	r24, 0x31	; 49
  c4:	91 f5       	brne	.+100    	; 0x12a <switch_data+0x70>
	{
	case '1': 
		
		new_line();
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	    flag_afisare_timp = 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
		break;
  d0:	08 95       	ret
		
	case '2': 
		
		send_data(CLEAR);
  d2:	8c e4       	ldi	r24, 0x4C	; 76
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		send_data("\n\r Ascuns\n\r");
  da:	8f e4       	ldi	r24, 0x4F	; 79
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
        afisare_meniu();
  e2:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	    flag_afisare_timp = 0;
  ea:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
	    break;
  ee:	08 95       	ret
		
	case '5': 
		
		stare_led = !stare_led;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <stare_led>
  f6:	91 11       	cpse	r25, r1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <stare_led>
		
		if(stare_led == 1){
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	51 f4       	brne	.+20     	; 0x116 <switch_data+0x5c>
			send_data("\n\rLED ON\n\r");
 102:	8b e5       	ldi	r24, 0x5B	; 91
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
			PORTB |= (1 << PINB0) ;
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	85 b9       	out	0x05, r24	; 5
			new_line();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 114:	08 95       	ret
		}
		else{
			send_data("\n\rLED OFF\n\r");
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
			PORTB &= ~(1 << PINB0);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	85 b9       	out	0x05, r24	; 5
			new_line();
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 128:	08 95       	ret
		
		break;
		
	default: 
		
		send_data("\n\rINCORECT!\n\r");
 12a:	82 e7       	ldi	r24, 0x72	; 114
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		afisare_meniu();
 132:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 13a:	08 95       	ret

0000013c <afisare_timp>:
	}
}

void afisare_timp(){
	
	incrementare_minute();
 13c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <incrementare_minute>
	
	if(flag_timer == 1)
 140:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <flag_timer>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	09 f0       	breq	.+2      	; 0x14a <afisare_timp+0xe>
 148:	54 c0       	rjmp	.+168    	; 0x1f2 <afisare_timp+0xb6>
	{
		send_data(CLEAR);
 14a:	8c e4       	ldi	r24, 0x4C	; 76
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		send_data("\n\r |-------------|-------------|\n\r");
 152:	81 e9       	ldi	r24, 0x91	; 145
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		send_data(" | Timp: ");
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		
		itoa(secunde, ch_sec, 10);
 162:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <secunde>
 166:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 16a:	4a e0       	ldi	r20, 0x0A	; 10
 16c:	67 ec       	ldi	r22, 0xC7	; 199
 16e:	71 e0       	ldi	r23, 0x01	; 1
 170:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 174:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 178:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 17c:	4a e0       	ldi	r20, 0x0A	; 10
 17e:	6d eb       	ldi	r22, 0xBD	; 189
 180:	71 e0       	ldi	r23, 0x01	; 1
 182:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__itoa_ncheck>
		
		//format 00:00
		
		if(minute < 10)
 186:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 18a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 18e:	0a 97       	sbiw	r24, 0x0a	; 10
 190:	48 f4       	brcc	.+18     	; 0x1a4 <afisare_timp+0x68>
		{
			send_data("0");
 192:	8b e8       	ldi	r24, 0x8B	; 139
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
			send_data(ch_min);
 19a:	8d eb       	ldi	r24, 0xBD	; 189
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <afisare_timp+0x70>
		}
		else
		send_data(ch_min);
 1a4:	8d eb       	ldi	r24, 0xBD	; 189
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		
		if((secunde >= 0) && (secunde < 10)) //interval pt rezolvare bug 00:059
 1ac:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <secunde>
 1b0:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <secunde+0x1>
 1b4:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <secunde>
 1b8:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <secunde+0x1>
 1bc:	0a 97       	sbiw	r24, 0x0a	; 10
 1be:	48 f4       	brcc	.+18     	; 0x1d2 <afisare_timp+0x96>
		{
			send_data(":0");
 1c0:	8a e8       	ldi	r24, 0x8A	; 138
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
			send_data(ch_sec);
 1c8:	87 ec       	ldi	r24, 0xC7	; 199
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <afisare_timp+0xa6>
		}
		else
		{
			send_data(":");
 1d2:	8d e8       	ldi	r24, 0x8D	; 141
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
			send_data(ch_sec);
 1da:	87 ec       	ldi	r24, 0xC7	; 199
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		}
		
		send_data(" |\n\r |-------------|-------------|\n\r");
 1e2:	8f e8       	ldi	r24, 0x8F	; 143
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
		new_line();
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		
		flag_timer = 0;
 1ee:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <flag_timer>
 1f2:	08 95       	ret

000001f4 <afisare_program>:
}


void afisare_program(){
	
	if(flag_afisare_timp == 1)
 1f4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	11 f4       	brne	.+4      	; 0x200 <afisare_program+0xc>
		afisare_timp();
 1fc:	0e 94 9e 00 	call	0x13c	; 0x13c <afisare_timp>
 200:	08 95       	ret

00000202 <main>:
#include "timer.h"
#include "functii_afisare.h"

int main(void)
{	
	init_devices();	
 202:	0e 94 22 01 	call	0x244	; 0x244 <init_devices>
	init_USART(MYUBRR);
 206:	87 e6       	ldi	r24, 0x67	; 103
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8a 01 	call	0x314	; 0x314 <init_USART>
	
	send_data(CLEAR);
 20e:	8c e4       	ldi	r24, 0x4C	; 76
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 ac 01 	call	0x358	; 0x358 <send_data>
	afisare_meniu();
 216:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		receive_data();
 21e:	0e 94 ca 01 	call	0x394	; 0x394 <receive_data>
		afisare_program();
 222:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <afisare_program>
 226:	fb cf       	rjmp	.-10     	; 0x21e <main+0x1c>

00000228 <init_timer>:

#include "timer.h"

void init_timer(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 228:	84 b5       	in	r24, 0x24	; 36
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
 22e:	89 ef       	ldi	r24, 0xF9	; 249
 230:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 232:	85 b5       	in	r24, 0x25	; 37
 234:	83 60       	ori	r24, 0x03	; 3
 236:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 238:	ee e6       	ldi	r30, 0x6E	; 110
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <init_devices>:
}

void init_devices(){
	
	cli();
 244:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x01;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 24a:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 24c:	0e 94 14 01 	call	0x228	; 0x228 <init_timer>
	
	sei();
 250:	78 94       	sei
 252:	08 95       	ret

00000254 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
	
	cli();
 264:	f8 94       	cli
	
	contor++;
 266:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <contor>
 26a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <contor+0x1>
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <contor+0x1>
 274:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <contor>
	
	if(contor >= 1000){
 278:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <contor>
 27c:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <contor+0x1>
 280:	88 3e       	cpi	r24, 0xE8	; 232
 282:	93 40       	sbci	r25, 0x03	; 3
 284:	80 f0       	brcs	.+32     	; 0x2a6 <__vector_14+0x52>
		secunde++;
 286:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <secunde>
 28a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <secunde+0x1>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <secunde+0x1>
 294:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <secunde>
		contor = 0;
 298:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <contor+0x1>
 29c:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <contor>
		flag_timer = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <flag_timer>
	}
	
	sei();
 2a6:	78 94       	sei
}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde >= 60)	//in ISR aveam 01:59 in loc de 01:00
 2b8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <secunde>
 2bc:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <secunde+0x1>
 2c0:	cc 97       	sbiw	r24, 0x3c	; 60
 2c2:	38 f1       	brcs	.+78     	; 0x312 <incrementare_minute+0x5a>
	{
		secunde %= 60;
 2c4:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <secunde>
 2c8:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <secunde+0x1>
 2cc:	9a 01       	movw	r18, r20
 2ce:	a9 e8       	ldi	r26, 0x89	; 137
 2d0:	b8 e8       	ldi	r27, 0x88	; 136
 2d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__umulhisi3>
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	92 95       	swap	r25
 2dc:	82 95       	swap	r24
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 27       	eor	r24, r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	6c e3       	ldi	r22, 0x3C	; 60
 2e8:	68 9f       	mul	r22, r24
 2ea:	90 01       	movw	r18, r0
 2ec:	69 9f       	mul	r22, r25
 2ee:	30 0d       	add	r19, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	ca 01       	movw	r24, r20
 2f4:	82 1b       	sub	r24, r18
 2f6:	93 0b       	sbc	r25, r19
 2f8:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <secunde+0x1>
 2fc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <secunde>
		minute++;
 300:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minute>
 304:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <minute+0x1>
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <minute+0x1>
 30e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <minute>
 312:	08 95       	ret

00000314 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 314:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 318:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 31c:	e1 ec       	ldi	r30, 0xC1	; 193
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	88 61       	ori	r24, 0x18	; 24
 324:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0);	
 326:	80 81       	ld	r24, Z
 328:	80 6a       	ori	r24, 0xA0	; 160
 32a:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 32c:	e2 ec       	ldi	r30, 0xC2	; 194
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	8e 60       	ori	r24, 0x0E	; 14
 334:	80 83       	st	Z, r24
	
	sei();
 336:	78 94       	sei
 338:	08 95       	ret

0000033a <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24

	flag_tx = 1;	
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <flag_tx>
}
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <send_data>:

void send_data(char *c){
 358:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 35a:	09 c0       	rjmp	.+18     	; 0x36e <send_data+0x16>
	{
		if(flag_tx == 1)
 35c:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <flag_tx>
 360:	21 30       	cpi	r18, 0x01	; 1
 362:	29 f4       	brne	.+10     	; 0x36e <send_data+0x16>
		{
			UDR0 = *c;
 364:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 368:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 36a:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 36e:	90 81       	ld	r25, Z
 370:	91 11       	cpse	r25, r1
 372:	f4 cf       	rjmp	.-24     	; 0x35c <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 374:	08 95       	ret

00000376 <__vector_18>:

ISR(USART_RX_vect){
 376:	1f 92       	push	r1
 378:	0f 92       	push	r0
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	0f 92       	push	r0
 37e:	11 24       	eor	r1, r1
 380:	8f 93       	push	r24
	
	flag_rx = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <flag_rx>
}
 388:	8f 91       	pop	r24
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <receive_data>:

void receive_data(){
	
	char c;

	if(flag_rx == 1)
 394:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <flag_rx>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	41 f4       	brne	.+16     	; 0x3ac <receive_data+0x18>
	{	
		c = UDR0;
 39c:	e6 ec       	ldi	r30, 0xC6	; 198
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
		UDR0 = c; //echo, afisez ce tastez
 3a2:	80 83       	st	Z, r24
		
		switch_data(c);
 3a4:	0e 94 5d 00 	call	0xba	; 0xba <switch_data>
		
		flag_rx = 0;
 3a8:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <flag_rx>
 3ac:	08 95       	ret

000003ae <__umulhisi3>:
 3ae:	a2 9f       	mul	r26, r18
 3b0:	b0 01       	movw	r22, r0
 3b2:	b3 9f       	mul	r27, r19
 3b4:	c0 01       	movw	r24, r0
 3b6:	a3 9f       	mul	r26, r19
 3b8:	70 0d       	add	r23, r0
 3ba:	81 1d       	adc	r24, r1
 3bc:	11 24       	eor	r1, r1
 3be:	91 1d       	adc	r25, r1
 3c0:	b2 9f       	mul	r27, r18
 3c2:	70 0d       	add	r23, r0
 3c4:	81 1d       	adc	r24, r1
 3c6:	11 24       	eor	r1, r1
 3c8:	91 1d       	adc	r25, r1
 3ca:	08 95       	ret

000003cc <__itoa_ncheck>:
 3cc:	bb 27       	eor	r27, r27
 3ce:	4a 30       	cpi	r20, 0x0A	; 10
 3d0:	31 f4       	brne	.+12     	; 0x3de <__itoa_ncheck+0x12>
 3d2:	99 23       	and	r25, r25
 3d4:	22 f4       	brpl	.+8      	; 0x3de <__itoa_ncheck+0x12>
 3d6:	bd e2       	ldi	r27, 0x2D	; 45
 3d8:	90 95       	com	r25
 3da:	81 95       	neg	r24
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__utoa_common>

000003e2 <__utoa_ncheck>:
 3e2:	bb 27       	eor	r27, r27

000003e4 <__utoa_common>:
 3e4:	fb 01       	movw	r30, r22
 3e6:	55 27       	eor	r21, r21
 3e8:	aa 27       	eor	r26, r26
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	aa 1f       	adc	r26, r26
 3f0:	a4 17       	cp	r26, r20
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <__utoa_common+0x14>
 3f4:	a4 1b       	sub	r26, r20
 3f6:	83 95       	inc	r24
 3f8:	50 51       	subi	r21, 0x10	; 16
 3fa:	b9 f7       	brne	.-18     	; 0x3ea <__utoa_common+0x6>
 3fc:	a0 5d       	subi	r26, 0xD0	; 208
 3fe:	aa 33       	cpi	r26, 0x3A	; 58
 400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	a9 5d       	subi	r26, 0xD9	; 217
 404:	a1 93       	st	Z+, r26
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	79 f7       	brne	.-34     	; 0x3e8 <__utoa_common+0x4>
 40a:	b1 11       	cpse	r27, r1
 40c:	b1 93       	st	Z+, r27
 40e:	11 92       	st	Z+, r1
 410:	cb 01       	movw	r24, r22
 412:	0c 94 0b 02 	jmp	0x416	; 0x416 <strrev>

00000416 <strrev>:
 416:	dc 01       	movw	r26, r24
 418:	fc 01       	movw	r30, r24
 41a:	67 2f       	mov	r22, r23
 41c:	71 91       	ld	r23, Z+
 41e:	77 23       	and	r23, r23
 420:	e1 f7       	brne	.-8      	; 0x41a <strrev+0x4>
 422:	32 97       	sbiw	r30, 0x02	; 2
 424:	04 c0       	rjmp	.+8      	; 0x42e <strrev+0x18>
 426:	7c 91       	ld	r23, X
 428:	6d 93       	st	X+, r22
 42a:	70 83       	st	Z, r23
 42c:	62 91       	ld	r22, -Z
 42e:	ae 17       	cp	r26, r30
 430:	bf 07       	cpc	r27, r31
 432:	c8 f3       	brcs	.-14     	; 0x426 <strrev+0x10>
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
