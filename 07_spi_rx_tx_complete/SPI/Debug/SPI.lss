
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000438  000004cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080017e  0080017e  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000111a  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d4  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bf  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  000029c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00002e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_18>
  4c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 39       	cpi	r26, 0x9D	; 157
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9e:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:
#include "functii_afisare.h"
#include <stdio.h>

void new_line(){
	
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Meniu\n\r 2. Timp\n\r 5. LED ON/OFF\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
  b8:	08 95       	ret

000000ba <aprinde_led>:
	}
}

void aprinde_led(){
	
	if(stare_led == 1){
  ba:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <stare_led>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	51 f4       	brne	.+20     	; 0xd6 <aprinde_led+0x1c>
		send_data("\n\rLED ON\n\r");
  c2:	8b e3       	ldi	r24, 0x3B	; 59
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		PORTB |= (1 << PINB0);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 b9       	out	0x05, r24	; 5
		new_line();
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  d4:	08 95       	ret
	}
	else{
		send_data("\n\rLED OFF\n\r");
  d6:	86 e4       	ldi	r24, 0x46	; 70
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		PORTB &= ~(1 << PINB0);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	85 b9       	out	0x05, r24	; 5
		new_line();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  e8:	08 95       	ret

000000ea <switch_data>:
}

void switch_data(char c){
	//char a[200];
	
	switch(c)
  ea:	82 33       	cpi	r24, 0x32	; 50
  ec:	99 f0       	breq	.+38     	; 0x114 <switch_data+0x2a>
  ee:	85 33       	cpi	r24, 0x35	; 53
  f0:	b9 f0       	breq	.+46     	; 0x120 <switch_data+0x36>
  f2:	81 33       	cpi	r24, 0x31	; 49
  f4:	f9 f4       	brne	.+62     	; 0x134 <switch_data+0x4a>
	{
	case '1':
		
		//PORTB |= (1 << PINB0);
	
		send_data(CLEAR);  	  
  f6:	82 e5       	ldi	r24, 0x52	; 82
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		send_data("\n\r Ascuns\n\r");
  fe:	85 e5       	ldi	r24, 0x55	; 85
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		afisare_meniu();
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_afisare_timp = 0;
 10e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
		break;
 112:	08 95       	ret
	
	case '2': 
		
		new_line();
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	    flag_afisare_timp = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
		break;
 11e:	08 95       	ret
			
	case '5': 
		
		stare_led = !stare_led;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <stare_led>
 126:	91 11       	cpse	r25, r1
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <stare_led>
		aprinde_led();
 12e:	0e 94 5d 00 	call	0xba	; 0xba <aprinde_led>
		break;
 132:	08 95       	ret
	default: 
		
		//sprintf(a, "incorect");
		//send_data(a);
		
		send_data("\n\rINCORECT!\n\r");
 134:	81 e6       	ldi	r24, 0x61	; 97
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		afisare_meniu();
 13c:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 144:	08 95       	ret

00000146 <afisare_program>:
	}
}

void afisare_program(){
	
	incrementare_minute();
 146:	0e 94 5d 01 	call	0x2ba	; 0x2ba <incrementare_minute>
	
	if((flag_timer == 1) && (flag_afisare_timp == 1))
 14a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <flag_timer>
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	09 f0       	breq	.+2      	; 0x154 <afisare_program+0xe>
 152:	55 c0       	rjmp	.+170    	; 0x1fe <afisare_program+0xb8>
 154:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	09 f0       	breq	.+2      	; 0x15e <afisare_program+0x18>
 15c:	50 c0       	rjmp	.+160    	; 0x1fe <afisare_program+0xb8>
	{
		send_data(CLEAR);
 15e:	82 e5       	ldi	r24, 0x52	; 82
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		send_data("\n\r Timp: ");
 166:	8f e6       	ldi	r24, 0x6F	; 111
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		
		itoa(secunde,  ch_sec, 10);
 16e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <secunde>
 172:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 176:	4a e0       	ldi	r20, 0x0A	; 10
 178:	61 e9       	ldi	r22, 0x91	; 145
 17a:	71 e0       	ldi	r23, 0x01	; 1
 17c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 180:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <minute>
 184:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <minute+0x1>
 188:	4a e0       	ldi	r20, 0x0A	; 10
 18a:	67 e8       	ldi	r22, 0x87	; 135
 18c:	71 e0       	ldi	r23, 0x01	; 1
 18e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__itoa_ncheck>
		
		//format 00:00
		
		if(minute < 10)
 192:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <minute>
 196:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <minute+0x1>
 19a:	0a 97       	sbiw	r24, 0x0a	; 10
 19c:	48 f4       	brcc	.+18     	; 0x1b0 <afisare_program+0x6a>
		{
			send_data("0");
 19e:	8a e7       	ldi	r24, 0x7A	; 122
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
			send_data(ch_min);
 1a6:	87 e8       	ldi	r24, 0x87	; 135
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <afisare_program+0x72>
		}
		else
			send_data(ch_min);
 1b0:	87 e8       	ldi	r24, 0x87	; 135
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		
		if((secunde >= 0) && (secunde < 10)) //interval pt rezolvare bug 00:059
 1b8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <secunde>
 1bc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <secunde+0x1>
 1c0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <secunde>
 1c4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <secunde+0x1>
 1c8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ca:	48 f4       	brcc	.+18     	; 0x1de <afisare_program+0x98>
		{
			send_data(":0");
 1cc:	89 e7       	ldi	r24, 0x79	; 121
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
			send_data(ch_sec);
 1d4:	81 e9       	ldi	r24, 0x91	; 145
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <afisare_program+0xa8>
		}
		else
		{
			send_data(":");
 1de:	8c e7       	ldi	r24, 0x7C	; 124
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
			send_data(ch_sec);
 1e6:	81 e9       	ldi	r24, 0x91	; 145
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		}
		
		send_data("\n\r");
 1ee:	8c e6       	ldi	r24, 0x6C	; 108
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
		new_line();
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_timer = 0;
 1fa:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <flag_timer>
 1fe:	08 95       	ret

00000200 <main>:
//#include "timer.h"
#include "functii_afisare.h"

int main(void)
{	
	init_devices();
 200:	0e 94 23 01 	call	0x246	; 0x246 <init_devices>
	init_USART(MYUBRR);
 204:	67 e6       	ldi	r22, 0x67	; 103
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 8b 01 	call	0x316	; 0x316 <init_USART>
	
	send_data(CLEAR);
 210:	82 e5       	ldi	r24, 0x52	; 82
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 ad 01 	call	0x35a	; 0x35a <send_data>
	afisare_meniu();
 218:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		receive_data();
 220:	0e 94 cb 01 	call	0x396	; 0x396 <receive_data>
		afisare_program();
 224:	0e 94 a3 00 	call	0x146	; 0x146 <afisare_program>
 228:	fb cf       	rjmp	.-10     	; 0x220 <main+0x20>

0000022a <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	82 60       	ori	r24, 0x02	; 2
 22e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 230:	89 ef       	ldi	r24, 0xF9	; 249
 232:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 234:	85 b5       	in	r24, 0x25	; 37
 236:	83 60       	ori	r24, 0x03	; 3
 238:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 23a:	ee e6       	ldi	r30, 0x6E	; 110
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
 244:	08 95       	ret

00000246 <init_devices>:
}

void init_devices(){
	
	cli();
 246:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x01;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 24c:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 24e:	0e 94 15 01 	call	0x22a	; 0x22a <init_timer>
	
	sei();
 252:	78 94       	sei
 254:	08 95       	ret

00000256 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
	
	cli();
 266:	f8 94       	cli
	
	contor++;
 268:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <contor>
 26c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <contor+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <contor+0x1>
 276:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <contor>
	
	if(contor >= 1000){
 27a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <contor>
 27e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <contor+0x1>
 282:	88 3e       	cpi	r24, 0xE8	; 232
 284:	93 40       	sbci	r25, 0x03	; 3
 286:	80 f0       	brcs	.+32     	; 0x2a8 <__vector_14+0x52>
		secunde++;
 288:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <secunde>
 28c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <secunde+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <secunde+0x1>
 296:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <secunde>
		contor = 0;
 29a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <contor+0x1>
 29e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <contor>
		flag_timer = 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_timer>
	}
	
	sei();
 2a8:	78 94       	sei
}
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde > 59)	//in ISR aveam 01:59 in loc de 01:00
 2ba:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <secunde>
 2be:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <secunde+0x1>
 2c2:	cc 97       	sbiw	r24, 0x3c	; 60
 2c4:	38 f1       	brcs	.+78     	; 0x314 <incrementare_minute+0x5a>
	{
		secunde %= 60;
 2c6:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <secunde>
 2ca:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <secunde+0x1>
 2ce:	9a 01       	movw	r18, r20
 2d0:	a9 e8       	ldi	r26, 0x89	; 137
 2d2:	b8 e8       	ldi	r27, 0x88	; 136
 2d4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__umulhisi3>
 2d8:	96 95       	lsr	r25
 2da:	87 95       	ror	r24
 2dc:	92 95       	swap	r25
 2de:	82 95       	swap	r24
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	89 27       	eor	r24, r25
 2e4:	9f 70       	andi	r25, 0x0F	; 15
 2e6:	89 27       	eor	r24, r25
 2e8:	6c e3       	ldi	r22, 0x3C	; 60
 2ea:	68 9f       	mul	r22, r24
 2ec:	90 01       	movw	r18, r0
 2ee:	69 9f       	mul	r22, r25
 2f0:	30 0d       	add	r19, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	ca 01       	movw	r24, r20
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <secunde+0x1>
 2fe:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <secunde>
		minute++;
 302:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <minute>
 306:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <minute+0x1>
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <minute+0x1>
 310:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <minute>
 314:	08 95       	ret

00000316 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 61       	ori	r24, 0x18	; 24
 326:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0);	
 328:	80 81       	ld	r24, Z
 32a:	80 6a       	ori	r24, 0xA0	; 160
 32c:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 32e:	e2 ec       	ldi	r30, 0xC2	; 194
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8e 60       	ori	r24, 0x0E	; 14
 336:	80 83       	st	Z, r24
	
	sei();
 338:	78 94       	sei
 33a:	08 95       	ret

0000033c <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	8f 93       	push	r24

	flag_tx = 1;	
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <flag_tx>
}
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <send_data>:

void send_data(char *c){
 35a:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 35c:	09 c0       	rjmp	.+18     	; 0x370 <send_data+0x16>
	{
		if(flag_tx == 1)
 35e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <flag_tx>
 362:	21 30       	cpi	r18, 0x01	; 1
 364:	29 f4       	brne	.+10     	; 0x370 <send_data+0x16>
		{
		//	PORTB ^= (1 << PINB0);
			UDR0 = *c;
 366:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 36a:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 36c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 370:	90 81       	ld	r25, Z
 372:	91 11       	cpse	r25, r1
 374:	f4 cf       	rjmp	.-24     	; 0x35e <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 376:	08 95       	ret

00000378 <__vector_18>:

ISR(USART_RX_vect){
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	8f 93       	push	r24
	
	flag_rx = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <flag_rx>
}
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <receive_data>:

void receive_data(){
	
	char c;
	 
	if(flag_rx == 1)
 396:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <flag_rx>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	31 f4       	brne	.+12     	; 0x3aa <receive_data+0x14>
	{	
		
		c = UDR0;
 39e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		//UDR0 = c; //echo, afisez ce trimit (tastez)
		//c++;  
			
		switch_data(c);	
 3a2:	0e 94 75 00 	call	0xea	; 0xea <switch_data>
		flag_rx = 0;
 3a6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <flag_rx>
 3aa:	08 95       	ret

000003ac <__umulhisi3>:
 3ac:	a2 9f       	mul	r26, r18
 3ae:	b0 01       	movw	r22, r0
 3b0:	b3 9f       	mul	r27, r19
 3b2:	c0 01       	movw	r24, r0
 3b4:	a3 9f       	mul	r26, r19
 3b6:	70 0d       	add	r23, r0
 3b8:	81 1d       	adc	r24, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	91 1d       	adc	r25, r1
 3be:	b2 9f       	mul	r27, r18
 3c0:	70 0d       	add	r23, r0
 3c2:	81 1d       	adc	r24, r1
 3c4:	11 24       	eor	r1, r1
 3c6:	91 1d       	adc	r25, r1
 3c8:	08 95       	ret

000003ca <__itoa_ncheck>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	4a 30       	cpi	r20, 0x0A	; 10
 3ce:	31 f4       	brne	.+12     	; 0x3dc <__itoa_ncheck+0x12>
 3d0:	99 23       	and	r25, r25
 3d2:	22 f4       	brpl	.+8      	; 0x3dc <__itoa_ncheck+0x12>
 3d4:	bd e2       	ldi	r27, 0x2D	; 45
 3d6:	90 95       	com	r25
 3d8:	81 95       	neg	r24
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__utoa_common>

000003e0 <__utoa_ncheck>:
 3e0:	bb 27       	eor	r27, r27

000003e2 <__utoa_common>:
 3e2:	fb 01       	movw	r30, r22
 3e4:	55 27       	eor	r21, r21
 3e6:	aa 27       	eor	r26, r26
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	aa 1f       	adc	r26, r26
 3ee:	a4 17       	cp	r26, r20
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <__utoa_common+0x14>
 3f2:	a4 1b       	sub	r26, r20
 3f4:	83 95       	inc	r24
 3f6:	50 51       	subi	r21, 0x10	; 16
 3f8:	b9 f7       	brne	.-18     	; 0x3e8 <__utoa_common+0x6>
 3fa:	a0 5d       	subi	r26, 0xD0	; 208
 3fc:	aa 33       	cpi	r26, 0x3A	; 58
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 400:	a9 5d       	subi	r26, 0xD9	; 217
 402:	a1 93       	st	Z+, r26
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	79 f7       	brne	.-34     	; 0x3e6 <__utoa_common+0x4>
 408:	b1 11       	cpse	r27, r1
 40a:	b1 93       	st	Z+, r27
 40c:	11 92       	st	Z+, r1
 40e:	cb 01       	movw	r24, r22
 410:	0c 94 0a 02 	jmp	0x414	; 0x414 <strrev>

00000414 <strrev>:
 414:	dc 01       	movw	r26, r24
 416:	fc 01       	movw	r30, r24
 418:	67 2f       	mov	r22, r23
 41a:	71 91       	ld	r23, Z+
 41c:	77 23       	and	r23, r23
 41e:	e1 f7       	brne	.-8      	; 0x418 <strrev+0x4>
 420:	32 97       	sbiw	r30, 0x02	; 2
 422:	04 c0       	rjmp	.+8      	; 0x42c <strrev+0x18>
 424:	7c 91       	ld	r23, X
 426:	6d 93       	st	X+, r22
 428:	70 83       	st	Z, r23
 42a:	62 91       	ld	r22, -Z
 42c:	ae 17       	cp	r26, r30
 42e:	bf 07       	cpc	r27, r31
 430:	c8 f3       	brcs	.-14     	; 0x424 <strrev+0x10>
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
