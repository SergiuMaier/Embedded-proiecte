
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  00800156  00800156  000004f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001011  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a24  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00002d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_18>
  4c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 35       	cpi	r26, 0x56	; 86
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e5       	ldi	r26, 0x56	; 86
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  9e:	0c 94 05 02 	jmp	0x40a	; 0x40a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:
#include "USART.h"
#include <stdio.h>

void new_line(){
	
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Meniu\n\r 2. Timp\n\r 5. LED ON/OFF\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
  b8:	08 95       	ret

000000ba <aprinde_led>:
	}
}

void aprinde_led(){
	
	if(stare_led == 1){
  ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <stare_led>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	21 f4       	brne	.+8      	; 0xca <aprinde_led+0x10>
		//send_data("LED ON\n\r");
		PORTB |= (1 << PINB0);
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	08 95       	ret
		//new_line();
	}
	else{
		//send_data("LED OFF\n\r");
		PORTB &= ~(1 << PINB0);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <switch_data>:
}

void switch_data(char c){
	//
	
	switch(c)
  d2:	82 33       	cpi	r24, 0x32	; 50
  d4:	79 f0       	breq	.+30     	; 0xf4 <switch_data+0x22>
  d6:	85 33       	cpi	r24, 0x35	; 53
  d8:	89 f0       	breq	.+34     	; 0xfc <switch_data+0x2a>
  da:	81 33       	cpi	r24, 0x31	; 49
  dc:	c9 f4       	brne	.+50     	; 0x110 <switch_data+0x3e>
	{
	case '1':
		
		send_data(CLEAR);  	  
  de:	8b e3       	ldi	r24, 0x3B	; 59
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		afisare_meniu();
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_afisare_timp = 0;
  ee:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__data_end>
		break;
  f2:	08 95       	ret
	
	case '2': 
		
	    flag_afisare_timp = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
		break;
  fa:	08 95       	ret
			
	case '5': 
		
		stare_led = !stare_led;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <stare_led>
 102:	91 11       	cpse	r25, r1
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <stare_led>
		aprinde_led();
 10a:	0e 94 5d 00 	call	0xba	; 0xba <aprinde_led>
		break;
 10e:	08 95       	ret
		
	default: 
		
		send_data("INCORECT!\n\r");
 110:	8e e3       	ldi	r24, 0x3E	; 62
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		afisare_meniu();
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 120:	08 95       	ret

00000122 <afisare_timp>:
	}
}

void afisare_timp(){
	
	incrementare_minute();
 122:	0e 94 48 01 	call	0x290	; 0x290 <incrementare_minute>
		
	if((flag_timer == 1) && (flag_afisare_timp == 1))
 126:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <flag_timer>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	09 f0       	breq	.+2      	; 0x130 <afisare_timp+0xe>
 12e:	54 c0       	rjmp	.+168    	; 0x1d8 <afisare_timp+0xb6>
 130:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <afisare_timp+0x18>
 138:	4f c0       	rjmp	.+158    	; 0x1d8 <afisare_timp+0xb6>
	{	
		
		//send_data(CLEAR);
		
		send_data("Timp: ");
 13a:	8a e4       	ldi	r24, 0x4A	; 74
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		
		itoa(secunde,  ch_sec, 10);
 142:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <secunde>
 146:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14a:	4a e0       	ldi	r20, 0x0A	; 10
 14c:	61 e3       	ldi	r22, 0x31	; 49
 14e:	72 e0       	ldi	r23, 0x02	; 2
 150:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 154:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <minute>
 158:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <minute+0x1>
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	6f e5       	ldi	r22, 0x5F	; 95
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__itoa_ncheck>
		
		//format 00:00
		
		if(minute < 10)
 166:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <minute>
 16a:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <minute+0x1>
 16e:	0a 97       	sbiw	r24, 0x0a	; 10
 170:	48 f4       	brcc	.+18     	; 0x184 <afisare_timp+0x62>
		{
			send_data("0");
 172:	81 e5       	ldi	r24, 0x51	; 81
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
			send_data(ch_min);
 17a:	8f e5       	ldi	r24, 0x5F	; 95
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
 182:	04 c0       	rjmp	.+8      	; 0x18c <afisare_timp+0x6a>
		}
		else
			send_data(ch_min);
 184:	8f e5       	ldi	r24, 0x5F	; 95
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		
		if((secunde >= 0) && (secunde < 10)) //interval pt rezolvare bug 00:059
 18c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <secunde>
 190:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <secunde+0x1>
 194:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <secunde>
 198:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <secunde+0x1>
 19c:	0a 97       	sbiw	r24, 0x0a	; 10
 19e:	60 f4       	brcc	.+24     	; 0x1b8 <afisare_timp+0x96>
		{
			send_data(":");
 1a0:	83 e5       	ldi	r24, 0x53	; 83
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
			PORTB |= (1 << PINB0);  //debug
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	85 b9       	out	0x05, r24	; 5
			send_data(ch_sec);
 1ae:	81 e3       	ldi	r24, 0x31	; 49
 1b0:	92 e0       	ldi	r25, 0x02	; 2
 1b2:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
 1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <afisare_timp+0xa6>
		}
		else
		{
			send_data(":");
 1b8:	83 e5       	ldi	r24, 0x53	; 83
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
			send_data(ch_sec);
 1c0:	81 e3       	ldi	r24, 0x31	; 49
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		}
		
		send_data("\n\r");
 1c8:	87 e4       	ldi	r24, 0x47	; 71
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
		new_line();
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_timer = 0;
 1d4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <flag_timer>
 1d8:	08 95       	ret

000001da <main>:
#include "timer.h"
#include "functii_afisare.h"

int main(void)
{	
	init_devices();
 1da:	0e 94 0e 01 	call	0x21c	; 0x21c <init_devices>
	init_USART(MYUBRR);
 1de:	87 e6       	ldi	r24, 0x67	; 103
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <init_USART>
	
	send_data(CLEAR);
 1e6:	8b e3       	ldi	r24, 0x3B	; 59
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 98 01 	call	0x330	; 0x330 <send_data>
	afisare_meniu();
 1ee:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		receive_data();
 1f6:	0e 94 b6 01 	call	0x36c	; 0x36c <receive_data>
		afisare_timp();
 1fa:	0e 94 91 00 	call	0x122	; 0x122 <afisare_timp>
 1fe:	fb cf       	rjmp	.-10     	; 0x1f6 <main+0x1c>

00000200 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 200:	84 b5       	in	r24, 0x24	; 36
 202:	82 60       	ori	r24, 0x02	; 2
 204:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 206:	89 ef       	ldi	r24, 0xF9	; 249
 208:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 210:	ee e6       	ldi	r30, 0x6E	; 110
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <init_devices>:
}

void init_devices(){
	
	cli();
 21c:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 222:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 224:	0e 94 00 01 	call	0x200	; 0x200 <init_timer>
	
	sei();
 228:	78 94       	sei
 22a:	08 95       	ret

0000022c <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
	
	cli();
 23c:	f8 94       	cli
	
	contor++;
 23e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <contor>
 242:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <contor+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <contor+0x1>
 24c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <contor>
	
	if(contor >= 1000){
 250:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <contor>
 254:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <contor+0x1>
 258:	88 3e       	cpi	r24, 0xE8	; 232
 25a:	93 40       	sbci	r25, 0x03	; 3
 25c:	80 f0       	brcs	.+32     	; 0x27e <__vector_14+0x52>
		secunde++;
 25e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <secunde>
 262:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <secunde+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <secunde+0x1>
 26c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <secunde>
		contor = 0;
 270:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <contor+0x1>
 274:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <contor>
		flag_timer = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <flag_timer>
	}
	
	sei();
 27e:	78 94       	sei
}
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde > 59)	//in ISR aveam 01:59 in loc de 01:00
 290:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <secunde>
 294:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <secunde+0x1>
 298:	cc 97       	sbiw	r24, 0x3c	; 60
 29a:	38 f1       	brcs	.+78     	; 0x2ea <incrementare_minute+0x5a>
	{
		secunde %= 60;
 29c:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <secunde>
 2a0:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <secunde+0x1>
 2a4:	9a 01       	movw	r18, r20
 2a6:	a9 e8       	ldi	r26, 0x89	; 137
 2a8:	b8 e8       	ldi	r27, 0x88	; 136
 2aa:	0e 94 c1 01 	call	0x382	; 0x382 <__umulhisi3>
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	92 95       	swap	r25
 2b4:	82 95       	swap	r24
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	89 27       	eor	r24, r25
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	89 27       	eor	r24, r25
 2be:	6c e3       	ldi	r22, 0x3C	; 60
 2c0:	68 9f       	mul	r22, r24
 2c2:	90 01       	movw	r18, r0
 2c4:	69 9f       	mul	r22, r25
 2c6:	30 0d       	add	r19, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	ca 01       	movw	r24, r20
 2cc:	82 1b       	sub	r24, r18
 2ce:	93 0b       	sbc	r25, r19
 2d0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <secunde+0x1>
 2d4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <secunde>
		minute++;
 2d8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <minute>
 2dc:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <minute+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <minute+0x1>
 2e6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <minute>
 2ea:	08 95       	ret

000002ec <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 2ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 2f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 2f4:	e1 ec       	ldi	r30, 0xC1	; 193
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	88 61       	ori	r24, 0x18	; 24
 2fc:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//|(1 << TXCIE0);	
 2fe:	80 81       	ld	r24, Z
 300:	80 6a       	ori	r24, 0xA0	; 160
 302:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 304:	e2 ec       	ldi	r30, 0xC2	; 194
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	8e 60       	ori	r24, 0x0E	; 14
 30c:	80 83       	st	Z, r24
	
	sei();
 30e:	78 94       	sei
 310:	08 95       	ret

00000312 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24

	flag_tx = 1;	
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <flag_tx>
}
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <send_data>:

void send_data(char *c){
 330:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 332:	09 c0       	rjmp	.+18     	; 0x346 <send_data+0x16>
	{
		if(flag_tx == 1)
 334:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <flag_tx>
 338:	21 30       	cpi	r18, 0x01	; 1
 33a:	29 f4       	brne	.+10     	; 0x346 <send_data+0x16>
		{
			UDR0 = *c;
 33c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 340:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 342:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 346:	90 81       	ld	r25, Z
 348:	91 11       	cpse	r25, r1
 34a:	f4 cf       	rjmp	.-24     	; 0x334 <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 34c:	08 95       	ret

0000034e <__vector_18>:

ISR(USART_RX_vect){
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24
	
	flag_rx = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <flag_rx>
}
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <receive_data>:

void receive_data(){
	
	char c;
	 
	if(flag_rx == 1)
 36c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <flag_rx>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	31 f4       	brne	.+12     	; 0x380 <receive_data+0x14>
	{	
		
		c = UDR0;
 374:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		//UDR0 = c; //echo, afisez ce trimit (tastez)
		//c++;  
			
		switch_data(c);	
 378:	0e 94 69 00 	call	0xd2	; 0xd2 <switch_data>
		flag_rx = 0;
 37c:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <flag_rx>
 380:	08 95       	ret

00000382 <__umulhisi3>:
 382:	a2 9f       	mul	r26, r18
 384:	b0 01       	movw	r22, r0
 386:	b3 9f       	mul	r27, r19
 388:	c0 01       	movw	r24, r0
 38a:	a3 9f       	mul	r26, r19
 38c:	70 0d       	add	r23, r0
 38e:	81 1d       	adc	r24, r1
 390:	11 24       	eor	r1, r1
 392:	91 1d       	adc	r25, r1
 394:	b2 9f       	mul	r27, r18
 396:	70 0d       	add	r23, r0
 398:	81 1d       	adc	r24, r1
 39a:	11 24       	eor	r1, r1
 39c:	91 1d       	adc	r25, r1
 39e:	08 95       	ret

000003a0 <__itoa_ncheck>:
 3a0:	bb 27       	eor	r27, r27
 3a2:	4a 30       	cpi	r20, 0x0A	; 10
 3a4:	31 f4       	brne	.+12     	; 0x3b2 <__itoa_ncheck+0x12>
 3a6:	99 23       	and	r25, r25
 3a8:	22 f4       	brpl	.+8      	; 0x3b2 <__itoa_ncheck+0x12>
 3aa:	bd e2       	ldi	r27, 0x2D	; 45
 3ac:	90 95       	com	r25
 3ae:	81 95       	neg	r24
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__utoa_common>

000003b6 <__utoa_ncheck>:
 3b6:	bb 27       	eor	r27, r27

000003b8 <__utoa_common>:
 3b8:	fb 01       	movw	r30, r22
 3ba:	55 27       	eor	r21, r21
 3bc:	aa 27       	eor	r26, r26
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	aa 1f       	adc	r26, r26
 3c4:	a4 17       	cp	r26, r20
 3c6:	10 f0       	brcs	.+4      	; 0x3cc <__utoa_common+0x14>
 3c8:	a4 1b       	sub	r26, r20
 3ca:	83 95       	inc	r24
 3cc:	50 51       	subi	r21, 0x10	; 16
 3ce:	b9 f7       	brne	.-18     	; 0x3be <__utoa_common+0x6>
 3d0:	a0 5d       	subi	r26, 0xD0	; 208
 3d2:	aa 33       	cpi	r26, 0x3A	; 58
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <__utoa_common+0x20>
 3d6:	a9 5d       	subi	r26, 0xD9	; 217
 3d8:	a1 93       	st	Z+, r26
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	79 f7       	brne	.-34     	; 0x3bc <__utoa_common+0x4>
 3de:	b1 11       	cpse	r27, r1
 3e0:	b1 93       	st	Z+, r27
 3e2:	11 92       	st	Z+, r1
 3e4:	cb 01       	movw	r24, r22
 3e6:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <strrev>

000003ea <strrev>:
 3ea:	dc 01       	movw	r26, r24
 3ec:	fc 01       	movw	r30, r24
 3ee:	67 2f       	mov	r22, r23
 3f0:	71 91       	ld	r23, Z+
 3f2:	77 23       	and	r23, r23
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <strrev+0x4>
 3f6:	32 97       	sbiw	r30, 0x02	; 2
 3f8:	04 c0       	rjmp	.+8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fa:	7c 91       	ld	r23, X
 3fc:	6d 93       	st	X+, r22
 3fe:	70 83       	st	Z, r23
 400:	62 91       	ld	r22, -Z
 402:	ae 17       	cp	r26, r30
 404:	bf 07       	cpc	r27, r31
 406:	c8 f3       	brcs	.-14     	; 0x3fa <strrev+0x10>
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
