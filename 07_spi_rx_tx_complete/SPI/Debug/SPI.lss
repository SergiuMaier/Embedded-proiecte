
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800172  00800172  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104e  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bf  00000000  00000000  00002085  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00002d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_18>
  4c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e7       	ldi	r26, 0x72	; 114
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:

#include "functii_afisare.h"

void new_line(){
	
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Meniu\n\r 2. Timp\n\r 5. LED ON/OFF\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
  b8:	08 95       	ret

000000ba <aprinde_led>:
	}
}

void aprinde_led(){
	
	if(stare_led == 1){
  ba:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <stare_led>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	51 f4       	brne	.+20     	; 0xd6 <aprinde_led+0x1c>
		send_data("\n\rLED ON\n\r");
  c2:	8b e3       	ldi	r24, 0x3B	; 59
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		PORTB |= (1 << PINB0) ;
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 b9       	out	0x05, r24	; 5
		new_line();
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  d4:	08 95       	ret
	}
	else{
		send_data("\n\rLED OFF\n\r");
  d6:	86 e4       	ldi	r24, 0x46	; 70
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		PORTB &= ~(1 << PINB0);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	85 b9       	out	0x05, r24	; 5
		new_line();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  e8:	08 95       	ret

000000ea <switch_data>:
	send_data("\n\rApasa tasta:\n\r 1. Meniu\n\r 2. Timp\n\r 5. LED ON/OFF\n\r");
}

void switch_data(char c){
	
	switch(c)
  ea:	82 33       	cpi	r24, 0x32	; 50
  ec:	79 f0       	breq	.+30     	; 0x10c <switch_data+0x22>
  ee:	85 33       	cpi	r24, 0x35	; 53
  f0:	99 f0       	breq	.+38     	; 0x118 <switch_data+0x2e>
  f2:	81 33       	cpi	r24, 0x31	; 49
  f4:	d9 f4       	brne	.+54     	; 0x12c <switch_data+0x42>
	{
	case '1':
	
		send_data(CLEAR);
  f6:	82 e5       	ldi	r24, 0x52	; 82
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		//send_data("\n\r Ascuns\n\r");
		afisare_meniu();
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_afisare_timp = 0;
 106:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
		break;
 10a:	08 95       	ret
	
	case '2': 
		
		new_line();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	    flag_afisare_timp = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
		break;
 116:	08 95       	ret
			
	case '5': 
		
		stare_led = !stare_led;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <stare_led>
 11e:	91 11       	cpse	r25, r1
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <stare_led>
		aprinde_led();
 126:	0e 94 5d 00 	call	0xba	; 0xba <aprinde_led>
		break;
 12a:	08 95       	ret
		
	default: 
		
		send_data("\n\rINCORECT!\n\r");
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		afisare_meniu();
 134:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 13c:	08 95       	ret

0000013e <afisare_program>:
	}
}

void afisare_program(){
	
	incrementare_minute();
 13e:	0e 94 57 01 	call	0x2ae	; 0x2ae <incrementare_minute>
	
	if((flag_timer == 1) && (flag_afisare_timp == 1))
 142:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <flag_timer>
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <afisare_program+0xe>
 14a:	55 c0       	rjmp	.+170    	; 0x1f6 <afisare_program+0xb8>
 14c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	09 f0       	breq	.+2      	; 0x156 <afisare_program+0x18>
 154:	50 c0       	rjmp	.+160    	; 0x1f6 <afisare_program+0xb8>
	{
		send_data(CLEAR);
 156:	82 e5       	ldi	r24, 0x52	; 82
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		send_data("\n\r Timp: ");
 15e:	83 e6       	ldi	r24, 0x63	; 99
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		
		itoa(secunde, ch_sec, 10);
 166:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <secunde>
 16a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 16e:	4a e0       	ldi	r20, 0x0A	; 10
 170:	65 e8       	ldi	r22, 0x85	; 133
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 178:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <minute>
 17c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <minute+0x1>
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	6b e7       	ldi	r22, 0x7B	; 123
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__itoa_ncheck>
		
		//format 00:00
		
		if(minute < 10)
 18a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <minute>
 18e:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <minute+0x1>
 192:	0a 97       	sbiw	r24, 0x0a	; 10
 194:	48 f4       	brcc	.+18     	; 0x1a8 <afisare_program+0x6a>
		{
			send_data("0");
 196:	8e e6       	ldi	r24, 0x6E	; 110
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
			send_data(ch_min);
 19e:	8b e7       	ldi	r24, 0x7B	; 123
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <afisare_program+0x72>
		}
		else
		send_data(ch_min);
 1a8:	8b e7       	ldi	r24, 0x7B	; 123
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		
		if((secunde >= 0) && (secunde < 10)) //interval pt rezolvare bug 00:059
 1b0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <secunde>
 1b4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <secunde+0x1>
 1b8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <secunde>
 1bc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <secunde+0x1>
 1c0:	0a 97       	sbiw	r24, 0x0a	; 10
 1c2:	48 f4       	brcc	.+18     	; 0x1d6 <afisare_program+0x98>
		{
			send_data(":0");
 1c4:	8d e6       	ldi	r24, 0x6D	; 109
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
			send_data(ch_sec);
 1cc:	85 e8       	ldi	r24, 0x85	; 133
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <afisare_program+0xa8>
		}
		else
		{
			send_data(":");
 1d6:	80 e7       	ldi	r24, 0x70	; 112
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
			send_data(ch_sec);
 1de:	85 e8       	ldi	r24, 0x85	; 133
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		}
		
		send_data("\n\r");
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
		new_line();
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		flag_timer = 0;
 1f2:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <flag_timer>
 1f6:	08 95       	ret

000001f8 <main>:
#include "timer.h"
#include "functii_afisare.h"

int main(void)
{	
	init_devices();	
 1f8:	0e 94 1d 01 	call	0x23a	; 0x23a <init_devices>
	init_USART(MYUBRR);
 1fc:	87 e6       	ldi	r24, 0x67	; 103
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 85 01 	call	0x30a	; 0x30a <init_USART>
	
	send_data(CLEAR);
 204:	82 e5       	ldi	r24, 0x52	; 82
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 a7 01 	call	0x34e	; 0x34e <send_data>
	afisare_meniu();
 20c:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		receive_data();
 214:	0e 94 c5 01 	call	0x38a	; 0x38a <receive_data>
		afisare_program();
 218:	0e 94 9f 00 	call	0x13e	; 0x13e <afisare_program>
 21c:	fb cf       	rjmp	.-10     	; 0x214 <main+0x1c>

0000021e <init_timer>:

#include "timer.h"

void init_timer(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 21e:	84 b5       	in	r24, 0x24	; 36
 220:	82 60       	ori	r24, 0x02	; 2
 222:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
 224:	89 ef       	ldi	r24, 0xF9	; 249
 226:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	83 60       	ori	r24, 0x03	; 3
 22c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 22e:	ee e6       	ldi	r30, 0x6E	; 110
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <init_devices>:
}

void init_devices(){
	
	cli();
 23a:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x01;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 240:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 242:	0e 94 0f 01 	call	0x21e	; 0x21e <init_timer>
	
	sei();
 246:	78 94       	sei
 248:	08 95       	ret

0000024a <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 24a:	1f 92       	push	r1
 24c:	0f 92       	push	r0
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	2f 93       	push	r18
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
	
	cli();
 25a:	f8 94       	cli
	
	contor++;
 25c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <contor>
 260:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <contor+0x1>
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <contor+0x1>
 26a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <contor>
	
	if(contor >= 1000){
 26e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <contor>
 272:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <contor+0x1>
 276:	88 3e       	cpi	r24, 0xE8	; 232
 278:	93 40       	sbci	r25, 0x03	; 3
 27a:	80 f0       	brcs	.+32     	; 0x29c <__vector_14+0x52>
		secunde++;
 27c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <secunde>
 280:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <secunde+0x1>
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <secunde+0x1>
 28a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <secunde>
		contor = 0;
 28e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <contor+0x1>
 292:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <contor>
		flag_timer = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <flag_timer>
	}
	
	sei();
 29c:	78 94       	sei
}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde > 59)	//in ISR aveam 01:59 in loc de 01:00
 2ae:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <secunde>
 2b2:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <secunde+0x1>
 2b6:	cc 97       	sbiw	r24, 0x3c	; 60
 2b8:	38 f1       	brcs	.+78     	; 0x308 <incrementare_minute+0x5a>
	{
		secunde %= 60;
 2ba:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <secunde>
 2be:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <secunde+0x1>
 2c2:	9a 01       	movw	r18, r20
 2c4:	a9 e8       	ldi	r26, 0x89	; 137
 2c6:	b8 e8       	ldi	r27, 0x88	; 136
 2c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__umulhisi3>
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	92 95       	swap	r25
 2d2:	82 95       	swap	r24
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	89 27       	eor	r24, r25
 2d8:	9f 70       	andi	r25, 0x0F	; 15
 2da:	89 27       	eor	r24, r25
 2dc:	6c e3       	ldi	r22, 0x3C	; 60
 2de:	68 9f       	mul	r22, r24
 2e0:	90 01       	movw	r18, r0
 2e2:	69 9f       	mul	r22, r25
 2e4:	30 0d       	add	r19, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	ca 01       	movw	r24, r20
 2ea:	82 1b       	sub	r24, r18
 2ec:	93 0b       	sbc	r25, r19
 2ee:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <secunde+0x1>
 2f2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <secunde>
		minute++;
 2f6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <minute>
 2fa:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <minute+0x1>
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <minute+0x1>
 304:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <minute>
 308:	08 95       	ret

0000030a <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 30a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 30e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 312:	e1 ec       	ldi	r30, 0xC1	; 193
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	88 61       	ori	r24, 0x18	; 24
 31a:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0);	
 31c:	80 81       	ld	r24, Z
 31e:	80 6a       	ori	r24, 0xA0	; 160
 320:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 322:	e2 ec       	ldi	r30, 0xC2	; 194
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	8e 60       	ori	r24, 0x0E	; 14
 32a:	80 83       	st	Z, r24
	
	sei();
 32c:	78 94       	sei
 32e:	08 95       	ret

00000330 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24

	flag_tx = 1;	
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <flag_tx>
}
 342:	8f 91       	pop	r24
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <send_data>:

void send_data(char *c){
 34e:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 350:	09 c0       	rjmp	.+18     	; 0x364 <send_data+0x16>
	{
		if(flag_tx == 1)
 352:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <flag_tx>
 356:	21 30       	cpi	r18, 0x01	; 1
 358:	29 f4       	brne	.+10     	; 0x364 <send_data+0x16>
		{
			UDR0 = *c;
 35a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 35e:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 360:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 364:	90 81       	ld	r25, Z
 366:	91 11       	cpse	r25, r1
 368:	f4 cf       	rjmp	.-24     	; 0x352 <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 36a:	08 95       	ret

0000036c <__vector_18>:

ISR(USART_RX_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	8f 93       	push	r24
	
	flag_rx = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <flag_rx>
}
 37e:	8f 91       	pop	r24
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <receive_data>:

void receive_data(){
	
	char c;

	if(flag_rx == 1)
 38a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <flag_rx>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	41 f4       	brne	.+16     	; 0x3a2 <receive_data+0x18>
	{	
		c = UDR0;
 392:	e6 ec       	ldi	r30, 0xC6	; 198
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
		UDR0 = c; //echo, afisez ce trimit (tastez)
 398:	80 83       	st	Z, r24
		
		switch_data(c);
 39a:	0e 94 75 00 	call	0xea	; 0xea <switch_data>
		
		flag_rx = 0;
 39e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <flag_rx>
 3a2:	08 95       	ret

000003a4 <__umulhisi3>:
 3a4:	a2 9f       	mul	r26, r18
 3a6:	b0 01       	movw	r22, r0
 3a8:	b3 9f       	mul	r27, r19
 3aa:	c0 01       	movw	r24, r0
 3ac:	a3 9f       	mul	r26, r19
 3ae:	70 0d       	add	r23, r0
 3b0:	81 1d       	adc	r24, r1
 3b2:	11 24       	eor	r1, r1
 3b4:	91 1d       	adc	r25, r1
 3b6:	b2 9f       	mul	r27, r18
 3b8:	70 0d       	add	r23, r0
 3ba:	81 1d       	adc	r24, r1
 3bc:	11 24       	eor	r1, r1
 3be:	91 1d       	adc	r25, r1
 3c0:	08 95       	ret

000003c2 <__itoa_ncheck>:
 3c2:	bb 27       	eor	r27, r27
 3c4:	4a 30       	cpi	r20, 0x0A	; 10
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <__itoa_ncheck+0x12>
 3c8:	99 23       	and	r25, r25
 3ca:	22 f4       	brpl	.+8      	; 0x3d4 <__itoa_ncheck+0x12>
 3cc:	bd e2       	ldi	r27, 0x2D	; 45
 3ce:	90 95       	com	r25
 3d0:	81 95       	neg	r24
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__utoa_common>

000003d8 <__utoa_ncheck>:
 3d8:	bb 27       	eor	r27, r27

000003da <__utoa_common>:
 3da:	fb 01       	movw	r30, r22
 3dc:	55 27       	eor	r21, r21
 3de:	aa 27       	eor	r26, r26
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	aa 1f       	adc	r26, r26
 3e6:	a4 17       	cp	r26, r20
 3e8:	10 f0       	brcs	.+4      	; 0x3ee <__utoa_common+0x14>
 3ea:	a4 1b       	sub	r26, r20
 3ec:	83 95       	inc	r24
 3ee:	50 51       	subi	r21, 0x10	; 16
 3f0:	b9 f7       	brne	.-18     	; 0x3e0 <__utoa_common+0x6>
 3f2:	a0 5d       	subi	r26, 0xD0	; 208
 3f4:	aa 33       	cpi	r26, 0x3A	; 58
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <__utoa_common+0x20>
 3f8:	a9 5d       	subi	r26, 0xD9	; 217
 3fa:	a1 93       	st	Z+, r26
 3fc:	00 97       	sbiw	r24, 0x00	; 0
 3fe:	79 f7       	brne	.-34     	; 0x3de <__utoa_common+0x4>
 400:	b1 11       	cpse	r27, r1
 402:	b1 93       	st	Z+, r27
 404:	11 92       	st	Z+, r1
 406:	cb 01       	movw	r24, r22
 408:	0c 94 06 02 	jmp	0x40c	; 0x40c <strrev>

0000040c <strrev>:
 40c:	dc 01       	movw	r26, r24
 40e:	fc 01       	movw	r30, r24
 410:	67 2f       	mov	r22, r23
 412:	71 91       	ld	r23, Z+
 414:	77 23       	and	r23, r23
 416:	e1 f7       	brne	.-8      	; 0x410 <strrev+0x4>
 418:	32 97       	sbiw	r30, 0x02	; 2
 41a:	04 c0       	rjmp	.+8      	; 0x424 <strrev+0x18>
 41c:	7c 91       	ld	r23, X
 41e:	6d 93       	st	X+, r22
 420:	70 83       	st	Z, r23
 422:	62 91       	ld	r22, -Z
 424:	ae 17       	cp	r26, r30
 426:	bf 07       	cpc	r27, r31
 428:	c8 f3       	brcs	.-14     	; 0x41c <strrev+0x10>
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
