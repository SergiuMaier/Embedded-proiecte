
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  008001b4  008001b4  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f78  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000623  00000000  00000000  00002006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  0000262c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00002c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_18>
  4c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3b       	cpi	r26, 0xB4	; 180
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 eb       	ldi	r26, 0xB4	; 180
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <afisare_meniu>:

#include "functii_afisare.h"

void afisare_meniu(){
	
	send_data("\n\rApasa tasta:\n\r 1. Afisare timp\n\r 2. Ascundere timp\n\r 5. LED ON/OFF\n\r");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
  ae:	08 95       	ret

000000b0 <main>:
extern uint8_t stare_led;
	
int main(void)
{	
	//pt debug:	
	DDRB = 0x01;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  b4:	15 b8       	out	0x05, r1	; 5
	
	init_devices();	
  b6:	0e 94 80 00 	call	0x100	; 0x100 <init_devices>
	init_USART(MYUBRR);
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 41 01 	call	0x282	; 0x282 <init_USART>
	
	send_data(CLEAR);
  c2:	87 e4       	ldi	r24, 0x47	; 71
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
	afisare_meniu();
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <afisare_meniu>
	new_line();
  ce:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
	
	while(1) 
    {
		receive_data();
  d2:	0e 94 c7 01 	call	0x38e	; 0x38e <receive_data>
		 	
		if(flag_afisare_timp == 1)
  d6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <flag_afisare_timp>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	d1 f7       	brne	.-12     	; 0xd2 <main+0x22>
			afisare_timp();
  de:	0e 94 e5 00 	call	0x1ca	; 0x1ca <afisare_timp>
  e2:	f7 cf       	rjmp	.-18     	; 0xd2 <main+0x22>

000000e4 <init_timer>:

#include "timer.h"

void init_timer(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  ea:	89 ef       	ldi	r24, 0xF9	; 249
  ec:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  ee:	85 b5       	in	r24, 0x25	; 37
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  f4:	ee e6       	ldi	r30, 0x6E	; 110
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <init_devices>:
}

void init_devices(){
	
	cli();
 100:	f8 94       	cli
	
	init_timer();
 102:	0e 94 72 00 	call	0xe4	; 0xe4 <init_timer>
	
	sei();
 106:	78 94       	sei
 108:	08 95       	ret

0000010a <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
	
	cli();
 11a:	f8 94       	cli
	
	contor++;
 11c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <contor>
 120:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <contor+0x1>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <contor+0x1>
 12a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <contor>
	
	if(contor >= 1000){
 12e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <contor>
 132:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <contor+0x1>
 136:	88 3e       	cpi	r24, 0xE8	; 232
 138:	93 40       	sbci	r25, 0x03	; 3
 13a:	80 f0       	brcs	.+32     	; 0x15c <__vector_14+0x52>
		secunde++;
 13c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <secunde>
 140:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <secunde+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <secunde+0x1>
 14a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <secunde>
		contor = 0;
 14e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <contor+0x1>
 152:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <contor>
		flag_timer = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <flag_timer>
	}
	
	sei();
 15c:	78 94       	sei
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde >= 60)	//in ISR aveam 01:59 in loc de 01:00
 16e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <secunde>
 172:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <secunde+0x1>
 176:	cc 97       	sbiw	r24, 0x3c	; 60
 178:	38 f1       	brcs	.+78     	; 0x1c8 <incrementare_minute+0x5a>
	{
		secunde %= 60;
 17a:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <secunde>
 17e:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <secunde+0x1>
 182:	9a 01       	movw	r18, r20
 184:	a9 e8       	ldi	r26, 0x89	; 137
 186:	b8 e8       	ldi	r27, 0x88	; 136
 188:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__umulhisi3>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	92 95       	swap	r25
 192:	82 95       	swap	r24
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	89 27       	eor	r24, r25
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	89 27       	eor	r24, r25
 19c:	6c e3       	ldi	r22, 0x3C	; 60
 19e:	68 9f       	mul	r22, r24
 1a0:	90 01       	movw	r18, r0
 1a2:	69 9f       	mul	r22, r25
 1a4:	30 0d       	add	r19, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	ca 01       	movw	r24, r20
 1aa:	82 1b       	sub	r24, r18
 1ac:	93 0b       	sbc	r25, r19
 1ae:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <secunde+0x1>
 1b2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <secunde>
		minute++;
 1b6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <minute>
 1ba:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <minute+0x1>
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <minute+0x1>
 1c4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <minute>
 1c8:	08 95       	ret

000001ca <afisare_timp>:
	}
}

void afisare_timp(){
	
	incrementare_minute();	
 1ca:	0e 94 b7 00 	call	0x16e	; 0x16e <incrementare_minute>
	
	if(flag_timer == 1)
 1ce:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <flag_timer>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <afisare_timp+0xe>
 1d6:	54 c0       	rjmp	.+168    	; 0x280 <afisare_timp+0xb6>
	{	
		send_data(CLEAR);
 1d8:	87 e4       	ldi	r24, 0x47	; 71
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		send_data("\n\r |-------------|-------------|\n\r");
 1e0:	8b e5       	ldi	r24, 0x5B	; 91
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		send_data(" | Timp: ");
 1e8:	8a e4       	ldi	r24, 0x4A	; 74
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		
		itoa(secunde, ch_sec, 10);
 1f0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <secunde>
 1f4:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1f8:	4a e0       	ldi	r20, 0x0A	; 10
 1fa:	6a ec       	ldi	r22, 0xCA	; 202
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 202:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <minute>
 206:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <minute+0x1>
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	60 ec       	ldi	r22, 0xC0	; 192
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__itoa_ncheck>
		
		//format 00:00
			
		if(minute < 10)
 214:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <minute>
 218:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <minute+0x1>
 21c:	0a 97       	sbiw	r24, 0x0a	; 10
 21e:	48 f4       	brcc	.+18     	; 0x232 <afisare_timp+0x68>
		{
			send_data("0");
 220:	85 e5       	ldi	r24, 0x55	; 85
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
			send_data(ch_min);
 228:	80 ec       	ldi	r24, 0xC0	; 192
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
 230:	04 c0       	rjmp	.+8      	; 0x23a <afisare_timp+0x70>
		}
		else
			send_data(ch_min);
 232:	80 ec       	ldi	r24, 0xC0	; 192
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		
		if((secunde >= 0) && (secunde < 10)) //interval pt rezolvare bug 00:059
 23a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <secunde>
 23e:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <secunde+0x1>
 242:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <secunde>
 246:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <secunde+0x1>
 24a:	0a 97       	sbiw	r24, 0x0a	; 10
 24c:	48 f4       	brcc	.+18     	; 0x260 <afisare_timp+0x96>
		{
			send_data(":0");
 24e:	84 e5       	ldi	r24, 0x54	; 84
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
			send_data(ch_sec);
 256:	8a ec       	ldi	r24, 0xCA	; 202
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
 25e:	08 c0       	rjmp	.+16     	; 0x270 <afisare_timp+0xa6>
		}
		else
		{
			send_data(":");
 260:	87 e5       	ldi	r24, 0x57	; 87
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
			send_data(ch_sec);
 268:	8a ec       	ldi	r24, 0xCA	; 202
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		}
		
		send_data(" |\n\r |-------------|-------------|\n\r");
 270:	89 e5       	ldi	r24, 0x59	; 89
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		new_line();
 278:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
		
		flag_timer = 0;
 27c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <flag_timer>
 280:	08 95       	ret

00000282 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 282:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 286:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 61       	ori	r24, 0x18	; 24
 292:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0);	
 294:	80 81       	ld	r24, Z
 296:	80 6a       	ori	r24, 0xA0	; 160
 298:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 29a:	e2 ec       	ldi	r30, 0xC2	; 194
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8e 60       	ori	r24, 0x0E	; 14
 2a2:	80 83       	st	Z, r24
	
	sei();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24

	flag_tx = 1;	
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <flag_tx>
}
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <send_data>:

void send_data(char *c){
 2c6:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2c8:	09 c0       	rjmp	.+18     	; 0x2dc <send_data+0x16>
	{
		if(flag_tx == 1)
 2ca:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <flag_tx>
 2ce:	21 30       	cpi	r18, 0x01	; 1
 2d0:	29 f4       	brne	.+10     	; 0x2dc <send_data+0x16>
		{
			UDR0 = *c;
 2d2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2d6:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 2d8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 2dc:	90 81       	ld	r25, Z
 2de:	91 11       	cpse	r25, r1
 2e0:	f4 cf       	rjmp	.-24     	; 0x2ca <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 2e2:	08 95       	ret

000002e4 <__vector_18>:

ISR(USART_RX_vect){
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
	
	flag_rx = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <__data_end>
}
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <new_line>:
	}
}

void new_line(){ //apelata in fiecare functie afisata
	
	send_data("\n\r>>");
 302:	8e e7       	ldi	r24, 0x7E	; 126
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
 30a:	08 95       	ret

0000030c <switch_data>:
	}		
}

void switch_data(char c){
	
	switch(c)
 30c:	82 33       	cpi	r24, 0x32	; 50
 30e:	51 f0       	breq	.+20     	; 0x324 <switch_data+0x18>
 310:	85 33       	cpi	r24, 0x35	; 53
 312:	b9 f0       	breq	.+46     	; 0x342 <switch_data+0x36>
 314:	81 33       	cpi	r24, 0x31	; 49
 316:	91 f5       	brne	.+100    	; 0x37c <switch_data+0x70>
	{
		case '1': new_line();
 318:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
		          flag_afisare_timp = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <flag_afisare_timp>
		          break;
 322:	08 95       	ret
		
		case '2': send_data(CLEAR);
 324:	87 e4       	ldi	r24, 0x47	; 71
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
		          send_data("\n\r Ascuns\n\r");
 32c:	83 e8       	ldi	r24, 0x83	; 131
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
				  afisare_meniu();
 334:	0e 94 53 00 	call	0xa6	; 0xa6 <afisare_meniu>
		          new_line();
 338:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
		          flag_afisare_timp = 0;
 33c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <flag_afisare_timp>
		          break;
 340:	08 95       	ret
		
		case '5': //new_line();
		          stare_led = !stare_led;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <stare_led>
 348:	91 11       	cpse	r25, r1
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <stare_led>
				  
				  if(stare_led == 1)
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	51 f4       	brne	.+20     	; 0x368 <switch_data+0x5c>
				  {
					  send_data("\n\rLED ON\n\r");
 354:	8f e8       	ldi	r24, 0x8F	; 143
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
					  PORTB |= (1 << PINB0) ;
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	85 b9       	out	0x05, r24	; 5
					  new_line();
 362:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
 366:	08 95       	ret
				  }
				  else
				  {
					  send_data("\n\rLED OFF\n\r");
 368:	8a e9       	ldi	r24, 0x9A	; 154
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
					  PORTB &= ~(1 << PINB0);
 370:	85 b1       	in	r24, 0x05	; 5
 372:	8e 7f       	andi	r24, 0xFE	; 254
 374:	85 b9       	out	0x05, r24	; 5
					  new_line();
 376:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
 37a:	08 95       	ret
				  }
				  
		          break;
		
		default: send_data("\n\rINCORECT!\n\r");
 37c:	86 ea       	ldi	r24, 0xA6	; 166
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 63 01 	call	0x2c6	; 0x2c6 <send_data>
	             afisare_meniu();
 384:	0e 94 53 00 	call	0xa6	; 0xa6 <afisare_meniu>
		         new_line();
 388:	0e 94 81 01 	call	0x302	; 0x302 <new_line>
 38c:	08 95       	ret

0000038e <receive_data>:

void receive_data(){
	
	char c;

	if(flag_rx == 1)
 38e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <__data_end>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	41 f4       	brne	.+16     	; 0x3a6 <receive_data+0x18>
	{	
		c = UDR0;
 396:	e6 ec       	ldi	r30, 0xC6	; 198
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
		UDR0 = c; //echo, afisez ce tastez
 39c:	80 83       	st	Z, r24
		
		switch_data(c);
 39e:	0e 94 86 01 	call	0x30c	; 0x30c <switch_data>
		
		flag_rx = 0;
 3a2:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__data_end>
 3a6:	08 95       	ret

000003a8 <__umulhisi3>:
 3a8:	a2 9f       	mul	r26, r18
 3aa:	b0 01       	movw	r22, r0
 3ac:	b3 9f       	mul	r27, r19
 3ae:	c0 01       	movw	r24, r0
 3b0:	a3 9f       	mul	r26, r19
 3b2:	70 0d       	add	r23, r0
 3b4:	81 1d       	adc	r24, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	91 1d       	adc	r25, r1
 3ba:	b2 9f       	mul	r27, r18
 3bc:	70 0d       	add	r23, r0
 3be:	81 1d       	adc	r24, r1
 3c0:	11 24       	eor	r1, r1
 3c2:	91 1d       	adc	r25, r1
 3c4:	08 95       	ret

000003c6 <__itoa_ncheck>:
 3c6:	bb 27       	eor	r27, r27
 3c8:	4a 30       	cpi	r20, 0x0A	; 10
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <__itoa_ncheck+0x12>
 3cc:	99 23       	and	r25, r25
 3ce:	22 f4       	brpl	.+8      	; 0x3d8 <__itoa_ncheck+0x12>
 3d0:	bd e2       	ldi	r27, 0x2D	; 45
 3d2:	90 95       	com	r25
 3d4:	81 95       	neg	r24
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__utoa_common>

000003dc <__utoa_ncheck>:
 3dc:	bb 27       	eor	r27, r27

000003de <__utoa_common>:
 3de:	fb 01       	movw	r30, r22
 3e0:	55 27       	eor	r21, r21
 3e2:	aa 27       	eor	r26, r26
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	a4 17       	cp	r26, r20
 3ec:	10 f0       	brcs	.+4      	; 0x3f2 <__utoa_common+0x14>
 3ee:	a4 1b       	sub	r26, r20
 3f0:	83 95       	inc	r24
 3f2:	50 51       	subi	r21, 0x10	; 16
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <__utoa_common+0x6>
 3f6:	a0 5d       	subi	r26, 0xD0	; 208
 3f8:	aa 33       	cpi	r26, 0x3A	; 58
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__utoa_common+0x20>
 3fc:	a9 5d       	subi	r26, 0xD9	; 217
 3fe:	a1 93       	st	Z+, r26
 400:	00 97       	sbiw	r24, 0x00	; 0
 402:	79 f7       	brne	.-34     	; 0x3e2 <__utoa_common+0x4>
 404:	b1 11       	cpse	r27, r1
 406:	b1 93       	st	Z+, r27
 408:	11 92       	st	Z+, r1
 40a:	cb 01       	movw	r24, r22
 40c:	0c 94 08 02 	jmp	0x410	; 0x410 <strrev>

00000410 <strrev>:
 410:	dc 01       	movw	r26, r24
 412:	fc 01       	movw	r30, r24
 414:	67 2f       	mov	r22, r23
 416:	71 91       	ld	r23, Z+
 418:	77 23       	and	r23, r23
 41a:	e1 f7       	brne	.-8      	; 0x414 <strrev+0x4>
 41c:	32 97       	sbiw	r30, 0x02	; 2
 41e:	04 c0       	rjmp	.+8      	; 0x428 <strrev+0x18>
 420:	7c 91       	ld	r23, X
 422:	6d 93       	st	X+, r22
 424:	70 83       	st	Z, r23
 426:	62 91       	ld	r22, -Z
 428:	ae 17       	cp	r26, r30
 42a:	bf 07       	cpc	r27, r31
 42c:	c8 f3       	brcs	.-14     	; 0x420 <strrev+0x10>
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
