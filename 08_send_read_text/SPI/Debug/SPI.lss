
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000004cc  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008001a6  008001a6  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001293  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6b  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071a  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000382  00000000  00000000  00003222  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3a       	cpi	r26, 0xA6	; 166
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ea       	ldi	r26, 0xA6	; 166
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  9e:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:

#include "functii_afisare.h"

void new_line()
{
	send_data("\n\r>>");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu()
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
  b8:	08 95       	ret

000000ba <schimbare_stare_led>:
		new_line();
	}
}

void schimbare_stare_led(volatile uint8_t *port, uint8_t pin, uint8_t stare)
{
  ba:	fc 01       	movw	r30, r24
	if(stare == 1)
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	89 f4       	brne	.+34     	; 0xe2 <schimbare_stare_led+0x28>
	{
		*port |= (1 << pin);
  c0:	20 81       	ld	r18, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <schimbare_stare_led+0x12>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <schimbare_stare_led+0xe>
  d0:	82 2b       	or	r24, r18
  d2:	80 83       	st	Z, r24
		send_data("ON\n\r");
  d4:	8b e4       	ldi	r24, 0x4B	; 75
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		new_line();
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  e0:	08 95       	ret
	}
	else
	{
		*port &= ~(1 << pin);
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <schimbare_stare_led+0x34>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <schimbare_stare_led+0x30>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
		send_data("OFF\n\r");
  f8:	80 e5       	ldi	r24, 0x50	; 80
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		new_line();
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 104:	08 95       	ret

00000106 <afisare_timp>:
	}
}

void afisare_timp()
{
	incrementare_minute();
 106:	0e 94 84 01 	call	0x308	; 0x308 <incrementare_minute>
		
	if(flag_timer == 1)
 10a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <afisare_timp+0xe>
 112:	4c c0       	rjmp	.+152    	; 0x1ac <afisare_timp+0xa6>
	{			
		send_data("Timp curent: ");
 114:	86 e5       	ldi	r24, 0x56	; 86
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		
		itoa(secunde,  ch_sec, 10); //conversie sec si min din int in char
 11c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 120:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	68 eb       	ldi	r22, 0xB8	; 184
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 12e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 132:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	6e ea       	ldi	r22, 0xAE	; 174
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	0e 94 2f 02 	call	0x45e	; 0x45e <__itoa_ncheck>
		
		//format 00:00
			
		if(minute < 10)
 140:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 144:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 148:	0a 97       	sbiw	r24, 0x0a	; 10
 14a:	48 f4       	brcc	.+18     	; 0x15e <afisare_timp+0x58>
		{
			send_data("0");
 14c:	85 e6       	ldi	r24, 0x65	; 101
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
			send_data(ch_min);
 154:	8e ea       	ldi	r24, 0xAE	; 174
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
 15c:	04 c0       	rjmp	.+8      	; 0x166 <afisare_timp+0x60>
		}
		else
			send_data(ch_min);
 15e:	8e ea       	ldi	r24, 0xAE	; 174
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		
		if((secunde >= 0) && (secunde < 10))
 166:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 16a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 16e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 172:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 176:	0a 97       	sbiw	r24, 0x0a	; 10
 178:	48 f4       	brcc	.+18     	; 0x18c <afisare_timp+0x86>
		{
			send_data(":0");
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
			send_data(ch_sec);
 182:	88 eb       	ldi	r24, 0xB8	; 184
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
 18a:	08 c0       	rjmp	.+16     	; 0x19c <afisare_timp+0x96>
		}
		else
		{
			send_data(":");
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
			send_data(ch_sec);
 194:	88 eb       	ldi	r24, 0xB8	; 184
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		}
		
		send_data("\n\r");
 19c:	82 ea       	ldi	r24, 0xA2	; 162
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		new_line();
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		
		flag_timer = 0;
 1a8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
 1ac:	08 95       	ret

000001ae <switch_data>:
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
}

void switch_data(char data[])
{	
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
	if(strcmp(data, "meniu") == 0)
 1b4:	69 e6       	ldi	r22, 0x69	; 105
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	0e 94 26 02 	call	0x44c	; 0x44c <strcmp>
 1bc:	89 2b       	or	r24, r25
 1be:	29 f4       	brne	.+10     	; 0x1ca <switch_data+0x1c>
	{
		afisare_meniu();
 1c0:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 1c8:	43 c0       	rjmp	.+134    	; 0x250 <switch_data+0xa2>
	}		
	else if(strcmp(data, "timp") == 0)
 1ca:	6f e6       	ldi	r22, 0x6F	; 111
 1cc:	71 e0       	ldi	r23, 0x01	; 1
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 26 02 	call	0x44c	; 0x44c <strcmp>
 1d4:	89 2b       	or	r24, r25
 1d6:	19 f4       	brne	.+6      	; 0x1de <switch_data+0x30>
		afisare_timp();
 1d8:	0e 94 83 00 	call	0x106	; 0x106 <afisare_timp>
 1dc:	39 c0       	rjmp	.+114    	; 0x250 <switch_data+0xa2>
		
	else if(strcmp(data, "led on") == 0)
 1de:	64 e7       	ldi	r22, 0x74	; 116
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 26 02 	call	0x44c	; 0x44c <strcmp>
 1e8:	89 2b       	or	r24, r25
 1ea:	39 f4       	brne	.+14     	; 0x1fa <switch_data+0x4c>
		schimbare_stare_led(&PORTB, PINB0, 1);
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 5d 00 	call	0xba	; 0xba <schimbare_stare_led>
 1f8:	2b c0       	rjmp	.+86     	; 0x250 <switch_data+0xa2>
		
	else if(strcmp(data, "led off") == 0)
 1fa:	6b e7       	ldi	r22, 0x7B	; 123
 1fc:	71 e0       	ldi	r23, 0x01	; 1
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 26 02 	call	0x44c	; 0x44c <strcmp>
 204:	89 2b       	or	r24, r25
 206:	39 f4       	brne	.+14     	; 0x216 <switch_data+0x68>
		schimbare_stare_led(&PORTB, PINB0, 0);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5d 00 	call	0xba	; 0xba <schimbare_stare_led>
 214:	1d c0       	rjmp	.+58     	; 0x250 <switch_data+0xa2>
		
	else if(strcmp(data, "clear") == 0)
 216:	63 e8       	ldi	r22, 0x83	; 131
 218:	71 e0       	ldi	r23, 0x01	; 1
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 26 02 	call	0x44c	; 0x44c <strcmp>
 220:	89 2b       	or	r24, r25
 222:	39 f4       	brne	.+14     	; 0x232 <switch_data+0x84>
	{
		send_data(CLEAR);
 224:	89 e8       	ldi	r24, 0x89	; 137
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		new_line();
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 230:	0f c0       	rjmp	.+30     	; 0x250 <switch_data+0xa2>
	}
	else
	{
		send_data("'");
 232:	8c e8       	ldi	r24, 0x8C	; 140
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		send_data(data);
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		send_data("' nu este o comanda!\n\r");
 240:	8e e8       	ldi	r24, 0x8E	; 142
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
		afisare_meniu();
 248:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	}
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
 256:	0e 94 4a 01 	call	0x294	; 0x294 <init_devices>
	init_USART(MYUBRR);
 25a:	87 e6       	ldi	r24, 0x67	; 103
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 b2 01 	call	0x364	; 0x364 <init_USART>
	
	send_data(CLEAR); //clear putty
 262:	89 e8       	ldi	r24, 0x89	; 137
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <send_data>
	afisare_meniu();  //afisare lista comenzi
 26a:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();       //rand nou unde se poate introduce o comanda
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		start_program();   
 272:	0e 94 0a 02 	call	0x414	; 0x414 <start_program>
 276:	fd cf       	rjmp	.-6      	; 0x272 <main+0x1c>

00000278 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 278:	84 b5       	in	r24, 0x24	; 36
 27a:	82 60       	ori	r24, 0x02	; 2
 27c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 27e:	89 ef       	ldi	r24, 0xF9	; 249
 280:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 282:	85 b5       	in	r24, 0x25	; 37
 284:	83 60       	ori	r24, 0x03	; 3
 286:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 288:	ee e6       	ldi	r30, 0x6E	; 110
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <init_devices>:
}

void init_devices(){
	
	cli();
 294:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 29a:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 29c:	0e 94 3c 01 	call	0x278	; 0x278 <init_timer>
	
	sei();
 2a0:	78 94       	sei
 2a2:	08 95       	ret

000002a4 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	8f 93       	push	r24
 2b2:	9f 93       	push	r25
	
	cli();
 2b4:	f8 94       	cli
	
	contor++;
 2b6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <contor>
 2ba:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <contor+0x1>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <contor+0x1>
 2c4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <contor>
	
	if(contor >= 1000){
 2c8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <contor>
 2cc:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <contor+0x1>
 2d0:	88 3e       	cpi	r24, 0xE8	; 232
 2d2:	93 40       	sbci	r25, 0x03	; 3
 2d4:	80 f0       	brcs	.+32     	; 0x2f6 <__vector_14+0x52>
		secunde++;
 2d6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 2da:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <secunde+0x1>
 2e4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <secunde>
		contor = 0;
 2e8:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <contor+0x1>
 2ec:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <contor>
		flag_timer = 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
	}
	
	sei();
 2f6:	78 94       	sei
}
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde >= 60){	//in ISR aveam 01:59 in loc de 01:00
 308:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 30c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 310:	cc 97       	sbiw	r24, 0x3c	; 60
 312:	38 f1       	brcs	.+78     	; 0x362 <incrementare_minute+0x5a>
		secunde %= 60;
 314:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <secunde>
 318:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <secunde+0x1>
 31c:	9a 01       	movw	r18, r20
 31e:	a9 e8       	ldi	r26, 0x89	; 137
 320:	b8 e8       	ldi	r27, 0x88	; 136
 322:	0e 94 17 02 	call	0x42e	; 0x42e <__umulhisi3>
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	92 95       	swap	r25
 32c:	82 95       	swap	r24
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	89 27       	eor	r24, r25
 332:	9f 70       	andi	r25, 0x0F	; 15
 334:	89 27       	eor	r24, r25
 336:	6c e3       	ldi	r22, 0x3C	; 60
 338:	68 9f       	mul	r22, r24
 33a:	90 01       	movw	r18, r0
 33c:	69 9f       	mul	r22, r25
 33e:	30 0d       	add	r19, r0
 340:	11 24       	eor	r1, r1
 342:	ca 01       	movw	r24, r20
 344:	82 1b       	sub	r24, r18
 346:	93 0b       	sbc	r25, r19
 348:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <secunde+0x1>
 34c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <secunde>
		minute++;
 350:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 354:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <minute+0x1>
 35e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <minute>
 362:	08 95       	ret

00000364 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr)
{	
	UBRR0H = (unsigned char)(ubrr >> 8);
 364:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 368:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 36c:	e1 ec       	ldi	r30, 0xC1	; 193
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	88 61       	ori	r24, 0x18	; 24
 374:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);//|(1 << TXCIE0)|(1 << UDRIE0);
 376:	80 81       	ld	r24, Z
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 37c:	e2 ec       	ldi	r30, 0xC2	; 194
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8e 60       	ori	r24, 0x0E	; 14
 384:	80 83       	st	Z, r24
	
	sei();
 386:	78 94       	sei
 388:	08 95       	ret

0000038a <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 38a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 38e:	95 ff       	sbrs	r25, 5
 390:	fc cf       	rjmp	.-8      	; 0x38a <transmit_data>
	
	UDR0 = data;
 392:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 396:	08 95       	ret

00000398 <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 398:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 39c:	88 23       	and	r24, r24
 39e:	e4 f7       	brge	.-8      	; 0x398 <receive_data>

	return UDR0;
 3a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 3a4:	08 95       	ret

000003a6 <__vector_18>:

ISR(USART_RX_vect) 
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
	flag_rx = 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <flag_rx>
}
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <send_data>:

void send_data(char data[])
{	
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 3cc:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i])
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <send_data+0x12>
	{
		transmit_data(data[i]);
 3d0:	0e 94 c5 01 	call	0x38a	; 0x38a <transmit_data>
		i++;
 3d4:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[])
{	
	uint8_t i = 0;
	
	while(data[i])
 3d6:	f8 01       	movw	r30, r16
 3d8:	ec 0f       	add	r30, r28
 3da:	f1 1d       	adc	r31, r1
 3dc:	80 81       	ld	r24, Z
 3de:	81 11       	cpse	r24, r1
 3e0:	f7 cf       	rjmp	.-18     	; 0x3d0 <send_data+0xc>
	{
		transmit_data(data[i]);
		i++;
	}
}
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	08 95       	ret

000003ea <read_data>:

void read_data(char data[])
{	
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	8c 01       	movw	r16, r24
	char mesaj_primit;
	uint8_t i = 0;
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{	
		mesaj_primit = receive_data();		
 3f6:	0e 94 cc 01 	call	0x398	; 0x398 <receive_data>
		
		if(mesaj_primit != '\r')
 3fa:	8d 30       	cpi	r24, 0x0D	; 13
 3fc:	39 f0       	breq	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			data[i] = mesaj_primit;
 3fe:	f8 01       	movw	r30, r16
 400:	ec 0f       	add	r30, r28
 402:	f1 1d       	adc	r31, r1
 404:	80 83       	st	Z, r24
			i++;
 406:	cf 5f       	subi	r28, 0xFF	; 255
void read_data(char data[])
{	
	char mesaj_primit;
	uint8_t i = 0;
	
	while (i < (MAX_LENGTH - 1))
 408:	c1 33       	cpi	r28, 0x31	; 49
 40a:	a8 f3       	brcs	.-22     	; 0x3f6 <read_data+0xc>
			break;
		}
	}
	
	//data[i] = 0; //caracter final
}
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <start_program>:

void start_program()
{
	if(flag_rx == 1)
 414:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <flag_rx>
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	41 f4       	brne	.+16     	; 0x42c <start_program+0x18>
	{
		read_data(mesaj);
 41c:	82 ec       	ldi	r24, 0xC2	; 194
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 f5 01 	call	0x3ea	; 0x3ea <read_data>
		switch_data(mesaj);
 424:	82 ec       	ldi	r24, 0xC2	; 194
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 d7 00 	call	0x1ae	; 0x1ae <switch_data>
 42c:	08 95       	ret

0000042e <__umulhisi3>:
 42e:	a2 9f       	mul	r26, r18
 430:	b0 01       	movw	r22, r0
 432:	b3 9f       	mul	r27, r19
 434:	c0 01       	movw	r24, r0
 436:	a3 9f       	mul	r26, r19
 438:	70 0d       	add	r23, r0
 43a:	81 1d       	adc	r24, r1
 43c:	11 24       	eor	r1, r1
 43e:	91 1d       	adc	r25, r1
 440:	b2 9f       	mul	r27, r18
 442:	70 0d       	add	r23, r0
 444:	81 1d       	adc	r24, r1
 446:	11 24       	eor	r1, r1
 448:	91 1d       	adc	r25, r1
 44a:	08 95       	ret

0000044c <strcmp>:
 44c:	fb 01       	movw	r30, r22
 44e:	dc 01       	movw	r26, r24
 450:	8d 91       	ld	r24, X+
 452:	01 90       	ld	r0, Z+
 454:	80 19       	sub	r24, r0
 456:	01 10       	cpse	r0, r1
 458:	d9 f3       	breq	.-10     	; 0x450 <strcmp+0x4>
 45a:	99 0b       	sbc	r25, r25
 45c:	08 95       	ret

0000045e <__itoa_ncheck>:
 45e:	bb 27       	eor	r27, r27
 460:	4a 30       	cpi	r20, 0x0A	; 10
 462:	31 f4       	brne	.+12     	; 0x470 <__itoa_ncheck+0x12>
 464:	99 23       	and	r25, r25
 466:	22 f4       	brpl	.+8      	; 0x470 <__itoa_ncheck+0x12>
 468:	bd e2       	ldi	r27, 0x2D	; 45
 46a:	90 95       	com	r25
 46c:	81 95       	neg	r24
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	0c 94 3b 02 	jmp	0x476	; 0x476 <__utoa_common>

00000474 <__utoa_ncheck>:
 474:	bb 27       	eor	r27, r27

00000476 <__utoa_common>:
 476:	fb 01       	movw	r30, r22
 478:	55 27       	eor	r21, r21
 47a:	aa 27       	eor	r26, r26
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	aa 1f       	adc	r26, r26
 482:	a4 17       	cp	r26, r20
 484:	10 f0       	brcs	.+4      	; 0x48a <__utoa_common+0x14>
 486:	a4 1b       	sub	r26, r20
 488:	83 95       	inc	r24
 48a:	50 51       	subi	r21, 0x10	; 16
 48c:	b9 f7       	brne	.-18     	; 0x47c <__utoa_common+0x6>
 48e:	a0 5d       	subi	r26, 0xD0	; 208
 490:	aa 33       	cpi	r26, 0x3A	; 58
 492:	08 f0       	brcs	.+2      	; 0x496 <__utoa_common+0x20>
 494:	a9 5d       	subi	r26, 0xD9	; 217
 496:	a1 93       	st	Z+, r26
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	79 f7       	brne	.-34     	; 0x47a <__utoa_common+0x4>
 49c:	b1 11       	cpse	r27, r1
 49e:	b1 93       	st	Z+, r27
 4a0:	11 92       	st	Z+, r1
 4a2:	cb 01       	movw	r24, r22
 4a4:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <strrev>

000004a8 <strrev>:
 4a8:	dc 01       	movw	r26, r24
 4aa:	fc 01       	movw	r30, r24
 4ac:	67 2f       	mov	r22, r23
 4ae:	71 91       	ld	r23, Z+
 4b0:	77 23       	and	r23, r23
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <strrev+0x4>
 4b4:	32 97       	sbiw	r30, 0x02	; 2
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <strrev+0x18>
 4b8:	7c 91       	ld	r23, X
 4ba:	6d 93       	st	X+, r22
 4bc:	70 83       	st	Z, r23
 4be:	62 91       	ld	r22, -Z
 4c0:	ae 17       	cp	r26, r30
 4c2:	bf 07       	cpc	r27, r31
 4c4:	c8 f3       	brcs	.-14     	; 0x4b8 <strrev+0x10>
 4c6:	08 95       	ret

000004c8 <_exit>:
 4c8:	f8 94       	cli

000004ca <__stop_program>:
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <__stop_program>
