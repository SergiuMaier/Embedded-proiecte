
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008001a6  008001a6  000005e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001226  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5b  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000720  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000542  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e4  00000000  00000000  000031da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000034be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3a       	cpi	r26, 0xA6	; 166
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 ea       	ldi	r26, 0xA6	; 166
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  9e:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <new_line>:

#include "functii_afisare.h"

void new_line()
{
	send_data("\n\r>> ");
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
  ae:	08 95       	ret

000000b0 <afisare_meniu>:
}

void afisare_meniu()
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
  b8:	08 95       	ret

000000ba <schimbare_stare_led>:
	}
}

void schimbare_stare_led(uint8_t stare)
{
	if(stare == 1)
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	51 f4       	brne	.+20     	; 0xd2 <schimbare_stare_led+0x18>
	{
		PORTB |= (1 << PINB0);
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	85 b9       	out	0x05, r24	; 5
		send_data("ON\n\r");
  c4:	8c e4       	ldi	r24, 0x4C	; 76
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		new_line();
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  d0:	08 95       	ret
	}
	else
	{
		PORTB &= ~(1 << PINB0);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	85 b9       	out	0x05, r24	; 5
		send_data("OFF\n\r");
  d8:	81 e5       	ldi	r24, 0x51	; 81
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		new_line();
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
  e4:	08 95       	ret

000000e6 <afisare_timp>:
	}
}

void afisare_timp()
{
	incrementare_minute();
  e6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <incrementare_minute>
		
	if(flag_timer == 1)
  ea:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	09 f0       	breq	.+2      	; 0xf4 <afisare_timp+0xe>
  f2:	4c c0       	rjmp	.+152    	; 0x18c <afisare_timp+0xa6>
	{			
		send_data("Timp curent: ");
  f4:	87 e5       	ldi	r24, 0x57	; 87
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		
		itoa(secunde,  ch_sec, 10); //conversie sec si min in char
  fc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 100:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 104:	4a e0       	ldi	r20, 0x0A	; 10
 106:	68 eb       	ldi	r22, 0xB8	; 184
 108:	71 e0       	ldi	r23, 0x01	; 1
 10a:	0e 94 1d 02 	call	0x43a	; 0x43a <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 10e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 112:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 116:	4a e0       	ldi	r20, 0x0A	; 10
 118:	6e ea       	ldi	r22, 0xAE	; 174
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	0e 94 1d 02 	call	0x43a	; 0x43a <__itoa_ncheck>
		
		//format 00:00
			
		if(minute < 10)
 120:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 124:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 128:	0a 97       	sbiw	r24, 0x0a	; 10
 12a:	48 f4       	brcc	.+18     	; 0x13e <afisare_timp+0x58>
		{
			send_data("0");
 12c:	86 e6       	ldi	r24, 0x66	; 102
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
			send_data(ch_min);
 134:	8e ea       	ldi	r24, 0xAE	; 174
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <afisare_timp+0x60>
		}
		else
			send_data(ch_min);
 13e:	8e ea       	ldi	r24, 0xAE	; 174
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		
		if((secunde >= 0) && (secunde < 10))
 146:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 14a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 14e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 152:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 156:	0a 97       	sbiw	r24, 0x0a	; 10
 158:	48 f4       	brcc	.+18     	; 0x16c <afisare_timp+0x86>
		{
			send_data(":0");
 15a:	85 e6       	ldi	r24, 0x65	; 101
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
			send_data(ch_sec);
 162:	88 eb       	ldi	r24, 0xB8	; 184
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
 16a:	08 c0       	rjmp	.+16     	; 0x17c <afisare_timp+0x96>
		}
		else
		{
			send_data(":");
 16c:	88 e6       	ldi	r24, 0x68	; 104
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
			send_data(ch_sec);
 174:	88 eb       	ldi	r24, 0xB8	; 184
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		}
		
		send_data("\n\r");
 17c:	83 ea       	ldi	r24, 0xA3	; 163
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		new_line();
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
		
		flag_timer = 0;
 188:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
 18c:	08 95       	ret

0000018e <switch_data>:
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
}

void switch_data(char data[])
{	
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	if(strcmp(data, "meniu") == 0)
 194:	6a e6       	ldi	r22, 0x6A	; 106
 196:	71 e0       	ldi	r23, 0x01	; 1
 198:	0e 94 14 02 	call	0x428	; 0x428 <strcmp>
 19c:	89 2b       	or	r24, r25
 19e:	29 f4       	brne	.+10     	; 0x1aa <switch_data+0x1c>
	{
		afisare_meniu();
 1a0:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 1a8:	3d c0       	rjmp	.+122    	; 0x224 <switch_data+0x96>
	}		
	else if(strcmp(data, "timp") == 0)
 1aa:	60 e7       	ldi	r22, 0x70	; 112
 1ac:	71 e0       	ldi	r23, 0x01	; 1
 1ae:	ce 01       	movw	r24, r28
 1b0:	0e 94 14 02 	call	0x428	; 0x428 <strcmp>
 1b4:	89 2b       	or	r24, r25
 1b6:	19 f4       	brne	.+6      	; 0x1be <switch_data+0x30>
	{
		afisare_timp();
 1b8:	0e 94 73 00 	call	0xe6	; 0xe6 <afisare_timp>
 1bc:	33 c0       	rjmp	.+102    	; 0x224 <switch_data+0x96>
	}
	else if(strcmp(data, "led on") == 0)
 1be:	65 e7       	ldi	r22, 0x75	; 117
 1c0:	71 e0       	ldi	r23, 0x01	; 1
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 14 02 	call	0x428	; 0x428 <strcmp>
 1c8:	89 2b       	or	r24, r25
 1ca:	21 f4       	brne	.+8      	; 0x1d4 <switch_data+0x46>
	{
		schimbare_stare_led(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 5d 00 	call	0xba	; 0xba <schimbare_stare_led>
 1d2:	28 c0       	rjmp	.+80     	; 0x224 <switch_data+0x96>
		
	}
	else if(strcmp(data, "led off") == 0)
 1d4:	6c e7       	ldi	r22, 0x7C	; 124
 1d6:	71 e0       	ldi	r23, 0x01	; 1
 1d8:	ce 01       	movw	r24, r28
 1da:	0e 94 14 02 	call	0x428	; 0x428 <strcmp>
 1de:	89 2b       	or	r24, r25
 1e0:	21 f4       	brne	.+8      	; 0x1ea <switch_data+0x5c>
	{
		schimbare_stare_led(0);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 5d 00 	call	0xba	; 0xba <schimbare_stare_led>
 1e8:	1d c0       	rjmp	.+58     	; 0x224 <switch_data+0x96>
		
	}
	else if(strcmp(data, "clear") == 0)
 1ea:	64 e8       	ldi	r22, 0x84	; 132
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 14 02 	call	0x428	; 0x428 <strcmp>
 1f4:	89 2b       	or	r24, r25
 1f6:	39 f4       	brne	.+14     	; 0x206 <switch_data+0x78>
	{
		send_data(CLEAR);
 1f8:	8a e8       	ldi	r24, 0x8A	; 138
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		new_line();
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
 204:	0f c0       	rjmp	.+30     	; 0x224 <switch_data+0x96>
	}
	else
	{
		send_data("'");
 206:	8d e8       	ldi	r24, 0x8D	; 141
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		send_data(data);
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		send_data("' nu este o comanda!\n\r");
 214:	8f e8       	ldi	r24, 0x8F	; 143
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
		afisare_meniu();
 21c:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
		new_line();
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	}
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
 22a:	0e 94 34 01 	call	0x268	; 0x268 <init_devices>
	init_USART(MYUBRR);
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 9c 01 	call	0x338	; 0x338 <init_USART>
	
	send_data(CLEAR); //clear putty
 236:	8a e8       	ldi	r24, 0x8A	; 138
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 cc 01 	call	0x398	; 0x398 <send_data>
	afisare_meniu();  //afisare lista comenzi
 23e:	0e 94 58 00 	call	0xb0	; 0xb0 <afisare_meniu>
	new_line();       //rand nou unde se poate introduce o comanda
 242:	0e 94 53 00 	call	0xa6	; 0xa6 <new_line>
	
	while(1) 
    {
		start_program();   
 246:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <start_program>
 24a:	fd cf       	rjmp	.-6      	; 0x246 <main+0x1c>

0000024c <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 24c:	84 b5       	in	r24, 0x24	; 36
 24e:	82 60       	ori	r24, 0x02	; 2
 250:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 252:	89 ef       	ldi	r24, 0xF9	; 249
 254:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 256:	85 b5       	in	r24, 0x25	; 37
 258:	83 60       	ori	r24, 0x03	; 3
 25a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 25c:	ee e6       	ldi	r30, 0x6E	; 110
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	82 60       	ori	r24, 0x02	; 2
 264:	80 83       	st	Z, r24
 266:	08 95       	ret

00000268 <init_devices>:
}

void init_devices(){
	
	cli();
 268:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 26e:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 270:	0e 94 26 01 	call	0x24c	; 0x24c <init_timer>
	
	sei();
 274:	78 94       	sei
 276:	08 95       	ret

00000278 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
	
	cli();
 288:	f8 94       	cli
	
	contor++;
 28a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <contor>
 28e:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <contor+0x1>
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <contor+0x1>
 298:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <contor>
	
	if(contor >= 1000){
 29c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <contor>
 2a0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <contor+0x1>
 2a4:	88 3e       	cpi	r24, 0xE8	; 232
 2a6:	93 40       	sbci	r25, 0x03	; 3
 2a8:	80 f0       	brcs	.+32     	; 0x2ca <__vector_14+0x52>
		secunde++;
 2aa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 2ae:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <secunde+0x1>
 2b8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <secunde>
		contor = 0;
 2bc:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <contor+0x1>
 2c0:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <contor>
		flag_timer = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
	}
	
	sei();
 2ca:	78 94       	sei
}
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde >= 60){	//in ISR aveam 01:59 in loc de 01:00
 2dc:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <secunde>
 2e0:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <secunde+0x1>
 2e4:	cc 97       	sbiw	r24, 0x3c	; 60
 2e6:	38 f1       	brcs	.+78     	; 0x336 <incrementare_minute+0x5a>
		secunde %= 60;
 2e8:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <secunde>
 2ec:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <secunde+0x1>
 2f0:	9a 01       	movw	r18, r20
 2f2:	a9 e8       	ldi	r26, 0x89	; 137
 2f4:	b8 e8       	ldi	r27, 0x88	; 136
 2f6:	0e 94 05 02 	call	0x40a	; 0x40a <__umulhisi3>
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	92 95       	swap	r25
 300:	82 95       	swap	r24
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	89 27       	eor	r24, r25
 306:	9f 70       	andi	r25, 0x0F	; 15
 308:	89 27       	eor	r24, r25
 30a:	6c e3       	ldi	r22, 0x3C	; 60
 30c:	68 9f       	mul	r22, r24
 30e:	90 01       	movw	r18, r0
 310:	69 9f       	mul	r22, r25
 312:	30 0d       	add	r19, r0
 314:	11 24       	eor	r1, r1
 316:	ca 01       	movw	r24, r20
 318:	82 1b       	sub	r24, r18
 31a:	93 0b       	sbc	r25, r19
 31c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <secunde+0x1>
 320:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <secunde>
		minute++;
 324:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <minute>
 328:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <minute+0x1>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <minute+0x1>
 332:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <minute>
 336:	08 95       	ret

00000338 <init_USART>:

char msg[10]; //trebuie mutat de aici

void init_USART(uint16_t ubrr)
{	
	UBRR0H = (unsigned char)(ubrr >> 8);
 338:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 33c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 340:	e1 ec       	ldi	r30, 0xC1	; 193
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 61       	ori	r24, 0x18	; 24
 348:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);//|(1 << TXCIE0)|(1 << UDRIE0);
 34a:	80 81       	ld	r24, Z
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 350:	e2 ec       	ldi	r30, 0xC2	; 194
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	8e 60       	ori	r24, 0x0E	; 14
 358:	80 83       	st	Z, r24
	
	sei();
 35a:	78 94       	sei
 35c:	08 95       	ret

0000035e <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 35e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 362:	95 ff       	sbrs	r25, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <transmit_data>
	
	UDR0 = data;
 366:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 36a:	08 95       	ret

0000036c <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 36c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 370:	88 23       	and	r24, r24
 372:	e4 f7       	brge	.-8      	; 0x36c <receive_data>

	return UDR0;
 374:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 378:	08 95       	ret

0000037a <__vector_18>:

ISR(USART_RX_vect) 
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
	flag_rx = 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <flag_rx>
}
 38c:	8f 91       	pop	r24
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <send_data>:

void send_data(char data[])
{	
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 3a0:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i])
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <send_data+0x12>
	{
		transmit_data(data[i]);
 3a4:	0e 94 af 01 	call	0x35e	; 0x35e <transmit_data>
		i++;
 3a8:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[])
{	
	uint8_t i = 0;
	
	while(data[i])
 3aa:	f8 01       	movw	r30, r16
 3ac:	ec 0f       	add	r30, r28
 3ae:	f1 1d       	adc	r31, r1
 3b0:	80 81       	ld	r24, Z
 3b2:	81 11       	cpse	r24, r1
 3b4:	f7 cf       	rjmp	.-18     	; 0x3a4 <send_data+0xc>
	{
		transmit_data(data[i]);
		i++;
	}
}
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <read_data>:

void read_data(char data[])
{	
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	8c 01       	movw	r16, r24
	char response;
	uint8_t i;
	i = 0;
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <read_data+0x1e>
	{	
		response = receive_data();		
 3ca:	0e 94 b6 01 	call	0x36c	; 0x36c <receive_data>
		
		if(response != '\r')
 3ce:	8d 30       	cpi	r24, 0x0D	; 13
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <read_data+0x22>
		{
			data[i] = response;
 3d2:	f8 01       	movw	r30, r16
 3d4:	ec 0f       	add	r30, r28
 3d6:	f1 1d       	adc	r31, r1
 3d8:	80 83       	st	Z, r24
			i++;
 3da:	cf 5f       	subi	r28, 0xFF	; 255
{	
	char response;
	uint8_t i;
	i = 0;
	
	while (i < (MAX_LENGTH - 1))
 3dc:	c1 33       	cpi	r28, 0x31	; 49
 3de:	a8 f3       	brcs	.-22     	; 0x3ca <read_data+0xc>
		{
			break;
		}
	}
	
	data[i] = 0; //char final
 3e0:	f8 01       	movw	r30, r16
 3e2:	ec 0f       	add	r30, r28
 3e4:	f1 1d       	adc	r31, r1
 3e6:	10 82       	st	Z, r1
}
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	08 95       	ret

000003f0 <start_program>:

void start_program()
{	
	if(flag_rx == 1)
 3f0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <flag_rx>
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		read_data(msg);
 3f8:	84 ec       	ldi	r24, 0xC4	; 196
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 df 01 	call	0x3be	; 0x3be <read_data>
		switch_data(msg);
 400:	84 ec       	ldi	r24, 0xC4	; 196
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 c7 00 	call	0x18e	; 0x18e <switch_data>
 408:	08 95       	ret

0000040a <__umulhisi3>:
 40a:	a2 9f       	mul	r26, r18
 40c:	b0 01       	movw	r22, r0
 40e:	b3 9f       	mul	r27, r19
 410:	c0 01       	movw	r24, r0
 412:	a3 9f       	mul	r26, r19
 414:	70 0d       	add	r23, r0
 416:	81 1d       	adc	r24, r1
 418:	11 24       	eor	r1, r1
 41a:	91 1d       	adc	r25, r1
 41c:	b2 9f       	mul	r27, r18
 41e:	70 0d       	add	r23, r0
 420:	81 1d       	adc	r24, r1
 422:	11 24       	eor	r1, r1
 424:	91 1d       	adc	r25, r1
 426:	08 95       	ret

00000428 <strcmp>:
 428:	fb 01       	movw	r30, r22
 42a:	dc 01       	movw	r26, r24
 42c:	8d 91       	ld	r24, X+
 42e:	01 90       	ld	r0, Z+
 430:	80 19       	sub	r24, r0
 432:	01 10       	cpse	r0, r1
 434:	d9 f3       	breq	.-10     	; 0x42c <strcmp+0x4>
 436:	99 0b       	sbc	r25, r25
 438:	08 95       	ret

0000043a <__itoa_ncheck>:
 43a:	bb 27       	eor	r27, r27
 43c:	4a 30       	cpi	r20, 0x0A	; 10
 43e:	31 f4       	brne	.+12     	; 0x44c <__itoa_ncheck+0x12>
 440:	99 23       	and	r25, r25
 442:	22 f4       	brpl	.+8      	; 0x44c <__itoa_ncheck+0x12>
 444:	bd e2       	ldi	r27, 0x2D	; 45
 446:	90 95       	com	r25
 448:	81 95       	neg	r24
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	0c 94 29 02 	jmp	0x452	; 0x452 <__utoa_common>

00000450 <__utoa_ncheck>:
 450:	bb 27       	eor	r27, r27

00000452 <__utoa_common>:
 452:	fb 01       	movw	r30, r22
 454:	55 27       	eor	r21, r21
 456:	aa 27       	eor	r26, r26
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	aa 1f       	adc	r26, r26
 45e:	a4 17       	cp	r26, r20
 460:	10 f0       	brcs	.+4      	; 0x466 <__utoa_common+0x14>
 462:	a4 1b       	sub	r26, r20
 464:	83 95       	inc	r24
 466:	50 51       	subi	r21, 0x10	; 16
 468:	b9 f7       	brne	.-18     	; 0x458 <__utoa_common+0x6>
 46a:	a0 5d       	subi	r26, 0xD0	; 208
 46c:	aa 33       	cpi	r26, 0x3A	; 58
 46e:	08 f0       	brcs	.+2      	; 0x472 <__utoa_common+0x20>
 470:	a9 5d       	subi	r26, 0xD9	; 217
 472:	a1 93       	st	Z+, r26
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	79 f7       	brne	.-34     	; 0x456 <__utoa_common+0x4>
 478:	b1 11       	cpse	r27, r1
 47a:	b1 93       	st	Z+, r27
 47c:	11 92       	st	Z+, r1
 47e:	cb 01       	movw	r24, r22
 480:	0c 94 42 02 	jmp	0x484	; 0x484 <strrev>

00000484 <strrev>:
 484:	dc 01       	movw	r26, r24
 486:	fc 01       	movw	r30, r24
 488:	67 2f       	mov	r22, r23
 48a:	71 91       	ld	r23, Z+
 48c:	77 23       	and	r23, r23
 48e:	e1 f7       	brne	.-8      	; 0x488 <strrev+0x4>
 490:	32 97       	sbiw	r30, 0x02	; 2
 492:	04 c0       	rjmp	.+8      	; 0x49c <strrev+0x18>
 494:	7c 91       	ld	r23, X
 496:	6d 93       	st	X+, r22
 498:	70 83       	st	Z, r23
 49a:	62 91       	ld	r22, -Z
 49c:	ae 17       	cp	r26, r30
 49e:	bf 07       	cpc	r27, r31
 4a0:	c8 f3       	brcs	.-14     	; 0x494 <strrev+0x10>
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
