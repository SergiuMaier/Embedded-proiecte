
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800182  00800182  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eff  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000615  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050d  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002cc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3a       	cpi	r26, 0xAA	; 170
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <switch_data>:
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
}

void switch_data(char data[])
{	
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	if(strcmp(data, "led on") == 0)
  ac:	6b e4       	ldi	r22, 0x4B	; 75
  ae:	71 e0       	ldi	r23, 0x01	; 1
  b0:	0e 94 4d 01 	call	0x29a	; 0x29a <strcmp>
  b4:	89 2b       	or	r24, r25
  b6:	29 f4       	brne	.+10     	; 0xc2 <switch_data+0x1c>
		send_data("led on\n\r");
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
  c0:	2b c0       	rjmp	.+86     	; 0x118 <switch_data+0x72>
		
	else if(strcmp(data, "led off") == 0)
  c2:	6b e5       	ldi	r22, 0x5B	; 91
  c4:	71 e0       	ldi	r23, 0x01	; 1
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 4d 01 	call	0x29a	; 0x29a <strcmp>
  cc:	89 2b       	or	r24, r25
  ce:	29 f4       	brne	.+10     	; 0xda <switch_data+0x34>
		send_data("led off\n\r");
  d0:	83 e6       	ldi	r24, 0x63	; 99
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
  d8:	1f c0       	rjmp	.+62     	; 0x118 <switch_data+0x72>
	
	else if(strcmp(data, "timp") == 0)
  da:	6d e6       	ldi	r22, 0x6D	; 109
  dc:	71 e0       	ldi	r23, 0x01	; 1
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 4d 01 	call	0x29a	; 0x29a <strcmp>
  e4:	89 2b       	or	r24, r25
  e6:	29 f4       	brne	.+10     	; 0xf2 <switch_data+0x4c>
		send_data("timp\n\r");
  e8:	82 e7       	ldi	r24, 0x72	; 114
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
  f0:	13 c0       	rjmp	.+38     	; 0x118 <switch_data+0x72>

	
	else if(strcmp(data, "clear") == 0)
  f2:	69 e7       	ldi	r22, 0x79	; 121
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 4d 01 	call	0x29a	; 0x29a <strcmp>
  fc:	89 2b       	or	r24, r25
  fe:	29 f4       	brne	.+10     	; 0x10a <switch_data+0x64>
		send_data("clear\n\r");
 100:	83 e4       	ldi	r24, 0x43	; 67
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
 108:	07 c0       	rjmp	.+14     	; 0x118 <switch_data+0x72>

	else{
		send_data(data);
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
		send_data("\n\r");
 110:	8a e6       	ldi	r24, 0x6A	; 106
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
 11e:	0e 94 aa 00 	call	0x154	; 0x154 <init_devices>
	init_USART(MYUBRR);
 122:	87 e6       	ldi	r24, 0x67	; 103
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_USART>
	
	send_data(CLEAR); //clear putty
 12a:	8f e7       	ldi	r24, 0x7F	; 127
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 14 01 	call	0x228	; 0x228 <send_data>
	
	while(1) 
    {
		start_program();   
 132:	0e 94 40 01 	call	0x280	; 0x280 <start_program>
 136:	fd cf       	rjmp	.-6      	; 0x132 <main+0x14>

00000138 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 138:	84 b5       	in	r24, 0x24	; 36
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 142:	85 b5       	in	r24, 0x25	; 37
 144:	83 60       	ori	r24, 0x03	; 3
 146:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 148:	ee e6       	ldi	r30, 0x6E	; 110
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <init_devices>:
}

void init_devices(){
	
	cli();
 154:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 15a:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 15c:	0e 94 9c 00 	call	0x138	; 0x138 <init_timer>
	
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	2f 93       	push	r18
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	
	cli();
 174:	f8 94       	cli
	
	contor++;
 176:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <contor>
 17a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <contor+0x1>
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <contor+0x1>
 184:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <contor>
	
	if(contor >= 1000){
 188:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <contor>
 18c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <contor+0x1>
 190:	88 3e       	cpi	r24, 0xE8	; 232
 192:	93 40       	sbci	r25, 0x03	; 3
 194:	80 f0       	brcs	.+32     	; 0x1b6 <__vector_14+0x52>
		secunde++;
 196:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <secunde>
 19a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <secunde+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <secunde+0x1>
 1a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <secunde>
		contor = 0;
 1a8:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <contor+0x1>
 1ac:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <contor>
		flag_timer = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
	}
	
	sei();
 1b6:	78 94       	sei
}
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr)
{	
	UBRR0H = (unsigned char)(ubrr >> 8);
 1c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 1cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 1d0:	e1 ec       	ldi	r30, 0xC1	; 193
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 61       	ori	r24, 0x18	; 24
 1d8:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);//|(1 << TXCIE0)|(1 << UDRIE0);
 1da:	80 81       	ld	r24, Z
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 1e0:	e2 ec       	ldi	r30, 0xC2	; 194
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	8e 60       	ori	r24, 0x0E	; 14
 1e8:	80 83       	st	Z, r24
	
	sei();
 1ea:	78 94       	sei
 1ec:	08 95       	ret

000001ee <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 1ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1f2:	95 ff       	sbrs	r25, 5
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <transmit_data>
	
	UDR0 = data;
 1f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1fa:	08 95       	ret

000001fc <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 200:	88 23       	and	r24, r24
 202:	e4 f7       	brge	.-8      	; 0x1fc <receive_data>

	return UDR0;
 204:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 208:	08 95       	ret

0000020a <__vector_18>:

ISR(USART_RX_vect) 
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
	flag_rx = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <flag_rx>
}
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <send_data>:

void send_data(char data[])
{	
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 230:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i])
 232:	03 c0       	rjmp	.+6      	; 0x23a <send_data+0x12>
	{
		transmit_data(data[i]);
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmit_data>
		i++;
 238:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[])
{	
	uint8_t i = 0;
	
	while(data[i])
 23a:	f8 01       	movw	r30, r16
 23c:	ec 0f       	add	r30, r28
 23e:	f1 1d       	adc	r31, r1
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	f7 cf       	rjmp	.-18     	; 0x234 <send_data+0xc>
	{
		transmit_data(data[i]);
		i++;
	}
}
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <read_data>:

void read_data(char data[])
{	
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	8c 01       	movw	r16, r24
	char mesaj_primit;
	uint8_t i = 0;
 256:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 258:	09 c0       	rjmp	.+18     	; 0x26c <read_data+0x1e>
	{	
		mesaj_primit = receive_data();		
 25a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <receive_data>
		
		if(mesaj_primit != '\r')
 25e:	8d 30       	cpi	r24, 0x0D	; 13
 260:	39 f0       	breq	.+14     	; 0x270 <read_data+0x22>
		{
			data[i] = mesaj_primit;
 262:	f8 01       	movw	r30, r16
 264:	ec 0f       	add	r30, r28
 266:	f1 1d       	adc	r31, r1
 268:	80 83       	st	Z, r24
			i++;
 26a:	cf 5f       	subi	r28, 0xFF	; 255
void read_data(char data[])
{	
	char mesaj_primit;
	uint8_t i = 0;
	
	while (i < (MAX_LENGTH - 1))
 26c:	c1 33       	cpi	r28, 0x31	; 49
 26e:	a8 f3       	brcs	.-22     	; 0x25a <read_data+0xc>
		else{
			break;
		}
	}
	
	data[i] = '\0'; //caracter final
 270:	f8 01       	movw	r30, r16
 272:	ec 0f       	add	r30, r28
 274:	f1 1d       	adc	r31, r1
 276:	10 82       	st	Z, r1
}
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	08 95       	ret

00000280 <start_program>:

void start_program()
{
	if(flag_rx == 1)
 280:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <flag_rx>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	41 f4       	brne	.+16     	; 0x298 <start_program+0x18>
	{
		read_data(mesaj);
 288:	8e e9       	ldi	r24, 0x9E	; 158
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 27 01 	call	0x24e	; 0x24e <read_data>
		//send_data(mesaj);
		//send_data("\n\r");
		
		switch_data(mesaj);
 290:	8e e9       	ldi	r24, 0x9E	; 158
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <switch_data>
 298:	08 95       	ret

0000029a <strcmp>:
 29a:	fb 01       	movw	r30, r22
 29c:	dc 01       	movw	r26, r24
 29e:	8d 91       	ld	r24, X+
 2a0:	01 90       	ld	r0, Z+
 2a2:	80 19       	sub	r24, r0
 2a4:	01 10       	cpse	r0, r1
 2a6:	d9 f3       	breq	.-10     	; 0x29e <strcmp+0x4>
 2a8:	99 0b       	sbc	r25, r25
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
