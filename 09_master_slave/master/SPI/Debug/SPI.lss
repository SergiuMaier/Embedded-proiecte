
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  008001a4  008001a4  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f08  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f7  00000000  00000000  00001df9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3a       	cpi	r26, 0xA4	; 164
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ea       	ldi	r26, 0xA4	; 164
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3f       	cpi	r26, 0xF2	; 242
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <switch_data>:
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
}

void switch_data(char data[])
{			
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	if(strcmp(data, "led on") == 0){
  ac:	6b e4       	ldi	r22, 0x4B	; 75
  ae:	71 e0       	ldi	r23, 0x01	; 1
  b0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <strcmp>
  b4:	89 2b       	or	r24, r25
  b6:	29 f4       	brne	.+10     	; 0xc2 <switch_data+0x1c>
		send_data("led on\n\r");
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
  c0:	38 c0       	rjmp	.+112    	; 0x132 <switch_data+0x8c>
	}
	else if(strcmp(data, "led off") == 0){
  c2:	6b e5       	ldi	r22, 0x5B	; 91
  c4:	71 e0       	ldi	r23, 0x01	; 1
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <strcmp>
  cc:	89 2b       	or	r24, r25
  ce:	29 f4       	brne	.+10     	; 0xda <switch_data+0x34>
		send_data("led off\n\r");
  d0:	83 e6       	ldi	r24, 0x63	; 99
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
  d8:	2c c0       	rjmp	.+88     	; 0x132 <switch_data+0x8c>
	}
	else if(strcmp(data, "timp") == 0){
  da:	6d e6       	ldi	r22, 0x6D	; 109
  dc:	71 e0       	ldi	r23, 0x01	; 1
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <strcmp>
  e4:	89 2b       	or	r24, r25
  e6:	29 f4       	brne	.+10     	; 0xf2 <switch_data+0x4c>
		send_data("timp\n\r");
  e8:	82 e7       	ldi	r24, 0x72	; 114
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
  f0:	20 c0       	rjmp	.+64     	; 0x132 <switch_data+0x8c>
	}
	else if(strcmp(data, "clear") == 0){
  f2:	69 e7       	ldi	r22, 0x79	; 121
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <strcmp>
  fc:	89 2b       	or	r24, r25
  fe:	49 f4       	brne	.+18     	; 0x112 <switch_data+0x6c>
		send_data(CLEAR);
 100:	8f e7       	ldi	r24, 0x7F	; 127
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
		send_data("\n\r");
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
 110:	10 c0       	rjmp	.+32     	; 0x132 <switch_data+0x8c>
	}
	else if(strcmp(data, "clear slave") == 0){
 112:	62 e8       	ldi	r22, 0x82	; 130
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	ce 01       	movw	r24, r28
 118:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <strcmp>
 11c:	89 2b       	or	r24, r25
 11e:	29 f4       	brne	.+10     	; 0x12a <switch_data+0x84>
		send_data("clear\n\r");
 120:	83 e4       	ldi	r24, 0x43	; 67
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
 128:	04 c0       	rjmp	.+8      	; 0x132 <switch_data+0x8c>
	}
	else{
		send_data("nu este o comanda!\n\r");
 12a:	8e e8       	ldi	r24, 0x8E	; 142
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
 138:	0e 94 b7 00 	call	0x16e	; 0x16e <init_devices>
	init_USART(MYUBRR);
 13c:	87 e6       	ldi	r24, 0x67	; 103
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <init_USART>
	
	send_data(CLEAR); //clear putty
 144:	8f e7       	ldi	r24, 0x7F	; 127
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 21 01 	call	0x242	; 0x242 <send_data>
	
	while(1) 
    {
		start_program();   
 14c:	0e 94 4d 01 	call	0x29a	; 0x29a <start_program>
 150:	fd cf       	rjmp	.-6      	; 0x14c <main+0x14>

00000152 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 152:	84 b5       	in	r24, 0x24	; 36
 154:	82 60       	ori	r24, 0x02	; 2
 156:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 15c:	85 b5       	in	r24, 0x25	; 37
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 162:	ee e6       	ldi	r30, 0x6E	; 110
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <init_devices>:
}

void init_devices(){
	
	cli();
 16e:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 174:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 176:	0e 94 a9 00 	call	0x152	; 0x152 <init_timer>
	
	sei();
 17a:	78 94       	sei
 17c:	08 95       	ret

0000017e <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
	
	cli();
 18e:	f8 94       	cli
	
	contor++;
 190:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <contor>
 194:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <contor+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <contor+0x1>
 19e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <contor>
	
	if(contor >= 1000){
 1a2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <contor>
 1a6:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <contor+0x1>
 1aa:	88 3e       	cpi	r24, 0xE8	; 232
 1ac:	93 40       	sbci	r25, 0x03	; 3
 1ae:	80 f0       	brcs	.+32     	; 0x1d0 <__vector_14+0x52>
		secunde++;
 1b0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <secunde>
 1b4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <secunde+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <secunde+0x1>
 1be:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <secunde>
		contor = 0;
 1c2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <contor+0x1>
 1c6:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <contor>
		flag_timer = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
	}
	
	sei();
 1d0:	78 94       	sei
}
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr)
{	
	UBRR0H = (unsigned char)(ubrr >> 8);
 1e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 1e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 1ea:	e1 ec       	ldi	r30, 0xC1	; 193
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 61       	ori	r24, 0x18	; 24
 1f2:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);//|(1 << TXCIE0)|(1 << UDRIE0);
 1f4:	80 81       	ld	r24, Z
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 1fa:	e2 ec       	ldi	r30, 0xC2	; 194
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8e 60       	ori	r24, 0x0E	; 14
 202:	80 83       	st	Z, r24
	
	sei();
 204:	78 94       	sei
 206:	08 95       	ret

00000208 <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 208:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20c:	95 ff       	sbrs	r25, 5
 20e:	fc cf       	rjmp	.-8      	; 0x208 <transmit_data>
	
	UDR0 = data;
 210:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 214:	08 95       	ret

00000216 <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 216:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21a:	88 23       	and	r24, r24
 21c:	e4 f7       	brge	.-8      	; 0x216 <receive_data>

	return UDR0;
 21e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 222:	08 95       	ret

00000224 <__vector_18>:

ISR(USART_RX_vect) 
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	flag_rx = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <flag_rx>
}
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <send_data>:

void send_data(char data[])
{	
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 24a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i])
 24c:	03 c0       	rjmp	.+6      	; 0x254 <send_data+0x12>
	{
		transmit_data(data[i]);
 24e:	0e 94 04 01 	call	0x208	; 0x208 <transmit_data>
		i++;
 252:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[])
{	
	uint8_t i = 0;
	
	while(data[i])
 254:	f8 01       	movw	r30, r16
 256:	ec 0f       	add	r30, r28
 258:	f1 1d       	adc	r31, r1
 25a:	80 81       	ld	r24, Z
 25c:	81 11       	cpse	r24, r1
 25e:	f7 cf       	rjmp	.-18     	; 0x24e <send_data+0xc>
	{
		transmit_data(data[i]);
		i++;
	}
}
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <read_data>:

void read_data(char data[])
{	
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	8c 01       	movw	r16, r24
	char mesaj_primit;
	uint8_t i = 0;
 270:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 272:	09 c0       	rjmp	.+18     	; 0x286 <read_data+0x1e>
	{	
		mesaj_primit = receive_data();		
 274:	0e 94 0b 01 	call	0x216	; 0x216 <receive_data>
		
		if(mesaj_primit != '\r')
 278:	8d 30       	cpi	r24, 0x0D	; 13
 27a:	39 f0       	breq	.+14     	; 0x28a <read_data+0x22>
		{
			data[i] = mesaj_primit;
 27c:	f8 01       	movw	r30, r16
 27e:	ec 0f       	add	r30, r28
 280:	f1 1d       	adc	r31, r1
 282:	80 83       	st	Z, r24
			i++;
 284:	cf 5f       	subi	r28, 0xFF	; 255
void read_data(char data[])
{	
	char mesaj_primit;
	uint8_t i = 0;
	
	while (i < (MAX_LENGTH - 1))
 286:	c1 33       	cpi	r28, 0x31	; 49
 288:	a8 f3       	brcs	.-22     	; 0x274 <read_data+0xc>
		else{
			break;
		}
	}
	
	data[i] = '\0'; //caracter final
 28a:	f8 01       	movw	r30, r16
 28c:	ec 0f       	add	r30, r28
 28e:	f1 1d       	adc	r31, r1
 290:	10 82       	st	Z, r1
}
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <start_program>:

void start_program()
{
	if(flag_rx == 1)
 29a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <flag_rx>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f4       	brne	.+16     	; 0x2b2 <start_program+0x18>
	{
		read_data(mesaj);		
 2a2:	8f eb       	ldi	r24, 0xBF	; 191
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 34 01 	call	0x268	; 0x268 <read_data>
		switch_data(mesaj);
 2aa:	8f eb       	ldi	r24, 0xBF	; 191
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <switch_data>
 2b2:	08 95       	ret

000002b4 <strcmp>:
 2b4:	fb 01       	movw	r30, r22
 2b6:	dc 01       	movw	r26, r24
 2b8:	8d 91       	ld	r24, X+
 2ba:	01 90       	ld	r0, Z+
 2bc:	80 19       	sub	r24, r0
 2be:	01 10       	cpse	r0, r1
 2c0:	d9 f3       	breq	.-10     	; 0x2b8 <strcmp+0x4>
 2c2:	99 0b       	sbc	r25, r25
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
