
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000490  00000524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008001ac  008001ac  000005d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001200  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7a  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e4  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  00003191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3a       	cpi	r26, 0xAC	; 172
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac ea       	ldi	r26, 0xAC	; 172
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3d       	cpi	r26, 0xD4	; 212
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  9e:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <schimbare_stare_led>:
		send_data("nu este o comanda!\n\r");
	}
}

void schimbare_stare_led(volatile uint8_t *port, uint8_t pin, uint8_t stare)
{
  a6:	fc 01       	movw	r30, r24
	if(stare == 1)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	59 f4       	brne	.+22     	; 0xc2 <schimbare_stare_led+0x1c>
		*port |= (1 << pin);
  ac:	20 81       	ld	r18, Z
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <schimbare_stare_led+0x12>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <schimbare_stare_led+0xe>
  bc:	82 2b       	or	r24, r18
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret
	else
		*port &= ~(1 << pin);
  c2:	90 81       	ld	r25, Z
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <schimbare_stare_led+0x28>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <schimbare_stare_led+0x24>
  d2:	20 95       	com	r18
  d4:	29 23       	and	r18, r25
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <afisare_timp>:
}

void afisare_timp()
{
	incrementare_minute();
  da:	0e 94 62 01 	call	0x2c4	; 0x2c4 <incrementare_minute>
		
	if(flag_timer == 1)
  de:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__data_end>
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	09 f0       	breq	.+2      	; 0xe8 <afisare_timp+0xe>
  e6:	4a c0       	rjmp	.+148    	; 0x17c <afisare_timp+0xa2>
	{			
		send_data("Timp curent: ");
  e8:	8b e4       	ldi	r24, 0x4B	; 75
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		
		itoa(secunde,  ch_sec, 10); //conversie sec si min din int in char
  f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <secunde>
  f4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	6e eb       	ldi	r22, 0xBE	; 190
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 11 02 	call	0x422	; 0x422 <__itoa_ncheck>
		itoa(minute, ch_min, 10);
 102:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minute>
 106:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minute+0x1>
 10a:	4a e0       	ldi	r20, 0x0A	; 10
 10c:	64 eb       	ldi	r22, 0xB4	; 180
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	0e 94 11 02 	call	0x422	; 0x422 <__itoa_ncheck>
		
		//format 00:00
			
		if(minute < 10)
 114:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minute>
 118:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minute+0x1>
 11c:	0a 97       	sbiw	r24, 0x0a	; 10
 11e:	48 f4       	brcc	.+18     	; 0x132 <afisare_timp+0x58>
		{
			send_data("0");
 120:	8a e5       	ldi	r24, 0x5A	; 90
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
			send_data(ch_min);
 128:	84 eb       	ldi	r24, 0xB4	; 180
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
 130:	04 c0       	rjmp	.+8      	; 0x13a <afisare_timp+0x60>
		}
		else
			send_data(ch_min);
 132:	84 eb       	ldi	r24, 0xB4	; 180
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		
		if((secunde >= 0) && (secunde < 10))
 13a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <secunde>
 13e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <secunde+0x1>
 142:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <secunde>
 146:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <secunde+0x1>
 14a:	0a 97       	sbiw	r24, 0x0a	; 10
 14c:	48 f4       	brcc	.+18     	; 0x160 <afisare_timp+0x86>
		{
			send_data(":0");
 14e:	89 e5       	ldi	r24, 0x59	; 89
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
			send_data(ch_sec);
 156:	8e eb       	ldi	r24, 0xBE	; 190
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
 15e:	08 c0       	rjmp	.+16     	; 0x170 <afisare_timp+0x96>
		}
		else
		{
			send_data(":");
 160:	8c e5       	ldi	r24, 0x5C	; 92
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
			send_data(ch_sec);
 168:	8e eb       	ldi	r24, 0xBE	; 190
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		}
		
		send_data("\n\r");
 170:	89 ea       	ldi	r24, 0xA9	; 169
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		
		flag_timer = 0;
 178:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
 17c:	08 95       	ret

0000017e <switch_data>:
{
	send_data("\n\rComenzi:\n\r 1. meniu\n\r 2. timp\n\r 3. led on\n\r 4. led off\n\r 5. clear\n\r");
}

void switch_data(char data[])
{	
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
	//	schimbare_stare_led(&PORTB, PINB0, 1);
	//}
	
	//---------------------------------------------------------------------/
	
	if(strcmp(data, "\rled on") == 0){
 184:	6e e5       	ldi	r22, 0x5E	; 94
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	0e 94 08 02 	call	0x410	; 0x410 <strcmp>
 18c:	89 2b       	or	r24, r25
 18e:	59 f4       	brne	.+22     	; 0x1a6 <switch_data+0x28>
		schimbare_stare_led(&PORTB, PINB0, 1);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <schimbare_stare_led>
		send_data("LED ON\n\r");
 19c:	86 e6       	ldi	r24, 0x66	; 102
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
 1a4:	37 c0       	rjmp	.+110    	; 0x214 <switch_data+0x96>
	}
	else if(strcmp(data, "\rled off") == 0){
 1a6:	6f e6       	ldi	r22, 0x6F	; 111
 1a8:	71 e0       	ldi	r23, 0x01	; 1
 1aa:	ce 01       	movw	r24, r28
 1ac:	0e 94 08 02 	call	0x410	; 0x410 <strcmp>
 1b0:	89 2b       	or	r24, r25
 1b2:	59 f4       	brne	.+22     	; 0x1ca <switch_data+0x4c>
		schimbare_stare_led(&PORTB, PINB0, 0);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <schimbare_stare_led>
		send_data("LED OFF\n\r");
 1c0:	88 e7       	ldi	r24, 0x78	; 120
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
 1c8:	25 c0       	rjmp	.+74     	; 0x214 <switch_data+0x96>
	}
	else if(strcmp(data, "\rtimp") == 0)
 1ca:	62 e8       	ldi	r22, 0x82	; 130
 1cc:	71 e0       	ldi	r23, 0x01	; 1
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 08 02 	call	0x410	; 0x410 <strcmp>
 1d4:	89 2b       	or	r24, r25
 1d6:	19 f4       	brne	.+6      	; 0x1de <switch_data+0x60>
		afisare_timp();
 1d8:	0e 94 6d 00 	call	0xda	; 0xda <afisare_timp>
 1dc:	1b c0       	rjmp	.+54     	; 0x214 <switch_data+0x96>
		
	else if(strcmp(data, "\rclear") == 0)
 1de:	68 e8       	ldi	r22, 0x88	; 136
 1e0:	71 e0       	ldi	r23, 0x01	; 1
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 08 02 	call	0x410	; 0x410 <strcmp>
 1e8:	89 2b       	or	r24, r25
 1ea:	29 f4       	brne	.+10     	; 0x1f6 <switch_data+0x78>
		send_data(CLEAR);
 1ec:	8f e8       	ldi	r24, 0x8F	; 143
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
 1f4:	0f c0       	rjmp	.+30     	; 0x214 <switch_data+0x96>

	else{
		send_data("'");
 1f6:	82 e9       	ldi	r24, 0x92	; 146
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		send_data(data);
 1fe:	ce 01       	movw	r24, r28
 200:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		send_data("' ");
 204:	84 e9       	ldi	r24, 0x94	; 148
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
		send_data("nu este o comanda!\n\r");
 20c:	87 e9       	ldi	r24, 0x97	; 151
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
	}
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:

#include "USART.h"

int main(void)
{	
	init_devices();
 21a:	0e 94 28 01 	call	0x250	; 0x250 <init_devices>
	init_USART(MYUBRR);
 21e:	87 e6       	ldi	r24, 0x67	; 103
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 90 01 	call	0x320	; 0x320 <init_USART>
	
	send_data(CLEAR); //clear putty
 226:	8f e8       	ldi	r24, 0x8F	; 143
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 c0 01 	call	0x380	; 0x380 <send_data>
	//afisare_meniu();  //afisare lista comenzi
	//new_line();       //rand nou unde se poate introduce o comanda
	
	while(1) 
    {
		start_program();   
 22e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <start_program>
 232:	fd cf       	rjmp	.-6      	; 0x22e <main+0x14>

00000234 <init_timer>:

#include "timer.h"

void init_timer(){

	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
 234:	84 b5       	in	r24, 0x24	; 36
 236:	82 60       	ori	r24, 0x02	; 2
 238:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //pt 10ms
 23a:	89 ef       	ldi	r24, 0xF9	; 249
 23c:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
 23e:	85 b5       	in	r24, 0x25	; 37
 240:	83 60       	ori	r24, 0x03	; 3
 242:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 244:	ee e6       	ldi	r30, 0x6E	; 110
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <init_devices>:
}

void init_devices(){
	
	cli();
 250:	f8 94       	cli
	
	//init_porturi:
	DDRB = 0x03;
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 256:	15 b8       	out	0x05, r1	; 5
	
	init_timer();
 258:	0e 94 1a 01 	call	0x234	; 0x234 <init_timer>
	
	sei();
 25c:	78 94       	sei
 25e:	08 95       	ret

00000260 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
	
	cli();
 270:	f8 94       	cli
	
	contor++;
 272:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <contor>
 276:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <contor+0x1>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <contor+0x1>
 280:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <contor>
	
	if(contor >= 1000){
 284:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <contor>
 288:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <contor+0x1>
 28c:	88 3e       	cpi	r24, 0xE8	; 232
 28e:	93 40       	sbci	r25, 0x03	; 3
 290:	80 f0       	brcs	.+32     	; 0x2b2 <__vector_14+0x52>
		secunde++;
 292:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <secunde>
 296:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <secunde+0x1>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <secunde+0x1>
 2a0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <secunde>
		contor = 0;
 2a4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <contor+0x1>
 2a8:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <contor>
		flag_timer = 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
	}
	
	sei();
 2b2:	78 94       	sei
}
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <incrementare_minute>:

void incrementare_minute(){
	
	if(secunde >= 60){	//in ISR aveam 01:59 in loc de 01:00
 2c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <secunde>
 2c8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <secunde+0x1>
 2cc:	cc 97       	sbiw	r24, 0x3c	; 60
 2ce:	38 f1       	brcs	.+78     	; 0x31e <incrementare_minute+0x5a>
		secunde %= 60;
 2d0:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <secunde>
 2d4:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <secunde+0x1>
 2d8:	9a 01       	movw	r18, r20
 2da:	a9 e8       	ldi	r26, 0x89	; 137
 2dc:	b8 e8       	ldi	r27, 0x88	; 136
 2de:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__umulhisi3>
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	92 95       	swap	r25
 2e8:	82 95       	swap	r24
 2ea:	8f 70       	andi	r24, 0x0F	; 15
 2ec:	89 27       	eor	r24, r25
 2ee:	9f 70       	andi	r25, 0x0F	; 15
 2f0:	89 27       	eor	r24, r25
 2f2:	6c e3       	ldi	r22, 0x3C	; 60
 2f4:	68 9f       	mul	r22, r24
 2f6:	90 01       	movw	r18, r0
 2f8:	69 9f       	mul	r22, r25
 2fa:	30 0d       	add	r19, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	ca 01       	movw	r24, r20
 300:	82 1b       	sub	r24, r18
 302:	93 0b       	sbc	r25, r19
 304:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <secunde+0x1>
 308:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <secunde>
		minute++;
 30c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <minute>
 310:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <minute+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <minute+0x1>
 31a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <minute>
 31e:	08 95       	ret

00000320 <init_USART>:

#include "USART.h"

void init_USART(uint16_t ubrr)
{	
	UBRR0H = (unsigned char)(ubrr >> 8);
 320:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 324:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 328:	e1 ec       	ldi	r30, 0xC1	; 193
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 61       	ori	r24, 0x18	; 24
 330:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);//|(1 << TXCIE0)|(1 << UDRIE0);
 332:	80 81       	ld	r24, Z
 334:	80 68       	ori	r24, 0x80	; 128
 336:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 338:	e2 ec       	ldi	r30, 0xC2	; 194
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8e 60       	ori	r24, 0x0E	; 14
 340:	80 83       	st	Z, r24
	
	sei();
 342:	78 94       	sei
 344:	08 95       	ret

00000346 <transmit_data>:
}

void transmit_data(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));
 346:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 34a:	95 ff       	sbrs	r25, 5
 34c:	fc cf       	rjmp	.-8      	; 0x346 <transmit_data>
	
	UDR0 = data;
 34e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 352:	08 95       	ret

00000354 <receive_data>:
}

unsigned char receive_data(void)
{
	while (!(UCSR0A & (1<<RXC0)));
 354:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 358:	88 23       	and	r24, r24
 35a:	e4 f7       	brge	.-8      	; 0x354 <receive_data>

	return UDR0;
 35c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 360:	08 95       	ret

00000362 <__vector_18>:

ISR(USART_RX_vect) 
{
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	8f 93       	push	r24
	flag_rx = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <flag_rx>
}
 374:	8f 91       	pop	r24
 376:	0f 90       	pop	r0
 378:	0f be       	out	0x3f, r0	; 63
 37a:	0f 90       	pop	r0
 37c:	1f 90       	pop	r1
 37e:	18 95       	reti

00000380 <send_data>:

void send_data(char data[])
{	
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(data[i])
 38a:	03 c0       	rjmp	.+6      	; 0x392 <send_data+0x12>
	{
		transmit_data(data[i]);
 38c:	0e 94 a3 01 	call	0x346	; 0x346 <transmit_data>
		i++;
 390:	cf 5f       	subi	r28, 0xFF	; 255

void send_data(char data[])
{	
	uint8_t i = 0;
	
	while(data[i])
 392:	f8 01       	movw	r30, r16
 394:	ec 0f       	add	r30, r28
 396:	f1 1d       	adc	r31, r1
 398:	80 81       	ld	r24, Z
 39a:	81 11       	cpse	r24, r1
 39c:	f7 cf       	rjmp	.-18     	; 0x38c <send_data+0xc>
	{
		transmit_data(data[i]);
		i++;
	}
}
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <read_data>:

void read_data(char data[])
{	
 3a6:	0f 93       	push	r16
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	8c 01       	movw	r16, r24
	char mesaj_primit;
	uint8_t i = 0;
 3ae:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (i < (MAX_LENGTH - 1))
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <read_data+0x1e>
	{	
		mesaj_primit = receive_data();		
 3b2:	0e 94 aa 01 	call	0x354	; 0x354 <receive_data>
		
		if(mesaj_primit != '\n')
 3b6:	8a 30       	cpi	r24, 0x0A	; 10
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <read_data+0x22>
		{
			data[i] = mesaj_primit;
 3ba:	f8 01       	movw	r30, r16
 3bc:	ec 0f       	add	r30, r28
 3be:	f1 1d       	adc	r31, r1
 3c0:	80 83       	st	Z, r24
			i++;
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
void read_data(char data[])
{	
	char mesaj_primit;
	uint8_t i = 0;
	
	while (i < (MAX_LENGTH - 1))
 3c4:	c1 33       	cpi	r28, 0x31	; 49
 3c6:	a8 f3       	brcs	.-22     	; 0x3b2 <read_data+0xc>
		else{
			break;
		}
	}
	
	data[i] = '\0'; //caracter final
 3c8:	f8 01       	movw	r30, r16
 3ca:	ec 0f       	add	r30, r28
 3cc:	f1 1d       	adc	r31, r1
 3ce:	10 82       	st	Z, r1
}
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <start_program>:

void start_program()
{
	if(flag_rx == 1)
 3d8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <flag_rx>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	41 f4       	brne	.+16     	; 0x3f0 <start_program+0x18>
	{
		read_data(mesaj);
 3e0:	88 ec       	ldi	r24, 0xC8	; 200
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <read_data>
		switch_data(mesaj);
 3e8:	88 ec       	ldi	r24, 0xC8	; 200
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 bf 00 	call	0x17e	; 0x17e <switch_data>
 3f0:	08 95       	ret

000003f2 <__umulhisi3>:
 3f2:	a2 9f       	mul	r26, r18
 3f4:	b0 01       	movw	r22, r0
 3f6:	b3 9f       	mul	r27, r19
 3f8:	c0 01       	movw	r24, r0
 3fa:	a3 9f       	mul	r26, r19
 3fc:	70 0d       	add	r23, r0
 3fe:	81 1d       	adc	r24, r1
 400:	11 24       	eor	r1, r1
 402:	91 1d       	adc	r25, r1
 404:	b2 9f       	mul	r27, r18
 406:	70 0d       	add	r23, r0
 408:	81 1d       	adc	r24, r1
 40a:	11 24       	eor	r1, r1
 40c:	91 1d       	adc	r25, r1
 40e:	08 95       	ret

00000410 <strcmp>:
 410:	fb 01       	movw	r30, r22
 412:	dc 01       	movw	r26, r24
 414:	8d 91       	ld	r24, X+
 416:	01 90       	ld	r0, Z+
 418:	80 19       	sub	r24, r0
 41a:	01 10       	cpse	r0, r1
 41c:	d9 f3       	breq	.-10     	; 0x414 <strcmp+0x4>
 41e:	99 0b       	sbc	r25, r25
 420:	08 95       	ret

00000422 <__itoa_ncheck>:
 422:	bb 27       	eor	r27, r27
 424:	4a 30       	cpi	r20, 0x0A	; 10
 426:	31 f4       	brne	.+12     	; 0x434 <__itoa_ncheck+0x12>
 428:	99 23       	and	r25, r25
 42a:	22 f4       	brpl	.+8      	; 0x434 <__itoa_ncheck+0x12>
 42c:	bd e2       	ldi	r27, 0x2D	; 45
 42e:	90 95       	com	r25
 430:	81 95       	neg	r24
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__utoa_common>

00000438 <__utoa_ncheck>:
 438:	bb 27       	eor	r27, r27

0000043a <__utoa_common>:
 43a:	fb 01       	movw	r30, r22
 43c:	55 27       	eor	r21, r21
 43e:	aa 27       	eor	r26, r26
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	aa 1f       	adc	r26, r26
 446:	a4 17       	cp	r26, r20
 448:	10 f0       	brcs	.+4      	; 0x44e <__utoa_common+0x14>
 44a:	a4 1b       	sub	r26, r20
 44c:	83 95       	inc	r24
 44e:	50 51       	subi	r21, 0x10	; 16
 450:	b9 f7       	brne	.-18     	; 0x440 <__utoa_common+0x6>
 452:	a0 5d       	subi	r26, 0xD0	; 208
 454:	aa 33       	cpi	r26, 0x3A	; 58
 456:	08 f0       	brcs	.+2      	; 0x45a <__utoa_common+0x20>
 458:	a9 5d       	subi	r26, 0xD9	; 217
 45a:	a1 93       	st	Z+, r26
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	79 f7       	brne	.-34     	; 0x43e <__utoa_common+0x4>
 460:	b1 11       	cpse	r27, r1
 462:	b1 93       	st	Z+, r27
 464:	11 92       	st	Z+, r1
 466:	cb 01       	movw	r24, r22
 468:	0c 94 36 02 	jmp	0x46c	; 0x46c <strrev>

0000046c <strrev>:
 46c:	dc 01       	movw	r26, r24
 46e:	fc 01       	movw	r30, r24
 470:	67 2f       	mov	r22, r23
 472:	71 91       	ld	r23, Z+
 474:	77 23       	and	r23, r23
 476:	e1 f7       	brne	.-8      	; 0x470 <strrev+0x4>
 478:	32 97       	sbiw	r30, 0x02	; 2
 47a:	04 c0       	rjmp	.+8      	; 0x484 <strrev+0x18>
 47c:	7c 91       	ld	r23, X
 47e:	6d 93       	st	X+, r22
 480:	70 83       	st	Z, r23
 482:	62 91       	ld	r22, -Z
 484:	ae 17       	cp	r26, r30
 486:	bf 07       	cpc	r27, r31
 488:	c8 f3       	brcs	.-14     	; 0x47c <strrev+0x10>
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
