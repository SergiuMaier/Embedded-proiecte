
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abc  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051e  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_1>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 42 01 	call	0x284	; 0x284 <main>
  88:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinSet>:
int contor_on = 0;		//contor pentru masurarea duratei de timp in care LED-urile sunt aprinse
int secunde = 0;

void pinSet(volatile uint8_t *port, uint8_t pin){
	
	*port |=  1 << pin;
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <pinSet+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <pinSet+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  a8:	fc 01       	movw	r30, r24
	
	*port &=  ~(1 << pin);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pinReset+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <pinReset+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <led_on>:
}

void led_on(){			

	if(flag_on == 1)
  c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_on>
  c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag_on+0x1>
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	e1 f4       	brne	.+56     	; 0x106 <led_on+0x44>
	{			
		start_timer0();  //prescalar 64
  ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <start_timer0>
		pinSet(&PORTB, PINB2);
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	85 e2       	ldi	r24, 0x25	; 37
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		pinSet(&PORTB, PINB3);
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		
		if(secunde % 2 == 0)			//test timer
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	80 fd       	sbrc	r24, 0
  ec:	06 c0       	rjmp	.+12     	; 0xfa <led_on+0x38>
			pinReset(&PORTB, PINB0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
  f8:	12 c0       	rjmp	.+36     	; 0x11e <led_on+0x5c>
		else
			pinSet(&PORTB, PINB0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	85 e2       	ldi	r24, 0x25	; 37
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
 104:	0c c0       	rjmp	.+24     	; 0x11e <led_on+0x5c>
	}
	else
	{
		stop_timer0();
 106:	0e 94 56 01 	call	0x2ac	; 0x2ac <stop_timer0>
		pinReset(&PORTB, PINB2);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
		pinReset(&PORTB, PINB3);
 114:	63 e0       	ldi	r22, 0x03	; 3
 116:	85 e2       	ldi	r24, 0x25	; 37
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
	}
	
	if((secunde - contor_on) >= TIMP_LEDS_ON){
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <contor_on>
 12a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <contor_on+0x1>
 12e:	82 1b       	sub	r24, r18
 130:	93 0b       	sbc	r25, r19
 132:	06 97       	sbiw	r24, 0x06	; 6
 134:	6c f0       	brlt	.+26     	; 0x150 <led_on+0x8e>
		pinReset(&PORTB, PINB0);  //LED vf timer
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	85 e2       	ldi	r24, 0x25	; 37
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
		secunde = 0;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		flag_on = 0;
 148:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_on+0x1>
 14c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_on>
 150:	08 95       	ret

00000152 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){  //pt caz general
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	
	cli();
 174:	f8 94       	cli
	
	contor_secunde++;
 176:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <contor_secunde>
 17a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <contor_secunde+0x1>
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <contor_secunde+0x1>
 186:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <contor_secunde>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){
 18a:	07 2e       	mov	r0, r23
 18c:	00 0c       	add	r0, r0
 18e:	88 0b       	sbc	r24, r24
 190:	99 0b       	sbc	r25, r25
 192:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__floatsisf>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	3f ef       	ldi	r19, 0xFF	; 255
 19a:	49 e7       	ldi	r20, 0x79	; 121
 19c:	54 e4       	ldi	r21, 0x44	; 68
 19e:	0e 94 97 01 	call	0x32e	; 0x32e <__gesf2>
 1a2:	88 23       	and	r24, r24
 1a4:	6c f0       	brlt	.+26     	; 0x1c0 <__vector_14+0x6e>
		secunde++;
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		contor_secunde = 0;
 1b8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <contor_secunde+0x1>
 1bc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contor_secunde>
	}
	
	sei();
 1c0:	78 94       	sei
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_1>:

ISR(INT0_vect){ //pt butonul de on
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
	
	cli();
 1f2:	f8 94       	cli
	
	flag_on = 1;		 //LED-uri on
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flag_on+0x1>
 1fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_on>
	contor_on = secunde; //determinarea timpului la care a fost apasat butonul
 200:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 204:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 208:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_on+0x1>
 20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_on>
	
	sei();
 210:	78 94       	sei
}
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_2>:

ISR(INT1_vect){ //pt butonul de off
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
	
	cli();
 22a:	f8 94       	cli
	
	flag_on = 0; //LED-uri off
 22c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_on+0x1>
 230:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_on>
	
	sei();
 234:	78 94       	sei
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRB = 0x0F;   //00001111
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 244:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	8c 60       	ori	r24, 0x0C	; 12
 24a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	8c 60       	ori	r24, 0x0C	; 12
 250:	8b b9       	out	0x0b, r24	; 11
 252:	08 95       	ret

00000254 <interrupt_init>:
}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 254:	e9 e6       	ldi	r30, 0x69	; 105
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	8f 60       	ori	r24, 0x0F	; 15
 25c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 25e:	8d b3       	in	r24, 0x1d	; 29
 260:	83 60       	ori	r24, 0x03	; 3
 262:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 264:	8c b3       	in	r24, 0x1c	; 28
 266:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 268:	e8 e6       	ldi	r30, 0x68	; 104
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret

00000272 <init_devices>:
}

void init_devices(void){
	
	cli();
 272:	f8 94       	cli
	
	port_init();
 274:	0e 94 20 01 	call	0x240	; 0x240 <port_init>
	interrupt_init();
 278:	0e 94 2a 01 	call	0x254	; 0x254 <interrupt_init>
	timer0_init();
 27c:	0e 94 47 01 	call	0x28e	; 0x28e <timer0_init>
	
	sei();
 280:	78 94       	sei
 282:	08 95       	ret

00000284 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 284:	0e 94 39 01 	call	0x272	; 0x272 <init_devices>
					      
	do
	{
		led_on();	
 288:	0e 94 61 00 	call	0xc2	; 0xc2 <led_on>
 28c:	fd cf       	rjmp	.-6      	; 0x288 <main+0x4>

0000028e <timer0_init>:
 */ 
#include "timer0_func_def.h"

void timer0_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //modul CTC
 28e:	84 b5       	in	r24, 0x24	; 36
 290:	82 60       	ori	r24, 0x02	; 2
 292:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	87 bd       	out	0x27, r24	; 39
	//OCR0A = 155;
	TIMSK0 |= (1 << OCIE0A);
 298:	ee e6       	ldi	r30, 0x6E	; 110
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	82 60       	ori	r24, 0x02	; 2
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret

000002a4 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= START_TIMER0;
 2a4:	85 b5       	in	r24, 0x25	; 37
 2a6:	83 60       	ori	r24, 0x03	; 3
 2a8:	85 bd       	out	0x25, r24	; 37
 2aa:	08 95       	ret

000002ac <stop_timer0>:
}

void stop_timer0(){
	TCCR0B &= STOP_TIMER0;
 2ac:	85 b5       	in	r24, 0x25	; 37
 2ae:	88 7f       	andi	r24, 0xF8	; 248
 2b0:	85 bd       	out	0x25, r24	; 37
 2b2:	08 95       	ret

000002b4 <__floatunsisf>:
 2b4:	e8 94       	clt
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <__floatsisf+0x12>

000002b8 <__floatsisf>:
 2b8:	97 fb       	bst	r25, 7
 2ba:	3e f4       	brtc	.+14     	; 0x2ca <__floatsisf+0x12>
 2bc:	90 95       	com	r25
 2be:	80 95       	com	r24
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	99 23       	and	r25, r25
 2cc:	a9 f0       	breq	.+42     	; 0x2f8 <__floatsisf+0x40>
 2ce:	f9 2f       	mov	r31, r25
 2d0:	96 e9       	ldi	r25, 0x96	; 150
 2d2:	bb 27       	eor	r27, r27
 2d4:	93 95       	inc	r25
 2d6:	f6 95       	lsr	r31
 2d8:	87 95       	ror	r24
 2da:	77 95       	ror	r23
 2dc:	67 95       	ror	r22
 2de:	b7 95       	ror	r27
 2e0:	f1 11       	cpse	r31, r1
 2e2:	f8 cf       	rjmp	.-16     	; 0x2d4 <__floatsisf+0x1c>
 2e4:	fa f4       	brpl	.+62     	; 0x324 <__floatsisf+0x6c>
 2e6:	bb 0f       	add	r27, r27
 2e8:	11 f4       	brne	.+4      	; 0x2ee <__floatsisf+0x36>
 2ea:	60 ff       	sbrs	r22, 0
 2ec:	1b c0       	rjmp	.+54     	; 0x324 <__floatsisf+0x6c>
 2ee:	6f 5f       	subi	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	8f 4f       	sbci	r24, 0xFF	; 255
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	16 c0       	rjmp	.+44     	; 0x324 <__floatsisf+0x6c>
 2f8:	88 23       	and	r24, r24
 2fa:	11 f0       	breq	.+4      	; 0x300 <__floatsisf+0x48>
 2fc:	96 e9       	ldi	r25, 0x96	; 150
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <__floatsisf+0x6a>
 300:	77 23       	and	r23, r23
 302:	21 f0       	breq	.+8      	; 0x30c <__floatsisf+0x54>
 304:	9e e8       	ldi	r25, 0x8E	; 142
 306:	87 2f       	mov	r24, r23
 308:	76 2f       	mov	r23, r22
 30a:	05 c0       	rjmp	.+10     	; 0x316 <__floatsisf+0x5e>
 30c:	66 23       	and	r22, r22
 30e:	71 f0       	breq	.+28     	; 0x32c <__floatsisf+0x74>
 310:	96 e8       	ldi	r25, 0x86	; 134
 312:	86 2f       	mov	r24, r22
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	2a f0       	brmi	.+10     	; 0x324 <__floatsisf+0x6c>
 31a:	9a 95       	dec	r25
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	88 1f       	adc	r24, r24
 322:	da f7       	brpl	.-10     	; 0x31a <__floatsisf+0x62>
 324:	88 0f       	add	r24, r24
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	97 f9       	bld	r25, 7
 32c:	08 95       	ret

0000032e <__gesf2>:
 32e:	0e 94 9c 01 	call	0x338	; 0x338 <__fp_cmp>
 332:	08 f4       	brcc	.+2      	; 0x336 <__gesf2+0x8>
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	08 95       	ret

00000338 <__fp_cmp>:
 338:	99 0f       	add	r25, r25
 33a:	00 08       	sbc	r0, r0
 33c:	55 0f       	add	r21, r21
 33e:	aa 0b       	sbc	r26, r26
 340:	e0 e8       	ldi	r30, 0x80	; 128
 342:	fe ef       	ldi	r31, 0xFE	; 254
 344:	16 16       	cp	r1, r22
 346:	17 06       	cpc	r1, r23
 348:	e8 07       	cpc	r30, r24
 34a:	f9 07       	cpc	r31, r25
 34c:	c0 f0       	brcs	.+48     	; 0x37e <__fp_cmp+0x46>
 34e:	12 16       	cp	r1, r18
 350:	13 06       	cpc	r1, r19
 352:	e4 07       	cpc	r30, r20
 354:	f5 07       	cpc	r31, r21
 356:	98 f0       	brcs	.+38     	; 0x37e <__fp_cmp+0x46>
 358:	62 1b       	sub	r22, r18
 35a:	73 0b       	sbc	r23, r19
 35c:	84 0b       	sbc	r24, r20
 35e:	95 0b       	sbc	r25, r21
 360:	39 f4       	brne	.+14     	; 0x370 <__fp_cmp+0x38>
 362:	0a 26       	eor	r0, r26
 364:	61 f0       	breq	.+24     	; 0x37e <__fp_cmp+0x46>
 366:	23 2b       	or	r18, r19
 368:	24 2b       	or	r18, r20
 36a:	25 2b       	or	r18, r21
 36c:	21 f4       	brne	.+8      	; 0x376 <__fp_cmp+0x3e>
 36e:	08 95       	ret
 370:	0a 26       	eor	r0, r26
 372:	09 f4       	brne	.+2      	; 0x376 <__fp_cmp+0x3e>
 374:	a1 40       	sbci	r26, 0x01	; 1
 376:	a6 95       	lsr	r26
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	81 1d       	adc	r24, r1
 37c:	81 1d       	adc	r24, r1
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
