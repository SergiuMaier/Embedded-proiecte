
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000412  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800100  00800100  00000486  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de9  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092e  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060d  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  0000230c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054a  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 34       	cpi	r26, 0x4D	; 77
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  88:	0c 94 07 02 	jmp	0x40e	; 0x40e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pin_toggle_led0>:
	timere[index].counter_initial = 0;
}

void reset_timer(){
	
	reset_timer_dorit(4);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	85 b9       	out	0x05, r24	; 5
  98:	08 95       	ret

0000009a <pin_toggle_led2>:
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	89 27       	eor	r24, r25
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <pin_toggle_led3>:
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <update_timer_dorit>:
}

void update_timer_dorit(uint8_t index){
	
	timere[index].stare = PORNIT;
  ae:	2d e0       	ldi	r18, 0x0D	; 13
  b0:	82 9f       	mul	r24, r18
  b2:	c0 01       	movw	r24, r0
  b4:	11 24       	eor	r1, r1
  b6:	fc 01       	movw	r30, r24
  b8:	ea 5f       	subi	r30, 0xFA	; 250
  ba:	fe 4f       	sbci	r31, 0xFE	; 254
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	81 83       	std	Z+1, r24	; 0x01
	timere[index].autoreset = FALSE;
  c0:	12 82       	std	Z+2, r1	; 0x02
  c2:	08 95       	ret

000000c4 <update_timer>:
}

void update_timer(){
	
	update_timer_dorit(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 57 00 	call	0xae	; 0xae <update_timer_dorit>
  ca:	08 95       	ret

000000cc <creeaza_timer>:
}

void creeaza_timer(uint8_t index, uint8_t var_stare, uint8_t var_autoreset, uint32_t val_initiala, uint32_t perioada, void (*pfct)(void)){
  cc:	af 92       	push	r10
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	2d 97       	sbiw	r28, 0x0d	; 13
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	
	struct timer t;
	
	t.id = index;                         //variabila pentru a tine evidenta timerelor utilizate 
  f0:	89 83       	std	Y+1, r24	; 0x01
	t.stare = var_stare;                  //stabilirea starii timerului (OPRIT, PORNIT, EXPIRAT)
  f2:	6a 83       	std	Y+2, r22	; 0x02
	t.autoreset = var_autoreset;          //stabilire daca timerul este one-shot (FALSE) sau cu autoreset (TRUE)
  f4:	4b 83       	std	Y+3, r20	; 0x03
	t.counter_initial = val_initiala;     //variabila pentru valoarea initiala de la care porneste cronometrarea 
  f6:	0c 83       	std	Y+4, r16	; 0x04
  f8:	1d 83       	std	Y+5, r17	; 0x05
  fa:	2e 83       	std	Y+6, r18	; 0x06
  fc:	3f 83       	std	Y+7, r19	; 0x07
	t.perioada = perioada;                //valoarea la care timerul expira
  fe:	c8 86       	std	Y+8, r12	; 0x08
 100:	d9 86       	std	Y+9, r13	; 0x09
 102:	ea 86       	std	Y+10, r14	; 0x0a
 104:	fb 86       	std	Y+11, r15	; 0x0b
	t.callback_fct = pfct;                //functia care este apelata dupa expirarea timerului
 106:	bd 86       	std	Y+13, r11	; 0x0d
 108:	ac 86       	std	Y+12, r10	; 0x0c
	
	timere[index] = t;
 10a:	9d e0       	ldi	r25, 0x0D	; 13
 10c:	89 9f       	mul	r24, r25
 10e:	d0 01       	movw	r26, r0
 110:	11 24       	eor	r1, r1
 112:	aa 5f       	subi	r26, 0xFA	; 250
 114:	be 4f       	sbci	r27, 0xFE	; 254
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	fe 01       	movw	r30, r28
 11a:	31 96       	adiw	r30, 0x01	; 1
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	8a 95       	dec	r24
 122:	e1 f7       	brne	.-8      	; 0x11c <creeaza_timer+0x50>
	
	counter_timere_create++;              //numarul timerelor create initial	
 124:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <counter_timere_create>
 128:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <counter_timere_create+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <counter_timere_create+0x1>
 132:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <counter_timere_create>
}
 136:	2d 96       	adiw	r28, 0x0d	; 13
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	df 90       	pop	r13
 150:	cf 90       	pop	r12
 152:	bf 90       	pop	r11
 154:	af 90       	pop	r10
 156:	08 95       	ret

00000158 <evalueaza_timer>:

void evalueaza_timer(){ 
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
	
	if((counter_timere_create != 0) && (counter_timp == 1))  //conditie pentru a verifica daca exista timere create si are loc intreruperea
 15c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <counter_timere_create>
 160:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <counter_timere_create+0x1>
 164:	89 2b       	or	r24, r25
 166:	09 f4       	brne	.+2      	; 0x16a <evalueaza_timer+0x12>
 168:	84 c0       	rjmp	.+264    	; 0x272 <evalueaza_timer+0x11a>
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <evalueaza_timer+0x20>
 176:	7d c0       	rjmp	.+250    	; 0x272 <evalueaza_timer+0x11a>
	{	
		for(index_timer = 0; index_timer <= counter_timere_create; index_timer++)   
 178:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <index_timer+0x1>
 17c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <index_timer>
 180:	6c c0       	rjmp	.+216    	; 0x25a <evalueaza_timer+0x102>
		{		
			if(timere[index_timer].stare == PORNIT)
 182:	2d e0       	ldi	r18, 0x0D	; 13
 184:	28 9f       	mul	r18, r24
 186:	f0 01       	movw	r30, r0
 188:	29 9f       	mul	r18, r25
 18a:	f0 0d       	add	r31, r0
 18c:	11 24       	eor	r1, r1
 18e:	ea 5f       	subi	r30, 0xFA	; 250
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	21 81       	ldd	r18, Z+1	; 0x01
 194:	21 30       	cpi	r18, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <evalueaza_timer+0x42>
 198:	57 c0       	rjmp	.+174    	; 0x248 <evalueaza_timer+0xf0>
			{	
				timere[index_timer].counter_initial++;           //incrementare contor initial (= sys_tick)
 19a:	2d e0       	ldi	r18, 0x0D	; 13
 19c:	28 9f       	mul	r18, r24
 19e:	f0 01       	movw	r30, r0
 1a0:	29 9f       	mul	r18, r25
 1a2:	f0 0d       	add	r31, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	ea 5f       	subi	r30, 0xFA	; 250
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	43 81       	ldd	r20, Z+3	; 0x03
 1ac:	54 81       	ldd	r21, Z+4	; 0x04
 1ae:	65 81       	ldd	r22, Z+5	; 0x05
 1b0:	76 81       	ldd	r23, Z+6	; 0x06
 1b2:	4f 5f       	subi	r20, 0xFF	; 255
 1b4:	5f 4f       	sbci	r21, 0xFF	; 255
 1b6:	6f 4f       	sbci	r22, 0xFF	; 255
 1b8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ba:	43 83       	std	Z+3, r20	; 0x03
 1bc:	54 83       	std	Z+4, r21	; 0x04
 1be:	65 83       	std	Z+5, r22	; 0x05
 1c0:	76 83       	std	Z+6, r23	; 0x06
				
				if(timere[index_timer].counter_initial == timere[index_timer].perioada)  //timer EXPIRAT
 1c2:	07 81       	ldd	r16, Z+7	; 0x07
 1c4:	10 85       	ldd	r17, Z+8	; 0x08
 1c6:	21 85       	ldd	r18, Z+9	; 0x09
 1c8:	32 85       	ldd	r19, Z+10	; 0x0a
 1ca:	40 17       	cp	r20, r16
 1cc:	51 07       	cpc	r21, r17
 1ce:	62 07       	cpc	r22, r18
 1d0:	73 07       	cpc	r23, r19
 1d2:	d1 f5       	brne	.+116    	; 0x248 <evalueaza_timer+0xf0>
				{    
					timere[index_timer].callback_fct();
 1d4:	1d e0       	ldi	r17, 0x0D	; 13
 1d6:	18 9f       	mul	r17, r24
 1d8:	f0 01       	movw	r30, r0
 1da:	19 9f       	mul	r17, r25
 1dc:	f0 0d       	add	r31, r0
 1de:	11 24       	eor	r1, r1
 1e0:	ea 5f       	subi	r30, 0xFA	; 250
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	03 84       	ldd	r0, Z+11	; 0x0b
 1e6:	f4 85       	ldd	r31, Z+12	; 0x0c
 1e8:	e0 2d       	mov	r30, r0
 1ea:	09 95       	icall
					 
					//timere[id_timer].stare = EXPIRAT;          //timerul trece din pornit -> expirat dupa ce a expirat perioada
				
					if(timere[index_timer].autoreset == TRUE)    //verificare daca timerul este one shot
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <index_timer>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <index_timer+0x1>
 1f4:	18 9f       	mul	r17, r24
 1f6:	f0 01       	movw	r30, r0
 1f8:	19 9f       	mul	r17, r25
 1fa:	f0 0d       	add	r31, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	ea 5f       	subi	r30, 0xFA	; 250
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	22 81       	ldd	r18, Z+2	; 0x02
 204:	21 30       	cpi	r18, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <evalueaza_timer+0xc6>
						timere[index_timer].stare = PORNIT;      //schimbare stare timer
 208:	2d e0       	ldi	r18, 0x0D	; 13
 20a:	28 9f       	mul	r18, r24
 20c:	f0 01       	movw	r30, r0
 20e:	29 9f       	mul	r18, r25
 210:	f0 0d       	add	r31, r0
 212:	11 24       	eor	r1, r1
 214:	ea 5f       	subi	r30, 0xFA	; 250
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	21 83       	std	Z+1, r18	; 0x01
 21c:	09 c0       	rjmp	.+18     	; 0x230 <evalueaza_timer+0xd8>
					else
						timere[index_timer].stare = OPRIT;
 21e:	2d e0       	ldi	r18, 0x0D	; 13
 220:	28 9f       	mul	r18, r24
 222:	f0 01       	movw	r30, r0
 224:	29 9f       	mul	r18, r25
 226:	f0 0d       	add	r31, r0
 228:	11 24       	eor	r1, r1
 22a:	ea 5f       	subi	r30, 0xFA	; 250
 22c:	fe 4f       	sbci	r31, 0xFE	; 254
 22e:	11 82       	std	Z+1, r1	; 0x01
					
					timere[index_timer].counter_initial = 0;     //resetare contor initial	
 230:	2d e0       	ldi	r18, 0x0D	; 13
 232:	28 9f       	mul	r18, r24
 234:	f0 01       	movw	r30, r0
 236:	29 9f       	mul	r18, r25
 238:	f0 0d       	add	r31, r0
 23a:	11 24       	eor	r1, r1
 23c:	ea 5f       	subi	r30, 0xFA	; 250
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	13 82       	std	Z+3, r1	; 0x03
 242:	14 82       	std	Z+4, r1	; 0x04
 244:	15 82       	std	Z+5, r1	; 0x05
 246:	16 82       	std	Z+6, r1	; 0x06

void evalueaza_timer(){ 
	
	if((counter_timere_create != 0) && (counter_timp == 1))  //conditie pentru a verifica daca exista timere create si are loc intreruperea
	{	
		for(index_timer = 0; index_timer <= counter_timere_create; index_timer++)   
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <index_timer>
 24c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <index_timer+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <index_timer+0x1>
 256:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <index_timer>
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <index_timer>
 25e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <index_timer+0x1>
 262:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <counter_timere_create>
 266:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <counter_timere_create+0x1>
 26a:	28 17       	cp	r18, r24
 26c:	39 07       	cpc	r19, r25
 26e:	0c f0       	brlt	.+2      	; 0x272 <evalueaza_timer+0x11a>
 270:	88 cf       	rjmp	.-240    	; 0x182 <evalueaza_timer+0x2a>
					timere[index_timer].counter_initial = 0;     //resetare contor initial	
				}
			}
		}
	} 
}
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	08 95       	ret

00000278 <__vector_14>:

ISR(TIMER0_COMPA_vect){ 
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
	
	cli();
 28a:	f8 94       	cli
	
	sys_tick++;
 28c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <sys_tick>
 290:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <sys_tick+0x1>
 294:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <sys_tick+0x2>
 298:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <sys_tick+0x3>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	a1 1d       	adc	r26, r1
 2a0:	b1 1d       	adc	r27, r1
 2a2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sys_tick>
 2a6:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sys_tick+0x1>
 2aa:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <sys_tick+0x2>
 2ae:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <sys_tick+0x3>
	flag = 1;     
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag+0x1>
 2ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
	counter_timp = 1;
 2be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	sei();
 2c6:	78 94       	sei
}
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRB = 0x0F;                          //00001111
 2da:	8f e0       	ldi	r24, 0x0F	; 15
 2dc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 2de:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
 2e0:	8a b1       	in	r24, 0x0a	; 10
 2e2:	8c 60       	ori	r24, 0x0C	; 12
 2e4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
 2e6:	8b b1       	in	r24, 0x0b	; 11
 2e8:	8c 60       	ori	r24, 0x0C	; 12
 2ea:	8b b9       	out	0x0b, r24	; 11
 2ec:	08 95       	ret

000002ee <interrupt_init>:
}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 2ee:	e9 e6       	ldi	r30, 0x69	; 105
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 60       	ori	r24, 0x0F	; 15
 2f6:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 2f8:	8d b3       	in	r24, 0x1d	; 29
 2fa:	83 60       	ori	r24, 0x03	; 3
 2fc:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 2fe:	8c b3       	in	r24, 0x1c	; 28
 300:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 302:	e8 e6       	ldi	r30, 0x68	; 104
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	80 83       	st	Z, r24
 30a:	08 95       	ret

0000030c <init_devices>:
}

void init_devices(void){
	
	cli();
 30c:	f8 94       	cli
	
	port_init();
 30e:	0e 94 6d 01 	call	0x2da	; 0x2da <port_init>
	interrupt_init();
 312:	0e 94 77 01 	call	0x2ee	; 0x2ee <interrupt_init>
	timer0_init();
 316:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <timer0_init>
	
	sei();
 31a:	78 94       	sei
 31c:	08 95       	ret

0000031e <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 31e:	0e 94 86 01 	call	0x30c	; 0x30c <init_devices>
	start_timer0(); 
 322:	0e 94 03 02 	call	0x406	; 0x406 <start_timer0>
               
			   //(ID, STARE, AUTORESET, VAL INI, PERIOADA, FUNCTIE)
	creeaza_timer(0, PORNIT, TRUE, 0, 2000, pin_toggle_led0);
 326:	0f 2e       	mov	r0, r31
 328:	f8 e4       	ldi	r31, 0x48	; 72
 32a:	af 2e       	mov	r10, r31
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	bf 2e       	mov	r11, r31
 330:	f0 2d       	mov	r31, r0
 332:	0f 2e       	mov	r0, r31
 334:	f0 ed       	ldi	r31, 0xD0	; 208
 336:	cf 2e       	mov	r12, r31
 338:	f7 e0       	ldi	r31, 0x07	; 7
 33a:	df 2e       	mov	r13, r31
 33c:	e1 2c       	mov	r14, r1
 33e:	f1 2c       	mov	r15, r1
 340:	f0 2d       	mov	r31, r0
 342:	00 e0       	ldi	r16, 0x00	; 0
 344:	10 e0       	ldi	r17, 0x00	; 0
 346:	98 01       	movw	r18, r16
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 66 00 	call	0xcc	; 0xcc <creeaza_timer>
	creeaza_timer(1, PORNIT, TRUE, 0, 10000, update_timer);   //update timer 2
 352:	0f 2e       	mov	r0, r31
 354:	f2 e6       	ldi	r31, 0x62	; 98
 356:	af 2e       	mov	r10, r31
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	bf 2e       	mov	r11, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	0f 2e       	mov	r0, r31
 360:	f0 e1       	ldi	r31, 0x10	; 16
 362:	cf 2e       	mov	r12, r31
 364:	f7 e2       	ldi	r31, 0x27	; 39
 366:	df 2e       	mov	r13, r31
 368:	e1 2c       	mov	r14, r1
 36a:	f1 2c       	mov	r15, r1
 36c:	f0 2d       	mov	r31, r0
 36e:	00 e0       	ldi	r16, 0x00	; 0
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	98 01       	movw	r18, r16
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 66 00 	call	0xcc	; 0xcc <creeaza_timer>
	creeaza_timer(2, PORNIT, TRUE, 0, 5000, pin_toggle_led2);     //reset timer 4
 37e:	0f 2e       	mov	r0, r31
 380:	fd e4       	ldi	r31, 0x4D	; 77
 382:	af 2e       	mov	r10, r31
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	bf 2e       	mov	r11, r31
 388:	f0 2d       	mov	r31, r0
 38a:	0f 2e       	mov	r0, r31
 38c:	f8 e8       	ldi	r31, 0x88	; 136
 38e:	cf 2e       	mov	r12, r31
 390:	f3 e1       	ldi	r31, 0x13	; 19
 392:	df 2e       	mov	r13, r31
 394:	e1 2c       	mov	r14, r1
 396:	f1 2c       	mov	r15, r1
 398:	f0 2d       	mov	r31, r0
 39a:	00 e0       	ldi	r16, 0x00	; 0
 39c:	10 e0       	ldi	r17, 0x00	; 0
 39e:	98 01       	movw	r18, r16
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 66 00 	call	0xcc	; 0xcc <creeaza_timer>
	creeaza_timer(3, PORNIT, TRUE, 0, 3000, pin_toggle_led3);
 3aa:	0f 2e       	mov	r0, r31
 3ac:	f2 e5       	ldi	r31, 0x52	; 82
 3ae:	af 2e       	mov	r10, r31
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	bf 2e       	mov	r11, r31
 3b4:	f0 2d       	mov	r31, r0
 3b6:	0f 2e       	mov	r0, r31
 3b8:	f8 eb       	ldi	r31, 0xB8	; 184
 3ba:	cf 2e       	mov	r12, r31
 3bc:	fb e0       	ldi	r31, 0x0B	; 11
 3be:	df 2e       	mov	r13, r31
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
 3c4:	f0 2d       	mov	r31, r0
 3c6:	00 e0       	ldi	r16, 0x00	; 0
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	98 01       	movw	r18, r16
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 66 00 	call	0xcc	; 0xcc <creeaza_timer>

	do
	{	
		if(flag == 1)
 3d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
 3da:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	d1 f7       	brne	.-12     	; 0x3d6 <main+0xb8>
		{
			flag = 0;
 3e2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 3e6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
			evalueaza_timer();	
 3ea:	0e 94 ac 00 	call	0x158	; 0x158 <evalueaza_timer>
 3ee:	f3 cf       	rjmp	.-26     	; 0x3d6 <main+0xb8>

000003f0 <timer0_init>:
 */ 
#include "timer0_def.h"

void timer0_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //modul CTC
 3f0:	84 b5       	in	r24, 0x24	; 36
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;
 3f6:	89 ef       	ldi	r24, 0xF9	; 249
 3f8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 3fa:	ee e6       	ldi	r30, 0x6E	; 110
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	82 60       	ori	r24, 0x02	; 2
 402:	80 83       	st	Z, r24
 404:	08 95       	ret

00000406 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= START_TIMER0;
 406:	85 b5       	in	r24, 0x25	; 37
 408:	83 60       	ori	r24, 0x03	; 3
 40a:	85 bd       	out	0x25, r24	; 37
 40c:	08 95       	ret

0000040e <_exit>:
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>
