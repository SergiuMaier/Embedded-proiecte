
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800100  00800100  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e67  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000960  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00001e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00002bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 34       	cpi	r26, 0x4B	; 75
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  88:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pin_toggle_led0>:
struct timer update_timer(struct timer x, uint8_t var_autoreset, uint32_t perioada){
	
	struct timer t = { .autoreset = var_autoreset, .perioada = perioada};

	return t;
}
  90:	95 b1       	in	r25, 0x05	; 5
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	85 b9       	out	0x05, r24	; 5
  98:	08 95       	ret

0000009a <pin_toggle_led1>:
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	89 27       	eor	r24, r25
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <pin_toggle_led2>:
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	89 27       	eor	r24, r25
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <pin_toggle_led3>:
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	89 27       	eor	r24, r25
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret

000000b8 <aprinde_led>:
  b8:	fc 01       	movw	r30, r24
  ba:	09 95       	icall
  bc:	08 95       	ret

000000be <creeaza_timer>:
  be:	8f 92       	push	r8
  c0:	9f 92       	push	r9
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	fc 01       	movw	r30, r24
  dc:	60 83       	st	Z, r22
  de:	41 83       	std	Z+1, r20	; 0x01
  e0:	22 83       	std	Z+2, r18	; 0x02
  e2:	e3 82       	std	Z+3, r14	; 0x03
  e4:	f4 82       	std	Z+4, r15	; 0x04
  e6:	05 83       	std	Z+5, r16	; 0x05
  e8:	16 83       	std	Z+6, r17	; 0x06
  ea:	a7 82       	std	Z+7, r10	; 0x07
  ec:	b0 86       	std	Z+8, r11	; 0x08
  ee:	c1 86       	std	Z+9, r12	; 0x09
  f0:	d2 86       	std	Z+10, r13	; 0x0a
  f2:	94 86       	std	Z+12, r9	; 0x0c
  f4:	83 86       	std	Z+11, r8	; 0x0b
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	9f 90       	pop	r9
 10c:	8f 90       	pop	r8
 10e:	08 95       	ret

00000110 <evalueaza_timer>:

void evalueaza_timer(){
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
	
	int counter_timere_utilizate = 0;                        //contor pentru numararea timerelor create
	
	for(id_timer = 0; id_timer < MAX_NR_TIMERE; id_timer++) 
 116:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <id_timer+0x1>
 11a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <id_timer>
	return t;
}

void evalueaza_timer(){
	
	int counter_timere_utilizate = 0;                        //contor pentru numararea timerelor create
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
	
	for(id_timer = 0; id_timer < MAX_NR_TIMERE; id_timer++) 
 122:	10 c0       	rjmp	.+32     	; 0x144 <evalueaza_timer+0x34>
	{
		if(timere[id_timer].id != 0)                         //verificare timere utilizate in functie de id
 124:	2d e0       	ldi	r18, 0x0D	; 13
 126:	28 9f       	mul	r18, r24
 128:	f0 01       	movw	r30, r0
 12a:	29 9f       	mul	r18, r25
 12c:	f0 0d       	add	r31, r0
 12e:	11 24       	eor	r1, r1
 130:	ea 5f       	subi	r30, 0xFA	; 250
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	20 81       	ld	r18, Z
 136:	21 11       	cpse	r18, r1
			counter_timere_utilizate++;                      //determinare numar timere create
 138:	21 96       	adiw	r28, 0x01	; 1

void evalueaza_timer(){
	
	int counter_timere_utilizate = 0;                        //contor pentru numararea timerelor create
	
	for(id_timer = 0; id_timer < MAX_NR_TIMERE; id_timer++) 
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <id_timer+0x1>
 140:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <id_timer>
 144:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <id_timer>
 148:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <id_timer+0x1>
 14c:	85 30       	cpi	r24, 0x05	; 5
 14e:	91 05       	cpc	r25, r1
 150:	4c f3       	brlt	.-46     	; 0x124 <evalueaza_timer+0x14>
	{
		if(timere[id_timer].id != 0)                         //verificare timere utilizate in functie de id
			counter_timere_utilizate++;                      //determinare numar timere create
	}
	
	if((counter_timere_utilizate != 0) && (counter_timp == 1))  //conditie pentru a verifica daca exista timere create si are loc intreruperea
 152:	20 97       	sbiw	r28, 0x00	; 0
 154:	09 f4       	brne	.+2      	; 0x158 <evalueaza_timer+0x48>
 156:	81 c0       	rjmp	.+258    	; 0x25a <evalueaza_timer+0x14a>
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <evalueaza_timer+0x56>
 164:	7a c0       	rjmp	.+244    	; 0x25a <evalueaza_timer+0x14a>
	{	
		for(id_timer = 0; id_timer <= counter_timere_utilizate; id_timer++)   
 166:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <id_timer+0x1>
 16a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <id_timer>
 16e:	6d c0       	rjmp	.+218    	; 0x24a <evalueaza_timer+0x13a>
		{			
			timere[id_timer].counter_initial++;              //incrementare contor initial (= sys_tick)
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	82 9f       	mul	r24, r18
 174:	f0 01       	movw	r30, r0
 176:	83 9f       	mul	r24, r19
 178:	f0 0d       	add	r31, r0
 17a:	11 24       	eor	r1, r1
 17c:	ea 5f       	subi	r30, 0xFA	; 250
 17e:	fe 4f       	sbci	r31, 0xFE	; 254
 180:	83 81       	ldd	r24, Z+3	; 0x03
 182:	94 81       	ldd	r25, Z+4	; 0x04
 184:	a5 81       	ldd	r26, Z+5	; 0x05
 186:	b6 81       	ldd	r27, Z+6	; 0x06
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	a1 1d       	adc	r26, r1
 18c:	b1 1d       	adc	r27, r1
 18e:	83 83       	std	Z+3, r24	; 0x03
 190:	94 83       	std	Z+4, r25	; 0x04
 192:	a5 83       	std	Z+5, r26	; 0x05
 194:	b6 83       	std	Z+6, r27	; 0x06
			
			if((timere[id_timer].counter_initial == timere[id_timer].perioada) && (timere[id_timer].stare == PORNIT))  
 196:	47 81       	ldd	r20, Z+7	; 0x07
 198:	50 85       	ldd	r21, Z+8	; 0x08
 19a:	61 85       	ldd	r22, Z+9	; 0x09
 19c:	72 85       	ldd	r23, Z+10	; 0x0a
 19e:	84 17       	cp	r24, r20
 1a0:	95 07       	cpc	r25, r21
 1a2:	a6 07       	cpc	r26, r22
 1a4:	b7 07       	cpc	r27, r23
 1a6:	09 f0       	breq	.+2      	; 0x1aa <evalueaza_timer+0x9a>
 1a8:	47 c0       	rjmp	.+142    	; 0x238 <evalueaza_timer+0x128>
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	82 9f       	mul	r24, r18
 1ae:	f0 01       	movw	r30, r0
 1b0:	83 9f       	mul	r24, r19
 1b2:	f0 0d       	add	r31, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	ea 5f       	subi	r30, 0xFA	; 250
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	81 81       	ldd	r24, Z+1	; 0x01
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	e1 f5       	brne	.+120    	; 0x238 <evalueaza_timer+0x128>
			{                                                //verificare daca a trecut perioada & timerul creat este pornit
				aprinde_led(timere[id_timer].callback_fct);  //apelare functie dupa expirarea perioadei
 1c0:	1d e0       	ldi	r17, 0x0D	; 13
 1c2:	12 9f       	mul	r17, r18
 1c4:	f0 01       	movw	r30, r0
 1c6:	13 9f       	mul	r17, r19
 1c8:	f0 0d       	add	r31, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	ea 5f       	subi	r30, 0xFA	; 250
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	83 85       	ldd	r24, Z+11	; 0x0b
 1d2:	94 85       	ldd	r25, Z+12	; 0x0c
 1d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <aprinde_led>
				timere[id_timer].stare = EXPIRAT;            //timerul trece din pornit -> expirat dupa ce a expirat perioada
 1d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <id_timer>
 1dc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <id_timer+0x1>
 1e0:	18 9f       	mul	r17, r24
 1e2:	f0 01       	movw	r30, r0
 1e4:	19 9f       	mul	r17, r25
 1e6:	f0 0d       	add	r31, r0
 1e8:	11 24       	eor	r1, r1
 1ea:	ea 5f       	subi	r30, 0xFA	; 250
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	21 83       	std	Z+1, r18	; 0x01
				
				if(timere[id_timer].autoreset == TRUE)       //verificare daca timerul este one shot
 1f2:	22 81       	ldd	r18, Z+2	; 0x02
 1f4:	21 30       	cpi	r18, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <evalueaza_timer+0xfe>
					timere[id_timer].stare = PORNIT;         //schimbare stare timer
 1f8:	2d e0       	ldi	r18, 0x0D	; 13
 1fa:	28 9f       	mul	r18, r24
 1fc:	f0 01       	movw	r30, r0
 1fe:	29 9f       	mul	r18, r25
 200:	f0 0d       	add	r31, r0
 202:	11 24       	eor	r1, r1
 204:	ea 5f       	subi	r30, 0xFA	; 250
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	21 83       	std	Z+1, r18	; 0x01
 20c:	09 c0       	rjmp	.+18     	; 0x220 <evalueaza_timer+0x110>
				else
					timere[id_timer].stare = OPRIT;
 20e:	2d e0       	ldi	r18, 0x0D	; 13
 210:	28 9f       	mul	r18, r24
 212:	f0 01       	movw	r30, r0
 214:	29 9f       	mul	r18, r25
 216:	f0 0d       	add	r31, r0
 218:	11 24       	eor	r1, r1
 21a:	ea 5f       	subi	r30, 0xFA	; 250
 21c:	fe 4f       	sbci	r31, 0xFE	; 254
 21e:	11 82       	std	Z+1, r1	; 0x01
					
				timere[id_timer].counter_initial = 0;        //resetare contor initial
 220:	2d e0       	ldi	r18, 0x0D	; 13
 222:	28 9f       	mul	r18, r24
 224:	f0 01       	movw	r30, r0
 226:	29 9f       	mul	r18, r25
 228:	f0 0d       	add	r31, r0
 22a:	11 24       	eor	r1, r1
 22c:	ea 5f       	subi	r30, 0xFA	; 250
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	13 82       	std	Z+3, r1	; 0x03
 232:	14 82       	std	Z+4, r1	; 0x04
 234:	15 82       	std	Z+5, r1	; 0x05
 236:	16 82       	std	Z+6, r1	; 0x06
			counter_timere_utilizate++;                      //determinare numar timere create
	}
	
	if((counter_timere_utilizate != 0) && (counter_timp == 1))  //conditie pentru a verifica daca exista timere create si are loc intreruperea
	{	
		for(id_timer = 0; id_timer <= counter_timere_utilizate; id_timer++)   
 238:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <id_timer>
 23c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <id_timer+0x1>
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <id_timer+0x1>
 246:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <id_timer>
 24a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <id_timer>
 24e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <id_timer+0x1>
 252:	c2 17       	cp	r28, r18
 254:	d3 07       	cpc	r29, r19
 256:	0c f0       	brlt	.+2      	; 0x25a <evalueaza_timer+0x14a>
 258:	8b cf       	rjmp	.-234    	; 0x170 <evalueaza_timer+0x60>
					
				timere[id_timer].counter_initial = 0;        //resetare contor initial
			}
		}
	} 
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	08 95       	ret

00000262 <reset_timer>:

void reset_timer(int i, uint32_t perioada){
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
	
	if(sys_tick == perioada)
 266:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <sys_tick>
 26a:	10 91 48 01 	lds	r17, 0x0148	; 0x800148 <sys_tick+0x1>
 26e:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <sys_tick+0x2>
 272:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <sys_tick+0x3>
 276:	04 17       	cp	r16, r20
 278:	15 07       	cpc	r17, r21
 27a:	26 07       	cpc	r18, r22
 27c:	37 07       	cpc	r19, r23
 27e:	61 f4       	brne	.+24     	; 0x298 <reset_timer+0x36>
		timere[i].counter_initial = 0;
 280:	2d e0       	ldi	r18, 0x0D	; 13
 282:	28 9f       	mul	r18, r24
 284:	f0 01       	movw	r30, r0
 286:	29 9f       	mul	r18, r25
 288:	f0 0d       	add	r31, r0
 28a:	11 24       	eor	r1, r1
 28c:	ea 5f       	subi	r30, 0xFA	; 250
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	13 82       	std	Z+3, r1	; 0x03
 292:	14 82       	std	Z+4, r1	; 0x04
 294:	15 82       	std	Z+5, r1	; 0x05
 296:	16 82       	std	Z+6, r1	; 0x06
	
}
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <__vector_14>:

ISR(TIMER0_COMPA_vect){ 
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
	
	cli();
 2b0:	f8 94       	cli
	
	sys_tick++;
 2b2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <sys_tick>
 2b6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <sys_tick+0x1>
 2ba:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <sys_tick+0x2>
 2be:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <sys_tick+0x3>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	a1 1d       	adc	r26, r1
 2c6:	b1 1d       	adc	r27, r1
 2c8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <sys_tick>
 2cc:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <sys_tick+0x1>
 2d0:	a0 93 49 01 	sts	0x0149, r26	; 0x800149 <sys_tick+0x2>
 2d4:	b0 93 4a 01 	sts	0x014A, r27	; 0x80014a <sys_tick+0x3>
	flag = 1;     
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <flag+0x1>
 2e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag>
	counter_timp = 1;
 2e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	sei();
 2ec:	78 94       	sei
}
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRB = 0x0F;                          //00001111
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 304:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
 306:	8a b1       	in	r24, 0x0a	; 10
 308:	8c 60       	ori	r24, 0x0C	; 12
 30a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	8c 60       	ori	r24, 0x0C	; 12
 310:	8b b9       	out	0x0b, r24	; 11
 312:	08 95       	ret

00000314 <interrupt_init>:
}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 314:	e9 e6       	ldi	r30, 0x69	; 105
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8f 60       	ori	r24, 0x0F	; 15
 31c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 31e:	8d b3       	in	r24, 0x1d	; 29
 320:	83 60       	ori	r24, 0x03	; 3
 322:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 324:	8c b3       	in	r24, 0x1c	; 28
 326:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 328:	e8 e6       	ldi	r30, 0x68	; 104
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret

00000332 <init_devices>:
}

void init_devices(void){
	
	cli();
 332:	f8 94       	cli
	
	port_init();
 334:	0e 94 80 01 	call	0x300	; 0x300 <port_init>
	interrupt_init();
 338:	0e 94 8a 01 	call	0x314	; 0x314 <interrupt_init>
	timer0_init();
 33c:	0e 94 40 02 	call	0x480	; 0x480 <timer0_init>
	
	sei();
 340:	78 94       	sei
 342:	08 95       	ret

00000344 <main>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2d 97       	sbiw	r28, 0x0d	; 13
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	
	init_devices();	//porturi, timer, intreruperi
 358:	0e 94 99 01 	call	0x332	; 0x332 <init_devices>
	start_timer0(); 
 35c:	0e 94 4b 02 	call	0x496	; 0x496 <start_timer0>
	
	timere[0] = creeaza_timer(1, PORNIT, TRUE, 0, 2000, pin_toggle_led0);
 360:	0f 2e       	mov	r0, r31
 362:	f8 e4       	ldi	r31, 0x48	; 72
 364:	8f 2e       	mov	r8, r31
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	9f 2e       	mov	r9, r31
 36a:	f0 2d       	mov	r31, r0
 36c:	0f 2e       	mov	r0, r31
 36e:	f0 ed       	ldi	r31, 0xD0	; 208
 370:	af 2e       	mov	r10, r31
 372:	f7 e0       	ldi	r31, 0x07	; 7
 374:	bf 2e       	mov	r11, r31
 376:	c1 2c       	mov	r12, r1
 378:	d1 2c       	mov	r13, r1
 37a:	f0 2d       	mov	r31, r0
 37c:	e1 2c       	mov	r14, r1
 37e:	f1 2c       	mov	r15, r1
 380:	87 01       	movw	r16, r14
 382:	21 e0       	ldi	r18, 0x01	; 1
 384:	41 e0       	ldi	r20, 0x01	; 1
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 5f 00 	call	0xbe	; 0xbe <creeaza_timer>
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	fe 01       	movw	r30, r28
 394:	31 96       	adiw	r30, 0x01	; 1
 396:	a6 e0       	ldi	r26, 0x06	; 6
 398:	b1 e0       	ldi	r27, 0x01	; 1
 39a:	01 90       	ld	r0, Z+
 39c:	0d 92       	st	X+, r0
 39e:	8a 95       	dec	r24
 3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x56>
	timere[1] = creeaza_timer(2, PORNIT, FALSE, 0, 3000, pin_toggle_led1);
 3a2:	0f 2e       	mov	r0, r31
 3a4:	fd e4       	ldi	r31, 0x4D	; 77
 3a6:	8f 2e       	mov	r8, r31
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	9f 2e       	mov	r9, r31
 3ac:	f0 2d       	mov	r31, r0
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f8 eb       	ldi	r31, 0xB8	; 184
 3b2:	af 2e       	mov	r10, r31
 3b4:	fb e0       	ldi	r31, 0x0B	; 11
 3b6:	bf 2e       	mov	r11, r31
 3b8:	c1 2c       	mov	r12, r1
 3ba:	d1 2c       	mov	r13, r1
 3bc:	f0 2d       	mov	r31, r0
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	62 e0       	ldi	r22, 0x02	; 2
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	0e 94 5f 00 	call	0xbe	; 0xbe <creeaza_timer>
 3cc:	8d e0       	ldi	r24, 0x0D	; 13
 3ce:	fe 01       	movw	r30, r28
 3d0:	31 96       	adiw	r30, 0x01	; 1
 3d2:	a3 e1       	ldi	r26, 0x13	; 19
 3d4:	b1 e0       	ldi	r27, 0x01	; 1
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x92>
	timere[2] = creeaza_timer(3, PORNIT, TRUE, 0, 5000, pin_toggle_led2);
 3de:	0f 2e       	mov	r0, r31
 3e0:	f2 e5       	ldi	r31, 0x52	; 82
 3e2:	8f 2e       	mov	r8, r31
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	9f 2e       	mov	r9, r31
 3e8:	f0 2d       	mov	r31, r0
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f8 e8       	ldi	r31, 0x88	; 136
 3ee:	af 2e       	mov	r10, r31
 3f0:	f3 e1       	ldi	r31, 0x13	; 19
 3f2:	bf 2e       	mov	r11, r31
 3f4:	c1 2c       	mov	r12, r1
 3f6:	d1 2c       	mov	r13, r1
 3f8:	f0 2d       	mov	r31, r0
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	ce 01       	movw	r24, r28
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	0e 94 5f 00 	call	0xbe	; 0xbe <creeaza_timer>
 408:	8d e0       	ldi	r24, 0x0D	; 13
 40a:	fe 01       	movw	r30, r28
 40c:	31 96       	adiw	r30, 0x01	; 1
 40e:	a0 e2       	ldi	r26, 0x20	; 32
 410:	b1 e0       	ldi	r27, 0x01	; 1
 412:	01 90       	ld	r0, Z+
 414:	0d 92       	st	X+, r0
 416:	8a 95       	dec	r24
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	timere[3] = creeaza_timer(4, PORNIT, TRUE, 0, 10000, pin_toggle_led3);
 41a:	0f 2e       	mov	r0, r31
 41c:	f7 e5       	ldi	r31, 0x57	; 87
 41e:	8f 2e       	mov	r8, r31
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	9f 2e       	mov	r9, r31
 424:	f0 2d       	mov	r31, r0
 426:	0f 2e       	mov	r0, r31
 428:	f0 e1       	ldi	r31, 0x10	; 16
 42a:	af 2e       	mov	r10, r31
 42c:	f7 e2       	ldi	r31, 0x27	; 39
 42e:	bf 2e       	mov	r11, r31
 430:	c1 2c       	mov	r12, r1
 432:	d1 2c       	mov	r13, r1
 434:	f0 2d       	mov	r31, r0
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	64 e0       	ldi	r22, 0x04	; 4
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	0e 94 5f 00 	call	0xbe	; 0xbe <creeaza_timer>
 444:	8d e0       	ldi	r24, 0x0D	; 13
 446:	fe 01       	movw	r30, r28
 448:	31 96       	adiw	r30, 0x01	; 1
 44a:	ad e2       	ldi	r26, 0x2D	; 45
 44c:	b1 e0       	ldi	r27, 0x01	; 1
 44e:	01 90       	ld	r0, Z+
 450:	0d 92       	st	X+, r0
 452:	8a 95       	dec	r24
 454:	e1 f7       	brne	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>

	do
	{	
		if(flag == 1)
 456:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag>
 45a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <flag+0x1>
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	31 f4       	brne	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		{
			flag = 0;
 462:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <flag+0x1>
 466:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag>
			evalueaza_timer();	
 46a:	0e 94 88 00 	call	0x110	; 0x110 <evalueaza_timer>
		}
			reset_timer(3, 22000);
 46e:	40 ef       	ldi	r20, 0xF0	; 240
 470:	55 e5       	ldi	r21, 0x55	; 85
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 31 01 	call	0x262	; 0x262 <reset_timer>

	}while(1);
 47e:	eb cf       	rjmp	.-42     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>

00000480 <timer0_init>:
 */ 
#include "timer0_def.h"

void timer0_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //modul CTC
 480:	84 b5       	in	r24, 0x24	; 36
 482:	82 60       	ori	r24, 0x02	; 2
 484:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;
 486:	89 ef       	ldi	r24, 0xF9	; 249
 488:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 48a:	ee e6       	ldi	r30, 0x6E	; 110
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	82 60       	ori	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
 494:	08 95       	ret

00000496 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= START_TIMER0;
 496:	85 b5       	in	r24, 0x25	; 37
 498:	83 60       	ori	r24, 0x03	; 3
 49a:	85 bd       	out	0x25, r24	; 37
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
