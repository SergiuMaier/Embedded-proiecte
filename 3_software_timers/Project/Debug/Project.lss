
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b78  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b1  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b0  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e7  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
	t.autoreset = var_autoreset;
	
	return t;
}

ISR(TIMER0_COMPA_vect){  //pt caz general
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	
	cli();
  9e:	f8 94       	cli
	
	sys_tick++;	//pt a-l folosi in main
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	//if(sys_tick >= (1/GENERARE_INTRERUPERE)){ // 1 sec
		//counter++; //1 sec
	//}
	
	sei();
  b2:	78 94       	sei
}
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRB = 0x0F;   //00001111
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  c6:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	8c 60       	ori	r24, 0x0C	; 12
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret

000000d6 <interrupt_init>:
}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 60       	ori	r24, 0x0F	; 15
  de:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
  e0:	8d b3       	in	r24, 0x1d	; 29
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
  e6:	8c b3       	in	r24, 0x1c	; 28
  e8:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
  ea:	e8 e6       	ldi	r30, 0x68	; 104
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <init_devices>:
}

void init_devices(void){
	
	cli();
  f4:	f8 94       	cli
	
	port_init();
  f6:	0e 94 61 00 	call	0xc2	; 0xc2 <port_init>
	interrupt_init();
  fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <interrupt_init>
	timer0_init();
  fe:	0e 94 88 00 	call	0x110	; 0x110 <timer0_init>
	
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 106:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_devices>
	start_timer0(); //aici sau in creeaza_timer
 10a:	0e 94 93 00 	call	0x126	; 0x126 <start_timer0>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x8>

00000110 <timer0_init>:
 */ 
#include "timer0_func_def.h"

void timer0_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //modul CTC
 110:	84 b5       	in	r24, 0x24	; 36
 112:	82 60       	ori	r24, 0x02	; 2
 114:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= START_TIMER0;
 126:	85 b5       	in	r24, 0x25	; 37
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	85 bd       	out	0x25, r24	; 37
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
