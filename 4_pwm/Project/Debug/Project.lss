
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002017  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  88:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <led_on>:
	*port &=  ~(1 << pin);
}

void led_on(){			
	
	start_timer0();  //prescalar 64
  90:	0e 94 c3 00 	call	0x186	; 0x186 <start_timer0>
  94:	08 95       	ret

00000096 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){  //pt caz general
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	
	cli();
  b8:	f8 94       	cli
	
	contor_secunde++;
  ba:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  be:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
  ca:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){
  ce:	07 2e       	mov	r0, r23
  d0:	00 0c       	add	r0, r0
  d2:	88 0b       	sbc	r24, r24
  d4:	99 0b       	sbc	r25, r25
  d6:	0e 94 c9 00 	call	0x192	; 0x192 <__floatsisf>
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	3f ef       	ldi	r19, 0xFF	; 255
  de:	49 e7       	ldi	r20, 0x79	; 121
  e0:	54 e4       	ldi	r21, 0x44	; 68
  e2:	0e 94 04 01 	call	0x208	; 0x208 <__gesf2>
  e6:	88 23       	and	r24, r24
  e8:	6c f0       	brlt	.+26     	; 0x104 <__vector_14+0x6e>
		secunde++;
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <secunde>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <secunde+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <secunde+0x1>
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <secunde>
		contor_secunde = 0;
  fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
	sei();
 104:	78 94       	sei
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRD = 0x40;   //01000000
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x40;
 12c:	8b b9       	out	0x0b, r24	; 11
 12e:	08 95       	ret

00000130 <interrupt_init>:

}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 130:	e9 e6       	ldi	r30, 0x69	; 105
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8f 60       	ori	r24, 0x0F	; 15
 138:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 13a:	8d b3       	in	r24, 0x1d	; 29
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 140:	8c b3       	in	r24, 0x1c	; 28
 142:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 144:	e8 e6       	ldi	r30, 0x68	; 104
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <init_devices>:
}

void init_devices(void){
	
	cli();
 14e:	f8 94       	cli
	
	port_init();
 150:	0e 94 94 00 	call	0x128	; 0x128 <port_init>
	interrupt_init();
 154:	0e 94 98 00 	call	0x130	; 0x130 <interrupt_init>
	timer0_init();
 158:	0e 94 b5 00 	call	0x16a	; 0x16a <timer0_init>
	
	sei();
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 160:	0e 94 a7 00 	call	0x14e	; 0x14e <init_devices>
					      
	do
	{
		led_on();	
 164:	0e 94 48 00 	call	0x90	; 0x90 <led_on>
 168:	fd cf       	rjmp	.-6      	; 0x164 <main+0x4>

0000016a <timer0_init>:

#include "timer0_func.h"

void timer0_init(void){
	
	TCCR0A |= (1 << COM0A1)|(0 << COM0A0);  //non-inverting mode
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);  //fast PWM 
 170:	84 b5       	in	r24, 0x24	; 36
 172:	83 60       	ori	r24, 0x03	; 3
 174:	84 bd       	out	0x24, r24	; 36
	OCR0A = 200;							//factor de umplere
 176:	88 ec       	ldi	r24, 0xC8	; 200
 178:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 17a:	ee e6       	ldi	r30, 0x6E	; 110
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= (1 << CS02)|(0 << CS01)|(1 << CS00); //prescalar 1024
 186:	85 b5       	in	r24, 0x25	; 37
 188:	85 60       	ori	r24, 0x05	; 5
 18a:	85 bd       	out	0x25, r24	; 37
 18c:	08 95       	ret

0000018e <__floatunsisf>:
 18e:	e8 94       	clt
 190:	09 c0       	rjmp	.+18     	; 0x1a4 <__floatsisf+0x12>

00000192 <__floatsisf>:
 192:	97 fb       	bst	r25, 7
 194:	3e f4       	brtc	.+14     	; 0x1a4 <__floatsisf+0x12>
 196:	90 95       	com	r25
 198:	80 95       	com	r24
 19a:	70 95       	com	r23
 19c:	61 95       	neg	r22
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	8f 4f       	sbci	r24, 0xFF	; 255
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	99 23       	and	r25, r25
 1a6:	a9 f0       	breq	.+42     	; 0x1d2 <__floatsisf+0x40>
 1a8:	f9 2f       	mov	r31, r25
 1aa:	96 e9       	ldi	r25, 0x96	; 150
 1ac:	bb 27       	eor	r27, r27
 1ae:	93 95       	inc	r25
 1b0:	f6 95       	lsr	r31
 1b2:	87 95       	ror	r24
 1b4:	77 95       	ror	r23
 1b6:	67 95       	ror	r22
 1b8:	b7 95       	ror	r27
 1ba:	f1 11       	cpse	r31, r1
 1bc:	f8 cf       	rjmp	.-16     	; 0x1ae <__floatsisf+0x1c>
 1be:	fa f4       	brpl	.+62     	; 0x1fe <__floatsisf+0x6c>
 1c0:	bb 0f       	add	r27, r27
 1c2:	11 f4       	brne	.+4      	; 0x1c8 <__floatsisf+0x36>
 1c4:	60 ff       	sbrs	r22, 0
 1c6:	1b c0       	rjmp	.+54     	; 0x1fe <__floatsisf+0x6c>
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	8f 4f       	sbci	r24, 0xFF	; 255
 1ce:	9f 4f       	sbci	r25, 0xFF	; 255
 1d0:	16 c0       	rjmp	.+44     	; 0x1fe <__floatsisf+0x6c>
 1d2:	88 23       	and	r24, r24
 1d4:	11 f0       	breq	.+4      	; 0x1da <__floatsisf+0x48>
 1d6:	96 e9       	ldi	r25, 0x96	; 150
 1d8:	11 c0       	rjmp	.+34     	; 0x1fc <__floatsisf+0x6a>
 1da:	77 23       	and	r23, r23
 1dc:	21 f0       	breq	.+8      	; 0x1e6 <__floatsisf+0x54>
 1de:	9e e8       	ldi	r25, 0x8E	; 142
 1e0:	87 2f       	mov	r24, r23
 1e2:	76 2f       	mov	r23, r22
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <__floatsisf+0x5e>
 1e6:	66 23       	and	r22, r22
 1e8:	71 f0       	breq	.+28     	; 0x206 <__floatsisf+0x74>
 1ea:	96 e8       	ldi	r25, 0x86	; 134
 1ec:	86 2f       	mov	r24, r22
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	2a f0       	brmi	.+10     	; 0x1fe <__floatsisf+0x6c>
 1f4:	9a 95       	dec	r25
 1f6:	66 0f       	add	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	88 1f       	adc	r24, r24
 1fc:	da f7       	brpl	.-10     	; 0x1f4 <__floatsisf+0x62>
 1fe:	88 0f       	add	r24, r24
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	97 f9       	bld	r25, 7
 206:	08 95       	ret

00000208 <__gesf2>:
 208:	0e 94 09 01 	call	0x212	; 0x212 <__fp_cmp>
 20c:	08 f4       	brcc	.+2      	; 0x210 <__gesf2+0x8>
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	08 95       	ret

00000212 <__fp_cmp>:
 212:	99 0f       	add	r25, r25
 214:	00 08       	sbc	r0, r0
 216:	55 0f       	add	r21, r21
 218:	aa 0b       	sbc	r26, r26
 21a:	e0 e8       	ldi	r30, 0x80	; 128
 21c:	fe ef       	ldi	r31, 0xFE	; 254
 21e:	16 16       	cp	r1, r22
 220:	17 06       	cpc	r1, r23
 222:	e8 07       	cpc	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	c0 f0       	brcs	.+48     	; 0x258 <__fp_cmp+0x46>
 228:	12 16       	cp	r1, r18
 22a:	13 06       	cpc	r1, r19
 22c:	e4 07       	cpc	r30, r20
 22e:	f5 07       	cpc	r31, r21
 230:	98 f0       	brcs	.+38     	; 0x258 <__fp_cmp+0x46>
 232:	62 1b       	sub	r22, r18
 234:	73 0b       	sbc	r23, r19
 236:	84 0b       	sbc	r24, r20
 238:	95 0b       	sbc	r25, r21
 23a:	39 f4       	brne	.+14     	; 0x24a <__fp_cmp+0x38>
 23c:	0a 26       	eor	r0, r26
 23e:	61 f0       	breq	.+24     	; 0x258 <__fp_cmp+0x46>
 240:	23 2b       	or	r18, r19
 242:	24 2b       	or	r18, r20
 244:	25 2b       	or	r18, r21
 246:	21 f4       	brne	.+8      	; 0x250 <__fp_cmp+0x3e>
 248:	08 95       	ret
 24a:	0a 26       	eor	r0, r26
 24c:	09 f4       	brne	.+2      	; 0x250 <__fp_cmp+0x3e>
 24e:	a1 40       	sbci	r26, 0x01	; 1
 250:	a6 95       	lsr	r26
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	81 1d       	adc	r24, r1
 256:	81 1d       	adc	r24, r1
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
