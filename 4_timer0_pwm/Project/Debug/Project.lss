
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000470  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  88:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <led_on>:
	*port &=  ~(1 << pin);
}

void led_on(){			
	
	start_timer0(); 
  90:	0e 94 bc 00 	call	0x178	; 0x178 <start_timer0>
	
	OCR0A = contor_secunde;
  94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  98:	87 bd       	out	0x27, r24	; 39
  9a:	08 95       	ret

0000009c <__vector_14>:
}

ISR(TIMER0_COMPA_vect){  //pt caz general
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	
	cli();
  be:	f8 94       	cli
	
	contor_secunde++;
  c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){
  d4:	07 2e       	mov	r0, r23
  d6:	00 0c       	add	r0, r0
  d8:	88 0b       	sbc	r24, r24
  da:	99 0b       	sbc	r25, r25
  dc:	0e 94 c2 00 	call	0x184	; 0x184 <__floatsisf>
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	3f ef       	ldi	r19, 0xFF	; 255
  e4:	49 e7       	ldi	r20, 0x79	; 121
  e6:	54 e4       	ldi	r21, 0x44	; 68
  e8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__gesf2>
  ec:	88 23       	and	r24, r24
  ee:	24 f0       	brlt	.+8      	; 0xf8 <__vector_14+0x5c>
		contor_secunde = 0;
  f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	sei();
  f8:	78 94       	sei
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRD = 0x40;   //01000000
 11c:	80 e4       	ldi	r24, 0x40	; 64
 11e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x40;
 120:	8b b9       	out	0x0b, r24	; 11
 122:	08 95       	ret

00000124 <interrupt_init>:

}

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 124:	e9 e6       	ldi	r30, 0x69	; 105
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8f 60       	ori	r24, 0x0F	; 15
 12c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 12e:	8d b3       	in	r24, 0x1d	; 29
 130:	83 60       	ori	r24, 0x03	; 3
 132:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 134:	8c b3       	in	r24, 0x1c	; 28
 136:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 138:	e8 e6       	ldi	r30, 0x68	; 104
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <init_devices>:
}

void init_devices(void){
	
	cli();
 142:	f8 94       	cli
	
	port_init();
 144:	0e 94 8e 00 	call	0x11c	; 0x11c <port_init>
	interrupt_init();
 148:	0e 94 92 00 	call	0x124	; 0x124 <interrupt_init>
	timer0_init();
 14c:	0e 94 af 00 	call	0x15e	; 0x15e <timer0_init>
	
	sei();
 150:	78 94       	sei
 152:	08 95       	ret

00000154 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 154:	0e 94 a1 00 	call	0x142	; 0x142 <init_devices>
					      
	do
	{		
		led_on();	
 158:	0e 94 48 00 	call	0x90	; 0x90 <led_on>
 15c:	fd cf       	rjmp	.-6      	; 0x158 <main+0x4>

0000015e <timer0_init>:
#include "timer0_func.h"
#include "main_func.h"

void timer0_init(void){
	
	TCCR0A |= (1 << COM0A1)|(0 << COM0A0);  //non-inverting mode
 15e:	84 b5       	in	r24, 0x24	; 36
 160:	80 68       	ori	r24, 0x80	; 128
 162:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01)|(1 << WGM00);    //fast PWM 
 164:	84 b5       	in	r24, 0x24	; 36
 166:	83 60       	ori	r24, 0x03	; 3
 168:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0; 							//factor de umplere
 16a:	17 bc       	out	0x27, r1	; 39
	TIMSK0 |= (1 << OCIE0A);
 16c:	ee e6       	ldi	r30, 0x6E	; 110
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= (1 << CS02)|(0 << CS01)|(1 << CS00); //prescalar 1024
 178:	85 b5       	in	r24, 0x25	; 37
 17a:	85 60       	ori	r24, 0x05	; 5
 17c:	85 bd       	out	0x25, r24	; 37
 17e:	08 95       	ret

00000180 <__floatunsisf>:
 180:	e8 94       	clt
 182:	09 c0       	rjmp	.+18     	; 0x196 <__floatsisf+0x12>

00000184 <__floatsisf>:
 184:	97 fb       	bst	r25, 7
 186:	3e f4       	brtc	.+14     	; 0x196 <__floatsisf+0x12>
 188:	90 95       	com	r25
 18a:	80 95       	com	r24
 18c:	70 95       	com	r23
 18e:	61 95       	neg	r22
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	8f 4f       	sbci	r24, 0xFF	; 255
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	99 23       	and	r25, r25
 198:	a9 f0       	breq	.+42     	; 0x1c4 <__floatsisf+0x40>
 19a:	f9 2f       	mov	r31, r25
 19c:	96 e9       	ldi	r25, 0x96	; 150
 19e:	bb 27       	eor	r27, r27
 1a0:	93 95       	inc	r25
 1a2:	f6 95       	lsr	r31
 1a4:	87 95       	ror	r24
 1a6:	77 95       	ror	r23
 1a8:	67 95       	ror	r22
 1aa:	b7 95       	ror	r27
 1ac:	f1 11       	cpse	r31, r1
 1ae:	f8 cf       	rjmp	.-16     	; 0x1a0 <__floatsisf+0x1c>
 1b0:	fa f4       	brpl	.+62     	; 0x1f0 <__floatsisf+0x6c>
 1b2:	bb 0f       	add	r27, r27
 1b4:	11 f4       	brne	.+4      	; 0x1ba <__floatsisf+0x36>
 1b6:	60 ff       	sbrs	r22, 0
 1b8:	1b c0       	rjmp	.+54     	; 0x1f0 <__floatsisf+0x6c>
 1ba:	6f 5f       	subi	r22, 0xFF	; 255
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	8f 4f       	sbci	r24, 0xFF	; 255
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	16 c0       	rjmp	.+44     	; 0x1f0 <__floatsisf+0x6c>
 1c4:	88 23       	and	r24, r24
 1c6:	11 f0       	breq	.+4      	; 0x1cc <__floatsisf+0x48>
 1c8:	96 e9       	ldi	r25, 0x96	; 150
 1ca:	11 c0       	rjmp	.+34     	; 0x1ee <__floatsisf+0x6a>
 1cc:	77 23       	and	r23, r23
 1ce:	21 f0       	breq	.+8      	; 0x1d8 <__floatsisf+0x54>
 1d0:	9e e8       	ldi	r25, 0x8E	; 142
 1d2:	87 2f       	mov	r24, r23
 1d4:	76 2f       	mov	r23, r22
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__floatsisf+0x5e>
 1d8:	66 23       	and	r22, r22
 1da:	71 f0       	breq	.+28     	; 0x1f8 <__floatsisf+0x74>
 1dc:	96 e8       	ldi	r25, 0x86	; 134
 1de:	86 2f       	mov	r24, r22
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	2a f0       	brmi	.+10     	; 0x1f0 <__floatsisf+0x6c>
 1e6:	9a 95       	dec	r25
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	88 1f       	adc	r24, r24
 1ee:	da f7       	brpl	.-10     	; 0x1e6 <__floatsisf+0x62>
 1f0:	88 0f       	add	r24, r24
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	97 f9       	bld	r25, 7
 1f8:	08 95       	ret

000001fa <__gesf2>:
 1fa:	0e 94 02 01 	call	0x204	; 0x204 <__fp_cmp>
 1fe:	08 f4       	brcc	.+2      	; 0x202 <__gesf2+0x8>
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	08 95       	ret

00000204 <__fp_cmp>:
 204:	99 0f       	add	r25, r25
 206:	00 08       	sbc	r0, r0
 208:	55 0f       	add	r21, r21
 20a:	aa 0b       	sbc	r26, r26
 20c:	e0 e8       	ldi	r30, 0x80	; 128
 20e:	fe ef       	ldi	r31, 0xFE	; 254
 210:	16 16       	cp	r1, r22
 212:	17 06       	cpc	r1, r23
 214:	e8 07       	cpc	r30, r24
 216:	f9 07       	cpc	r31, r25
 218:	c0 f0       	brcs	.+48     	; 0x24a <__fp_cmp+0x46>
 21a:	12 16       	cp	r1, r18
 21c:	13 06       	cpc	r1, r19
 21e:	e4 07       	cpc	r30, r20
 220:	f5 07       	cpc	r31, r21
 222:	98 f0       	brcs	.+38     	; 0x24a <__fp_cmp+0x46>
 224:	62 1b       	sub	r22, r18
 226:	73 0b       	sbc	r23, r19
 228:	84 0b       	sbc	r24, r20
 22a:	95 0b       	sbc	r25, r21
 22c:	39 f4       	brne	.+14     	; 0x23c <__fp_cmp+0x38>
 22e:	0a 26       	eor	r0, r26
 230:	61 f0       	breq	.+24     	; 0x24a <__fp_cmp+0x46>
 232:	23 2b       	or	r18, r19
 234:	24 2b       	or	r18, r20
 236:	25 2b       	or	r18, r21
 238:	21 f4       	brne	.+8      	; 0x242 <__fp_cmp+0x3e>
 23a:	08 95       	ret
 23c:	0a 26       	eor	r0, r26
 23e:	09 f4       	brne	.+2      	; 0x242 <__fp_cmp+0x3e>
 240:	a1 40       	sbci	r26, 0x01	; 1
 242:	a6 95       	lsr	r26
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	81 1d       	adc	r24, r1
 248:	81 1d       	adc	r24, r1
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
