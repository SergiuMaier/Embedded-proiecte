
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000584  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  000005f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c99  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000886  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063c  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000162  00000000  00000000  000028ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 30       	cpi	r26, 0x0F	; 15
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  88:	0c 94 c0 02 	jmp	0x580	; 0x580 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinSet>:
#include "timer0_func.h"
#include "senzor_hc_sr04.h"

void pinSet(volatile uint8_t *port, uint8_t pin){
	
	*port |=  1 << pin;
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <pinSet+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <pinSet+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  a8:	fc 01       	movw	r30, r24
	
	*port &=  ~(1 << pin);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pinReset+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <pinReset+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){  
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	
	cli();
  e4:	f8 94       	cli
	
	contor_secunde++;
  e6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	6f 5f       	subi	r22, 0xFF	; 255
  ec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	timp++;
  f0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timp>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <timp>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 9e 01 	call	0x33c	; 0x33c <__floatsisf>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	49 e7       	ldi	r20, 0x79	; 121
 10a:	54 e4       	ldi	r21, 0x44	; 68
 10c:	0e 94 02 02 	call	0x404	; 0x404 <__gesf2>
 110:	88 23       	and	r24, r24
 112:	3c f0       	brlt	.+14     	; 0x122 <__vector_14+0x60>
		secunde++;
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <secunde>
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <secunde>
		contor_secunde = 0;
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	sei();
 122:	78 94       	sei
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_1>:

ISR(INT0_vect){ 
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
	
	cli();
 160:	f8 94       	cli
	
	if(PIND & (1 << PIND2))
 162:	4a 9b       	sbis	0x09, 2	; 9
 164:	0e c0       	rjmp	.+28     	; 0x182 <__vector_1+0x3c>
		timp_start = timp; //primul front al semnalului
 166:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timp>
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	a0 e0       	ldi	r26, 0x00	; 0
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timp_start>
 174:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timp_start+0x1>
 178:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <timp_start+0x2>
 17c:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <timp_start+0x3>
 180:	1b c0       	rjmp	.+54     	; 0x1b8 <__vector_1+0x72>
	else
	{
		timp_final = timp - timp_start;  //timp intre fronturi
 182:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <timp>
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <timp_start>
 190:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <timp_start+0x1>
 194:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <timp_start+0x2>
 198:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <timp_start+0x3>
 19c:	84 1b       	sub	r24, r20
 19e:	95 0b       	sbc	r25, r21
 1a0:	a6 0b       	sbc	r26, r22
 1a2:	b7 0b       	sbc	r27, r23
 1a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timp_final>
 1a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timp_final+0x1>
 1ac:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <timp_final+0x2>
 1b0:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <timp_final+0x3>
		timp = 0;
 1b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timp>
	}
	
	sei();
 1b8:	78 94       	sei
}
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <port_init>:

#include <stdio.h>

void port_init(void){
	
	DDRB = 0x01;   //00000011
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;  //00000010
 1d8:	15 b8       	out	0x05, r1	; 5
	
	DDRD |= (1 << PIND2);  //INT0
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2);
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	8b b9       	out	0x0b, r24	; 11
 1e6:	08 95       	ret

000001e8 <interrupt_init>:
}

void interrupt_init(void){
	
	EICRA |= (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (1 << ISC00);
 1e8:	e9 e6       	ldi	r30, 0x69	; 105
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	80 83       	st	Z, r24
	EIMSK |= (0 << INT1) | (1 << INT0);
 1f2:	8d b3       	in	r24, 0x1d	; 29
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 1f8:	8c b3       	in	r24, 0x1c	; 28
 1fa:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 1fc:	e8 e6       	ldi	r30, 0x68	; 104
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <init_devices>:
}

void init_devices(void){
	
	cli();
 206:	f8 94       	cli
	
	port_init();
 208:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <port_init>
	interrupt_init();
 20c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <interrupt_init>
	timer0_init();
 210:	0e 94 5e 01 	call	0x2bc	; 0x2bc <timer0_init>
	
	sei();
 214:	78 94       	sei
 216:	08 95       	ret

00000218 <main>:

uint8_t valoare;

int main(void){
	
	init_devices();	//porturi, timer, intreruperi
 218:	0e 94 03 01 	call	0x206	; 0x206 <init_devices>
					      
	do
	{
		start_timer0();
 21c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <start_timer0>
		//pinSet(&PORTB, PINB0);
		    
		trigger();
 220:	0e 94 24 01 	call	0x248	; 0x248 <trigger>
		//calcul_latime_impuls_echo(&PINB, PINB2);
		
	    valoare = calcul_distanta();
 224:	0e 94 3c 01 	call	0x278	; 0x278 <calcul_distanta>
 228:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <valoare>
		
		if(valoare <= 5)
 22c:	86 30       	cpi	r24, 0x06	; 6
 22e:	30 f4       	brcc	.+12     	; 0x23c <main+0x24>
		    pinSet(&PORTB, PINB0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
 23a:	f0 cf       	rjmp	.-32     	; 0x21c <main+0x4>
		else
			pinReset(&PORTB, PINB0);	
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	85 e2       	ldi	r24, 0x25	; 37
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
 246:	ea cf       	rjmp	.-44     	; 0x21c <main+0x4>

00000248 <trigger>:
#include "senzor_hc_sr04.h"
#include "main_func.h"

void trigger(){
	
	if(contor_secunde >= 10){
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	8a 30       	cpi	r24, 0x0A	; 10
 24e:	18 f0       	brcs	.+6      	; 0x256 <trigger+0xe>
		PORTB &= ~(1 << PINB1);
 250:	85 b1       	in	r24, 0x05	; 5
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	85 b9       	out	0x05, r24	; 5
		//*port &= ~(1 << pin);
	}
	
	if(contor_secunde >= 100){
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25a:	84 36       	cpi	r24, 0x64	; 100
 25c:	18 f0       	brcs	.+6      	; 0x264 <trigger+0x1c>
		PORTB |= 1 << PINB1;
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	82 60       	ori	r24, 0x02	; 2
 262:	85 b9       	out	0x05, r24	; 5
		//*port |=  1 << pin;
	}
	
	if(contor_secunde >= 200)
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	88 3c       	cpi	r24, 0xC8	; 200
 26a:	28 f0       	brcs	.+10     	; 0x276 <trigger+0x2e>
	{
		PORTB &= ~(1 << PINB1);
 26c:	85 b1       	in	r24, 0x05	; 5
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	85 b9       	out	0x05, r24	; 5
		//*port &= ~(1 << pin);
		contor_secunde = 0;
 272:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 276:	08 95       	ret

00000278 <calcul_distanta>:
	//
//}

uint8_t calcul_distanta(){
	
	distanta = timp_final*VITEZA_SUNETULUI*0.5*10;
 278:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <timp_final>
 27c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <timp_final+0x1>
 280:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <timp_final+0x2>
 284:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <timp_final+0x3>
 288:	0e 94 9c 01 	call	0x338	; 0x338 <__floatunsisf>
 28c:	26 e9       	ldi	r18, 0x96	; 150
 28e:	33 e4       	ldi	r19, 0x43	; 67
 290:	4b e0       	ldi	r20, 0x0B	; 11
 292:	5d e3       	ldi	r21, 0x3D	; 61
 294:	0e 94 07 02 	call	0x40e	; 0x40e <__mulsf3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	5f e3       	ldi	r21, 0x3F	; 63
 2a0:	0e 94 07 02 	call	0x40e	; 0x40e <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e2       	ldi	r20, 0x20	; 32
 2aa:	51 e4       	ldi	r21, 0x41	; 65
 2ac:	0e 94 07 02 	call	0x40e	; 0x40e <__mulsf3>
 2b0:	0e 94 6d 01 	call	0x2da	; 0x2da <__fixunssfsi>
 2b4:	86 2f       	mov	r24, r22
 2b6:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <distanta>
	
	return distanta;
}
 2ba:	08 95       	ret

000002bc <timer0_init>:
 */ 
#include "timer0_func.h"

void timer0_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //modul CTC
 2bc:	84 b5       	in	r24, 0x24	; 36
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;              
 2c2:	89 ef       	ldi	r24, 0xF9	; 249
 2c4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 2c6:	ee e6       	ldi	r30, 0x6E	; 110
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret

000002d2 <start_timer0>:
}

void start_timer0(){
	TCCR0B |= START_TIMER0;
 2d2:	85 b5       	in	r24, 0x25	; 37
 2d4:	83 60       	ori	r24, 0x03	; 3
 2d6:	85 bd       	out	0x25, r24	; 37
 2d8:	08 95       	ret

000002da <__fixunssfsi>:
 2da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fp_splitA>
 2de:	88 f0       	brcs	.+34     	; 0x302 <__fixunssfsi+0x28>
 2e0:	9f 57       	subi	r25, 0x7F	; 127
 2e2:	98 f0       	brcs	.+38     	; 0x30a <__fixunssfsi+0x30>
 2e4:	b9 2f       	mov	r27, r25
 2e6:	99 27       	eor	r25, r25
 2e8:	b7 51       	subi	r27, 0x17	; 23
 2ea:	b0 f0       	brcs	.+44     	; 0x318 <__fixunssfsi+0x3e>
 2ec:	e1 f0       	breq	.+56     	; 0x326 <__fixunssfsi+0x4c>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	88 1f       	adc	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	1a f0       	brmi	.+6      	; 0x2fe <__fixunssfsi+0x24>
 2f8:	ba 95       	dec	r27
 2fa:	c9 f7       	brne	.-14     	; 0x2ee <__fixunssfsi+0x14>
 2fc:	14 c0       	rjmp	.+40     	; 0x326 <__fixunssfsi+0x4c>
 2fe:	b1 30       	cpi	r27, 0x01	; 1
 300:	91 f0       	breq	.+36     	; 0x326 <__fixunssfsi+0x4c>
 302:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_zero>
 306:	b1 e0       	ldi	r27, 0x01	; 1
 308:	08 95       	ret
 30a:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__fp_zero>
 30e:	67 2f       	mov	r22, r23
 310:	78 2f       	mov	r23, r24
 312:	88 27       	eor	r24, r24
 314:	b8 5f       	subi	r27, 0xF8	; 248
 316:	39 f0       	breq	.+14     	; 0x326 <__fixunssfsi+0x4c>
 318:	b9 3f       	cpi	r27, 0xF9	; 249
 31a:	cc f3       	brlt	.-14     	; 0x30e <__fixunssfsi+0x34>
 31c:	86 95       	lsr	r24
 31e:	77 95       	ror	r23
 320:	67 95       	ror	r22
 322:	b3 95       	inc	r27
 324:	d9 f7       	brne	.-10     	; 0x31c <__fixunssfsi+0x42>
 326:	3e f4       	brtc	.+14     	; 0x336 <__fixunssfsi+0x5c>
 328:	90 95       	com	r25
 32a:	80 95       	com	r24
 32c:	70 95       	com	r23
 32e:	61 95       	neg	r22
 330:	7f 4f       	sbci	r23, 0xFF	; 255
 332:	8f 4f       	sbci	r24, 0xFF	; 255
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	08 95       	ret

00000338 <__floatunsisf>:
 338:	e8 94       	clt
 33a:	09 c0       	rjmp	.+18     	; 0x34e <__floatsisf+0x12>

0000033c <__floatsisf>:
 33c:	97 fb       	bst	r25, 7
 33e:	3e f4       	brtc	.+14     	; 0x34e <__floatsisf+0x12>
 340:	90 95       	com	r25
 342:	80 95       	com	r24
 344:	70 95       	com	r23
 346:	61 95       	neg	r22
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	8f 4f       	sbci	r24, 0xFF	; 255
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	99 23       	and	r25, r25
 350:	a9 f0       	breq	.+42     	; 0x37c <__floatsisf+0x40>
 352:	f9 2f       	mov	r31, r25
 354:	96 e9       	ldi	r25, 0x96	; 150
 356:	bb 27       	eor	r27, r27
 358:	93 95       	inc	r25
 35a:	f6 95       	lsr	r31
 35c:	87 95       	ror	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b7 95       	ror	r27
 364:	f1 11       	cpse	r31, r1
 366:	f8 cf       	rjmp	.-16     	; 0x358 <__floatsisf+0x1c>
 368:	fa f4       	brpl	.+62     	; 0x3a8 <__floatsisf+0x6c>
 36a:	bb 0f       	add	r27, r27
 36c:	11 f4       	brne	.+4      	; 0x372 <__floatsisf+0x36>
 36e:	60 ff       	sbrs	r22, 0
 370:	1b c0       	rjmp	.+54     	; 0x3a8 <__floatsisf+0x6c>
 372:	6f 5f       	subi	r22, 0xFF	; 255
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	16 c0       	rjmp	.+44     	; 0x3a8 <__floatsisf+0x6c>
 37c:	88 23       	and	r24, r24
 37e:	11 f0       	breq	.+4      	; 0x384 <__floatsisf+0x48>
 380:	96 e9       	ldi	r25, 0x96	; 150
 382:	11 c0       	rjmp	.+34     	; 0x3a6 <__floatsisf+0x6a>
 384:	77 23       	and	r23, r23
 386:	21 f0       	breq	.+8      	; 0x390 <__floatsisf+0x54>
 388:	9e e8       	ldi	r25, 0x8E	; 142
 38a:	87 2f       	mov	r24, r23
 38c:	76 2f       	mov	r23, r22
 38e:	05 c0       	rjmp	.+10     	; 0x39a <__floatsisf+0x5e>
 390:	66 23       	and	r22, r22
 392:	71 f0       	breq	.+28     	; 0x3b0 <__floatsisf+0x74>
 394:	96 e8       	ldi	r25, 0x86	; 134
 396:	86 2f       	mov	r24, r22
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	2a f0       	brmi	.+10     	; 0x3a8 <__floatsisf+0x6c>
 39e:	9a 95       	dec	r25
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	da f7       	brpl	.-10     	; 0x39e <__floatsisf+0x62>
 3a8:	88 0f       	add	r24, r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	97 f9       	bld	r25, 7
 3b0:	08 95       	ret

000003b2 <__fp_split3>:
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	90 58       	subi	r25, 0x80	; 128
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	59 f0       	breq	.+22     	; 0x3d2 <__fp_splitA+0x10>
 3bc:	5f 3f       	cpi	r21, 0xFF	; 255
 3be:	71 f0       	breq	.+28     	; 0x3dc <__fp_splitA+0x1a>
 3c0:	47 95       	ror	r20

000003c2 <__fp_splitA>:
 3c2:	88 0f       	add	r24, r24
 3c4:	97 fb       	bst	r25, 7
 3c6:	99 1f       	adc	r25, r25
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <__fp_splitA+0x20>
 3ca:	9f 3f       	cpi	r25, 0xFF	; 255
 3cc:	79 f0       	breq	.+30     	; 0x3ec <__fp_splitA+0x2a>
 3ce:	87 95       	ror	r24
 3d0:	08 95       	ret
 3d2:	12 16       	cp	r1, r18
 3d4:	13 06       	cpc	r1, r19
 3d6:	14 06       	cpc	r1, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	f2 cf       	rjmp	.-28     	; 0x3c0 <__fp_split3+0xe>
 3dc:	46 95       	lsr	r20
 3de:	f1 df       	rcall	.-30     	; 0x3c2 <__fp_splitA>
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <__fp_splitA+0x30>
 3e2:	16 16       	cp	r1, r22
 3e4:	17 06       	cpc	r1, r23
 3e6:	18 06       	cpc	r1, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	f1 cf       	rjmp	.-30     	; 0x3ce <__fp_splitA+0xc>
 3ec:	86 95       	lsr	r24
 3ee:	71 05       	cpc	r23, r1
 3f0:	61 05       	cpc	r22, r1
 3f2:	08 94       	sec
 3f4:	08 95       	ret

000003f6 <__fp_zero>:
 3f6:	e8 94       	clt

000003f8 <__fp_szero>:
 3f8:	bb 27       	eor	r27, r27
 3fa:	66 27       	eor	r22, r22
 3fc:	77 27       	eor	r23, r23
 3fe:	cb 01       	movw	r24, r22
 400:	97 f9       	bld	r25, 7
 402:	08 95       	ret

00000404 <__gesf2>:
 404:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__fp_cmp>
 408:	08 f4       	brcc	.+2      	; 0x40c <__gesf2+0x8>
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	08 95       	ret

0000040e <__mulsf3>:
 40e:	0e 94 1a 02 	call	0x434	; 0x434 <__mulsf3x>
 412:	0c 94 af 02 	jmp	0x55e	; 0x55e <__fp_round>
 416:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_pscA>
 41a:	38 f0       	brcs	.+14     	; 0x42a <__mulsf3+0x1c>
 41c:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_pscB>
 420:	20 f0       	brcs	.+8      	; 0x42a <__mulsf3+0x1c>
 422:	95 23       	and	r25, r21
 424:	11 f0       	breq	.+4      	; 0x42a <__mulsf3+0x1c>
 426:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_inf>
 42a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_nan>
 42e:	11 24       	eor	r1, r1
 430:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>

00000434 <__mulsf3x>:
 434:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_split3>
 438:	70 f3       	brcs	.-36     	; 0x416 <__mulsf3+0x8>

0000043a <__mulsf3_pse>:
 43a:	95 9f       	mul	r25, r21
 43c:	c1 f3       	breq	.-16     	; 0x42e <__mulsf3+0x20>
 43e:	95 0f       	add	r25, r21
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	55 1f       	adc	r21, r21
 444:	62 9f       	mul	r22, r18
 446:	f0 01       	movw	r30, r0
 448:	72 9f       	mul	r23, r18
 44a:	bb 27       	eor	r27, r27
 44c:	f0 0d       	add	r31, r0
 44e:	b1 1d       	adc	r27, r1
 450:	63 9f       	mul	r22, r19
 452:	aa 27       	eor	r26, r26
 454:	f0 0d       	add	r31, r0
 456:	b1 1d       	adc	r27, r1
 458:	aa 1f       	adc	r26, r26
 45a:	64 9f       	mul	r22, r20
 45c:	66 27       	eor	r22, r22
 45e:	b0 0d       	add	r27, r0
 460:	a1 1d       	adc	r26, r1
 462:	66 1f       	adc	r22, r22
 464:	82 9f       	mul	r24, r18
 466:	22 27       	eor	r18, r18
 468:	b0 0d       	add	r27, r0
 46a:	a1 1d       	adc	r26, r1
 46c:	62 1f       	adc	r22, r18
 46e:	73 9f       	mul	r23, r19
 470:	b0 0d       	add	r27, r0
 472:	a1 1d       	adc	r26, r1
 474:	62 1f       	adc	r22, r18
 476:	83 9f       	mul	r24, r19
 478:	a0 0d       	add	r26, r0
 47a:	61 1d       	adc	r22, r1
 47c:	22 1f       	adc	r18, r18
 47e:	74 9f       	mul	r23, r20
 480:	33 27       	eor	r19, r19
 482:	a0 0d       	add	r26, r0
 484:	61 1d       	adc	r22, r1
 486:	23 1f       	adc	r18, r19
 488:	84 9f       	mul	r24, r20
 48a:	60 0d       	add	r22, r0
 48c:	21 1d       	adc	r18, r1
 48e:	82 2f       	mov	r24, r18
 490:	76 2f       	mov	r23, r22
 492:	6a 2f       	mov	r22, r26
 494:	11 24       	eor	r1, r1
 496:	9f 57       	subi	r25, 0x7F	; 127
 498:	50 40       	sbci	r21, 0x00	; 0
 49a:	9a f0       	brmi	.+38     	; 0x4c2 <__mulsf3_pse+0x88>
 49c:	f1 f0       	breq	.+60     	; 0x4da <__mulsf3_pse+0xa0>
 49e:	88 23       	and	r24, r24
 4a0:	4a f0       	brmi	.+18     	; 0x4b4 <__mulsf3_pse+0x7a>
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	bb 1f       	adc	r27, r27
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	a9 f7       	brne	.-22     	; 0x49e <__mulsf3_pse+0x64>
 4b4:	9e 3f       	cpi	r25, 0xFE	; 254
 4b6:	51 05       	cpc	r21, r1
 4b8:	80 f0       	brcs	.+32     	; 0x4da <__mulsf3_pse+0xa0>
 4ba:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_inf>
 4be:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__fp_szero>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	e4 f3       	brlt	.-8      	; 0x4be <__mulsf3_pse+0x84>
 4c6:	98 3e       	cpi	r25, 0xE8	; 232
 4c8:	d4 f3       	brlt	.-12     	; 0x4be <__mulsf3_pse+0x84>
 4ca:	86 95       	lsr	r24
 4cc:	77 95       	ror	r23
 4ce:	67 95       	ror	r22
 4d0:	b7 95       	ror	r27
 4d2:	f7 95       	ror	r31
 4d4:	e7 95       	ror	r30
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	c1 f7       	brne	.-16     	; 0x4ca <__mulsf3_pse+0x90>
 4da:	fe 2b       	or	r31, r30
 4dc:	88 0f       	add	r24, r24
 4de:	91 1d       	adc	r25, r1
 4e0:	96 95       	lsr	r25
 4e2:	87 95       	ror	r24
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__fp_cmp>:
 4e8:	99 0f       	add	r25, r25
 4ea:	00 08       	sbc	r0, r0
 4ec:	55 0f       	add	r21, r21
 4ee:	aa 0b       	sbc	r26, r26
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	fe ef       	ldi	r31, 0xFE	; 254
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	e8 07       	cpc	r30, r24
 4fa:	f9 07       	cpc	r31, r25
 4fc:	c0 f0       	brcs	.+48     	; 0x52e <__fp_cmp+0x46>
 4fe:	12 16       	cp	r1, r18
 500:	13 06       	cpc	r1, r19
 502:	e4 07       	cpc	r30, r20
 504:	f5 07       	cpc	r31, r21
 506:	98 f0       	brcs	.+38     	; 0x52e <__fp_cmp+0x46>
 508:	62 1b       	sub	r22, r18
 50a:	73 0b       	sbc	r23, r19
 50c:	84 0b       	sbc	r24, r20
 50e:	95 0b       	sbc	r25, r21
 510:	39 f4       	brne	.+14     	; 0x520 <__fp_cmp+0x38>
 512:	0a 26       	eor	r0, r26
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_cmp+0x46>
 516:	23 2b       	or	r18, r19
 518:	24 2b       	or	r18, r20
 51a:	25 2b       	or	r18, r21
 51c:	21 f4       	brne	.+8      	; 0x526 <__fp_cmp+0x3e>
 51e:	08 95       	ret
 520:	0a 26       	eor	r0, r26
 522:	09 f4       	brne	.+2      	; 0x526 <__fp_cmp+0x3e>
 524:	a1 40       	sbci	r26, 0x01	; 1
 526:	a6 95       	lsr	r26
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	81 1d       	adc	r24, r1
 52c:	81 1d       	adc	r24, r1
 52e:	08 95       	ret

00000530 <__fp_inf>:
 530:	97 f9       	bld	r25, 7
 532:	9f 67       	ori	r25, 0x7F	; 127
 534:	80 e8       	ldi	r24, 0x80	; 128
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	08 95       	ret

0000053c <__fp_nan>:
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	80 ec       	ldi	r24, 0xC0	; 192
 540:	08 95       	ret

00000542 <__fp_pscA>:
 542:	00 24       	eor	r0, r0
 544:	0a 94       	dec	r0
 546:	16 16       	cp	r1, r22
 548:	17 06       	cpc	r1, r23
 54a:	18 06       	cpc	r1, r24
 54c:	09 06       	cpc	r0, r25
 54e:	08 95       	ret

00000550 <__fp_pscB>:
 550:	00 24       	eor	r0, r0
 552:	0a 94       	dec	r0
 554:	12 16       	cp	r1, r18
 556:	13 06       	cpc	r1, r19
 558:	14 06       	cpc	r1, r20
 55a:	05 06       	cpc	r0, r21
 55c:	08 95       	ret

0000055e <__fp_round>:
 55e:	09 2e       	mov	r0, r25
 560:	03 94       	inc	r0
 562:	00 0c       	add	r0, r0
 564:	11 f4       	brne	.+4      	; 0x56a <__fp_round+0xc>
 566:	88 23       	and	r24, r24
 568:	52 f0       	brmi	.+20     	; 0x57e <__fp_round+0x20>
 56a:	bb 0f       	add	r27, r27
 56c:	40 f4       	brcc	.+16     	; 0x57e <__fp_round+0x20>
 56e:	bf 2b       	or	r27, r31
 570:	11 f4       	brne	.+4      	; 0x576 <__fp_round+0x18>
 572:	60 ff       	sbrs	r22, 0
 574:	04 c0       	rjmp	.+8      	; 0x57e <__fp_round+0x20>
 576:	6f 5f       	subi	r22, 0xFF	; 255
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	08 95       	ret

00000580 <_exit>:
 580:	f8 94       	cli

00000582 <__stop_program>:
 582:	ff cf       	rjmp	.-2      	; 0x582 <__stop_program>
