
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbd  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000025d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_18>
  4c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 68 00 	call	0xd0	; 0xd0 <init_devices>
	USART_Init(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0xc>

000000b4 <timer_init>:
void introducere_mesaj(){
	
	//SendData(CLEAR);
	
	SendData("\n\r\n\r");
	SendData("<pla>");
  b4:	84 b5       	in	r24, 0x24	; 36
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	84 bd       	out	0x24, r24	; 36
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	87 bd       	out	0x27, r24	; 39
  be:	85 b5       	in	r24, 0x25	; 37
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	85 bd       	out	0x25, r24	; 37
  c4:	ee e6       	ldi	r30, 0x6E	; 110
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <init_devices>:
  d0:	f8 94       	cli
  d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <timer_init>
  d6:	78 94       	sei
  d8:	08 95       	ret

000000da <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
	
	cli();
  f8:	f8 94       	cli
	
	contor++;
  fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contor>
  fe:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contor+0x1>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <contor+0x1>
 108:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contor>
	
	if(contor >= 1000){
 10c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contor>
 110:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contor+0x1>
 114:	88 3e       	cpi	r24, 0xE8	; 232
 116:	93 40       	sbci	r25, 0x03	; 3
 118:	e8 f1       	brcs	.+122    	; 0x194 <__vector_14+0xba>
		++secunde;
 11a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <secunde>
 11e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <secunde+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <secunde+0x1>
 128:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <secunde>
		flag_timer = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_timer>
		contor = 0;
 132:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contor+0x1>
 136:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contor>
		
		if(secunde >= 60)
 13a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <secunde>
 13e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <secunde+0x1>
 142:	cc 97       	sbiw	r24, 0x3c	; 60
 144:	38 f1       	brcs	.+78     	; 0x194 <__vector_14+0xba>
		{
			secunde %= 60;
 146:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <secunde>
 14a:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <secunde+0x1>
 14e:	9a 01       	movw	r18, r20
 150:	a9 e8       	ldi	r26, 0x89	; 137
 152:	b8 e8       	ldi	r27, 0x88	; 136
 154:	0e 94 10 01 	call	0x220	; 0x220 <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	92 95       	swap	r25
 15e:	82 95       	swap	r24
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	89 27       	eor	r24, r25
 164:	9f 70       	andi	r25, 0x0F	; 15
 166:	89 27       	eor	r24, r25
 168:	6c e3       	ldi	r22, 0x3C	; 60
 16a:	68 9f       	mul	r22, r24
 16c:	90 01       	movw	r18, r0
 16e:	69 9f       	mul	r22, r25
 170:	30 0d       	add	r19, r0
 172:	11 24       	eor	r1, r1
 174:	ca 01       	movw	r24, r20
 176:	82 1b       	sub	r24, r18
 178:	93 0b       	sbc	r25, r19
 17a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <secunde+0x1>
 17e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <secunde>
			++minute;
 182:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <minute>
 186:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <minute+0x1>
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <minute+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <minute>
		}
	}
	
	sei();
 194:	78 94       	sei
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <USART_Init>:
#include "USART.h"
#include "timer.h"

void USART_Init(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 1b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 1b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 61       	ori	r24, 0x18	; 24
 1c4:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 1c6:	80 81       	ld	r24, Z
 1c8:	80 6a       	ori	r24, 0xA0	; 160
 1ca:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 1cc:	e2 ec       	ldi	r30, 0xC2	; 194
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8e 60       	ori	r24, 0x0E	; 14
 1d4:	80 83       	st	Z, r24
	
	sei();
 1d6:	78 94       	sei
 1d8:	08 95       	ret

000001da <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24

	flag_tx = 1;	
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_tx>
}
 1ec:	8f 91       	pop	r24
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_18>:

ISR(USART_RX_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31

	char rec;
	
	rec = UDR0;
 208:	e6 ec       	ldi	r30, 0xC6	; 198
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
	UDR0 = rec;
 20e:	80 83       	st	Z, r24
	
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__umulhisi3>:
 220:	a2 9f       	mul	r26, r18
 222:	b0 01       	movw	r22, r0
 224:	b3 9f       	mul	r27, r19
 226:	c0 01       	movw	r24, r0
 228:	a3 9f       	mul	r26, r19
 22a:	70 0d       	add	r23, r0
 22c:	81 1d       	adc	r24, r1
 22e:	11 24       	eor	r1, r1
 230:	91 1d       	adc	r25, r1
 232:	b2 9f       	mul	r27, r18
 234:	70 0d       	add	r23, r0
 236:	81 1d       	adc	r24, r1
 238:	11 24       	eor	r1, r1
 23a:	91 1d       	adc	r25, r1
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
