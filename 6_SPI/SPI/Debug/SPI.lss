
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  0080011e  0080011e  00000434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce8  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051a  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000270d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_18>
  4c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3e       	cpi	r26, 0xEE	; 238
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6e 00 	call	0xdc	; 0xdc <init_devices>
	USART_Init(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 45 01 	call	0x28a	; 0x28a <USART_Init>
	
	while(1) 
    { 		
		afisare_timp();
  b2:	0e 94 73 00 	call	0xe6	; 0xe6 <afisare_timp>
		SendData("\n\rsalutare");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0xc>

000000c0 <timer_init>:

#include "timer.h"

void timer_init(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <init_devices>:
}

void init_devices(){
	
	cli();
  dc:	f8 94       	cli
	
	timer_init();
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <timer_init>
	
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
  e6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
  ea:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ee:	4a e0       	ldi	r20, 0x0A	; 10
  f0:	6a e8       	ldi	r22, 0x8A	; 138
  f2:	71 e0       	ldi	r23, 0x01	; 1
  f4:	0e 94 8a 01 	call	0x314	; 0x314 <__itoa_ncheck>
	itoa(minute, ch_min, 10);
  f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
  fc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 100:	4a e0       	ldi	r20, 0x0A	; 10
 102:	66 e2       	ldi	r22, 0x26	; 38
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	0e 94 8a 01 	call	0x314	; 0x314 <__itoa_ncheck>
		
	if(flag_timer == 1)
 10a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <flag_timer>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <afisare_timp+0x2e>
 112:	75 c0       	rjmp	.+234    	; 0x1fe <afisare_timp+0x118>
	{	
		SendData(CLEAR);
 114:	8b e0       	ldi	r24, 0x0B	; 11
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
		SendData("Timp: ");
 11c:	8e e0       	ldi	r24, 0x0E	; 14
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
		
		if((secunde < 10) && (minute < 10))
 124:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 128:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 12c:	0a 97       	sbiw	r24, 0x0a	; 10
 12e:	b8 f4       	brcc	.+46     	; 0x15e <afisare_timp+0x78>
 130:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
 134:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 138:	0a 97       	sbiw	r24, 0x0a	; 10
 13a:	88 f4       	brcc	.+34     	; 0x15e <afisare_timp+0x78>
		{
			SendData(" 0");
 13c:	85 e1       	ldi	r24, 0x15	; 21
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_min);
 144:	86 e2       	ldi	r24, 0x26	; 38
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(":0");
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_sec);
 154:	8a e8       	ldi	r24, 0x8A	; 138
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
 15c:	4e c0       	rjmp	.+156    	; 0x1fa <afisare_timp+0x114>
		}
		else if((secunde < 10) && (minute >= 10))
 15e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 162:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 166:	0a 97       	sbiw	r24, 0x0a	; 10
 168:	98 f4       	brcc	.+38     	; 0x190 <afisare_timp+0xaa>
 16a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
 16e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 172:	0a 97       	sbiw	r24, 0x0a	; 10
 174:	68 f0       	brcs	.+26     	; 0x190 <afisare_timp+0xaa>
		{
			SendData(ch_min);
 176:	86 e2       	ldi	r24, 0x26	; 38
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(":0");
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_sec);
 186:	8a e8       	ldi	r24, 0x8A	; 138
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
 18e:	35 c0       	rjmp	.+106    	; 0x1fa <afisare_timp+0x114>
		}
		else if((secunde >= 10) && (minute < 10))
 190:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 194:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 198:	0a 97       	sbiw	r24, 0x0a	; 10
 19a:	b8 f0       	brcs	.+46     	; 0x1ca <afisare_timp+0xe4>
 19c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
 1a0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 1a4:	0a 97       	sbiw	r24, 0x0a	; 10
 1a6:	88 f4       	brcc	.+34     	; 0x1ca <afisare_timp+0xe4>
		{
			SendData(" 0");
 1a8:	85 e1       	ldi	r24, 0x15	; 21
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_min);
 1b0:	86 e2       	ldi	r24, 0x26	; 38
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(":");
 1b8:	8b e1       	ldi	r24, 0x1B	; 27
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_sec);
 1c0:	8a e8       	ldi	r24, 0x8A	; 138
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
 1c8:	18 c0       	rjmp	.+48     	; 0x1fa <afisare_timp+0x114>
		}
		else if((secunde >= 10) && (minute >= 10))
 1ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 1ce:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 1d2:	0a 97       	sbiw	r24, 0x0a	; 10
 1d4:	90 f0       	brcs	.+36     	; 0x1fa <afisare_timp+0x114>
 1d6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
 1da:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 1de:	0a 97       	sbiw	r24, 0x0a	; 10
 1e0:	60 f0       	brcs	.+24     	; 0x1fa <afisare_timp+0x114>
		{
			SendData(ch_min);
 1e2:	86 e2       	ldi	r24, 0x26	; 38
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(":");
 1ea:	8b e1       	ldi	r24, 0x1B	; 27
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
			SendData(ch_sec);
 1f2:	8a e8       	ldi	r24, 0x8A	; 138
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <SendData>
		}
		
		flag_timer = 0;
 1fa:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <flag_timer>
 1fe:	08 95       	ret

00000200 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
	
	cli();
 210:	f8 94       	cli
	
	contor++;
 212:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contor>
 216:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <contor+0x1>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <contor+0x1>
 220:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contor>
	
	if(contor >= 1000){
 224:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contor>
 228:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <contor+0x1>
 22c:	88 3e       	cpi	r24, 0xE8	; 232
 22e:	93 40       	sbci	r25, 0x03	; 3
 230:	18 f1       	brcs	.+70     	; 0x278 <__vector_14+0x78>
		secunde++;
 232:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 236:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <secunde+0x1>
 240:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <secunde>
		flag_timer = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <flag_timer>
		contor = 0;
 24a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <contor+0x1>
 24e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <contor>
		
		if(secunde >= 60)
 252:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <secunde>
 256:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <secunde+0x1>
 25a:	cc 97       	sbiw	r24, 0x3c	; 60
 25c:	68 f0       	brcs	.+26     	; 0x278 <__vector_14+0x78>
		{
			minute++;
 25e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <minute>
 262:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <minute+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <minute+0x1>
 26c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <minute>
			secunde = 0;
 270:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <secunde+0x1>
 274:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <secunde>
		}
	}
	
	sei();
 278:	78 94       	sei
}
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <USART_Init>:
#include "USART.h"
#include "timer.h"

void USART_Init(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 28a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 28e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 292:	e1 ec       	ldi	r30, 0xC1	; 193
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	88 61       	ori	r24, 0x18	; 24
 29a:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 29c:	80 81       	ld	r24, Z
 29e:	80 6a       	ori	r24, 0xA0	; 160
 2a0:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 2a2:	e2 ec       	ldi	r30, 0xC2	; 194
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	8e 60       	ori	r24, 0x0E	; 14
 2aa:	80 83       	st	Z, r24
	
	sei();
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	8f 93       	push	r24

	flag = 1;	
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
}
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_18>:

ISR(USART_RX_vect){
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8f 93       	push	r24
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31

	char rec;
	rec = UDR0;   //preiau valoarea receptata 
 2de:	e6 ec       	ldi	r30, 0xC6	; 198
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
	UDR0 = rec;   //echo 
 2e4:	80 83       	st	Z, r24
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <SendData>:

void SendData(char *c){
 2f6:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <SendData+0x16>
	{
		if(flag == 1)
 2fa:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__data_end>
 2fe:	21 30       	cpi	r18, 0x01	; 1
 300:	29 f4       	brne	.+10     	; 0x30c <SendData+0x16>
		{			
			UDR0 = *c;
 302:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 306:	31 96       	adiw	r30, 0x01	; 1
			flag = 0;
 308:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	UDR0 = rec;   //echo 
}

void SendData(char *c){
	
	while(*c != '\0')
 30c:	90 81       	ld	r25, Z
 30e:	91 11       	cpse	r25, r1
 310:	f4 cf       	rjmp	.-24     	; 0x2fa <SendData+0x4>
			UDR0 = *c;
			c++;
			flag = 0;
		}
	}
 312:	08 95       	ret

00000314 <__itoa_ncheck>:
 314:	bb 27       	eor	r27, r27
 316:	4a 30       	cpi	r20, 0x0A	; 10
 318:	31 f4       	brne	.+12     	; 0x326 <__itoa_ncheck+0x12>
 31a:	99 23       	and	r25, r25
 31c:	22 f4       	brpl	.+8      	; 0x326 <__itoa_ncheck+0x12>
 31e:	bd e2       	ldi	r27, 0x2D	; 45
 320:	90 95       	com	r25
 322:	81 95       	neg	r24
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	0c 94 96 01 	jmp	0x32c	; 0x32c <__utoa_common>

0000032a <__utoa_ncheck>:
 32a:	bb 27       	eor	r27, r27

0000032c <__utoa_common>:
 32c:	fb 01       	movw	r30, r22
 32e:	55 27       	eor	r21, r21
 330:	aa 27       	eor	r26, r26
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	aa 1f       	adc	r26, r26
 338:	a4 17       	cp	r26, r20
 33a:	10 f0       	brcs	.+4      	; 0x340 <__utoa_common+0x14>
 33c:	a4 1b       	sub	r26, r20
 33e:	83 95       	inc	r24
 340:	50 51       	subi	r21, 0x10	; 16
 342:	b9 f7       	brne	.-18     	; 0x332 <__utoa_common+0x6>
 344:	a0 5d       	subi	r26, 0xD0	; 208
 346:	aa 33       	cpi	r26, 0x3A	; 58
 348:	08 f0       	brcs	.+2      	; 0x34c <__utoa_common+0x20>
 34a:	a9 5d       	subi	r26, 0xD9	; 217
 34c:	a1 93       	st	Z+, r26
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	79 f7       	brne	.-34     	; 0x330 <__utoa_common+0x4>
 352:	b1 11       	cpse	r27, r1
 354:	b1 93       	st	Z+, r27
 356:	11 92       	st	Z+, r1
 358:	cb 01       	movw	r24, r22
 35a:	0c 94 af 01 	jmp	0x35e	; 0x35e <strrev>

0000035e <strrev>:
 35e:	dc 01       	movw	r26, r24
 360:	fc 01       	movw	r30, r24
 362:	67 2f       	mov	r22, r23
 364:	71 91       	ld	r23, Z+
 366:	77 23       	and	r23, r23
 368:	e1 f7       	brne	.-8      	; 0x362 <strrev+0x4>
 36a:	32 97       	sbiw	r30, 0x02	; 2
 36c:	04 c0       	rjmp	.+8      	; 0x376 <strrev+0x18>
 36e:	7c 91       	ld	r23, X
 370:	6d 93       	st	X+, r22
 372:	70 83       	st	Z, r23
 374:	62 91       	ld	r22, -Z
 376:	ae 17       	cp	r26, r30
 378:	bf 07       	cpc	r27, r31
 37a:	c8 f3       	brcs	.-14     	; 0x36e <strrev+0x10>
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
