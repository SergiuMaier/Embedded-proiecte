
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097e  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "main_func.h"
#include "USART_func.h"

int main(void)
{	
	DDRB = 0x01;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  aa:	15 b8       	out	0x05, r1	; 5
	//init_devices();
	USART_Init(MYUBRR);
  ac:	67 e6       	ldi	r22, 0x67	; 103
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_Init>
   
    while(1) 
    {
		//PORTB |= (1 << PINB0);  
		//apelare();
		send_data("aprins\n\r");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 bf 00 	call	0x17e	; 0x17e <send_data>
  c0:	fb cf       	rjmp	.-10     	; 0xb8 <main+0x12>

000000c2 <__vector_14>:
	timer_init();
	
	sei();
}

ISR(TIMER0_COMPA_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
	
	cli();
  de:	f8 94       	cli
	
	contor++;
  e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <contor>
  e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <contor+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <contor+0x1>
  ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <contor>
	
	if(contor >= 1000)
  f2:	88 3e       	cpi	r24, 0xE8	; 232
  f4:	93 40       	sbci	r25, 0x03	; 3
  f6:	14 f1       	brlt	.+68     	; 0x13c <__vector_14+0x7a>
	{
		secunde++;
  f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <secunde>
  fc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <secunde+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <secunde+0x1>
 106:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <secunde>
		contor = 0;	
 10a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <contor+0x1>
 10e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <contor>
		
		if(secunde >= 60)
 112:	8c 33       	cpi	r24, 0x3C	; 60
 114:	91 05       	cpc	r25, r1
 116:	94 f0       	brlt	.+36     	; 0x13c <__vector_14+0x7a>
		{
			minute++;
 118:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 11c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__data_end+0x1>
 128:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__data_end>
			secunde %= 60;
 12c:	6c e3       	ldi	r22, 0x3C	; 60
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 cc 00 	call	0x198	; 0x198 <__divmodhi4>
 134:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <secunde+0x1>
 138:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <secunde>
		}
	}
	
	sei();
 13c:	78 94       	sei
}
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <USART_Init>:
unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	
	return UDR0;
}
 15a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 162:	88 e1       	ldi	r24, 0x18	; 24
 164:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 16e:	08 95       	ret

00000170 <USART_Transmit>:
 170:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 174:	95 ff       	sbrs	r25, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <USART_Transmit>
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17c:	08 95       	ret

0000017e <send_data>:

void send_data(char *ptr){
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
	
	while(*ptr != 0x00)
 184:	03 c0       	rjmp	.+6      	; 0x18c <send_data+0xe>
	{
		USART_Transmit(*ptr);
 186:	0e 94 b8 00 	call	0x170	; 0x170 <USART_Transmit>
		ptr++;
 18a:	21 96       	adiw	r28, 0x01	; 1
	return UDR0;
}

void send_data(char *ptr){
	
	while(*ptr != 0x00)
 18c:	88 81       	ld	r24, Y
 18e:	81 11       	cpse	r24, r1
 190:	fa cf       	rjmp	.-12     	; 0x186 <send_data+0x8>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <__divmodhi4>:
 198:	97 fb       	bst	r25, 7
 19a:	07 2e       	mov	r0, r23
 19c:	16 f4       	brtc	.+4      	; 0x1a2 <__divmodhi4+0xa>
 19e:	00 94       	com	r0
 1a0:	07 d0       	rcall	.+14     	; 0x1b0 <__divmodhi4_neg1>
 1a2:	77 fd       	sbrc	r23, 7
 1a4:	09 d0       	rcall	.+18     	; 0x1b8 <__divmodhi4_neg2>
 1a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__udivmodhi4>
 1aa:	07 fc       	sbrc	r0, 7
 1ac:	05 d0       	rcall	.+10     	; 0x1b8 <__divmodhi4_neg2>
 1ae:	3e f4       	brtc	.+14     	; 0x1be <__divmodhi4_exit>

000001b0 <__divmodhi4_neg1>:
 1b0:	90 95       	com	r25
 1b2:	81 95       	neg	r24
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	08 95       	ret

000001b8 <__divmodhi4_neg2>:
 1b8:	70 95       	com	r23
 1ba:	61 95       	neg	r22
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255

000001be <__divmodhi4_exit>:
 1be:	08 95       	ret

000001c0 <__udivmodhi4>:
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	51 e1       	ldi	r21, 0x11	; 17
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <__udivmodhi4_ep>

000001c8 <__udivmodhi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	a6 17       	cp	r26, r22
 1ce:	b7 07       	cpc	r27, r23
 1d0:	10 f0       	brcs	.+4      	; 0x1d6 <__udivmodhi4_ep>
 1d2:	a6 1b       	sub	r26, r22
 1d4:	b7 0b       	sbc	r27, r23

000001d6 <__udivmodhi4_ep>:
 1d6:	88 1f       	adc	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	5a 95       	dec	r21
 1dc:	a9 f7       	brne	.-22     	; 0x1c8 <__udivmodhi4_loop>
 1de:	80 95       	com	r24
 1e0:	90 95       	com	r25
 1e2:	bc 01       	movw	r22, r24
 1e4:	cd 01       	movw	r24, r26
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
