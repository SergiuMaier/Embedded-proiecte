
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  00800118  00800118  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca9  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e0  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f8  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041c  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000138  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3e       	cpi	r26, 0xE8	; 232
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6e 00 	call	0xdc	; 0xdc <init_devices>
	USART_Init(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 3b 01 	call	0x276	; 0x276 <USART_Init>
	
	while(1) 
    { 		
		SendData(CLEAR);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		afisare_timp();
  ba:	0e 94 73 00 	call	0xe6	; 0xe6 <afisare_timp>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0xc>

000000c0 <timer_init>:

#include "timer.h"

void timer_init(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  d0:	ee e6       	ldi	r30, 0x6E	; 110
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <init_devices>:
}

void init_devices(){
	
	cli();
  dc:	f8 94       	cli
	
	timer_init();
  de:	0e 94 60 00 	call	0xc0	; 0xc0 <timer_init>
	
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
  e6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
  ea:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ee:	4a e0       	ldi	r20, 0x0A	; 10
  f0:	64 e8       	ldi	r22, 0x84	; 132
  f2:	71 e0       	ldi	r23, 0x01	; 1
  f4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__itoa_ncheck>
	itoa(minute, ch_min, 10);
  f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
  fc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 100:	4a e0       	ldi	r20, 0x0A	; 10
 102:	60 e2       	ldi	r22, 0x20	; 32
 104:	71 e0       	ldi	r23, 0x01	; 1
 106:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__itoa_ncheck>
	
	SendData("Timp:");
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
	
	if(secunde >= 60)
 112:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 116:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 11a:	cc 97       	sbiw	r24, 0x3c	; 60
 11c:	70 f0       	brcs	.+28     	; 0x13a <afisare_timp+0x54>
	{
		minute++;
 11e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
 122:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <minute+0x1>
 12c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <minute>
		secunde = 0;
 130:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <secunde+0x1>
 134:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <secunde>
 138:	08 95       	ret
	}
	else if((secunde < 10) && (minute < 10))
 13a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 13e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 142:	0a 97       	sbiw	r24, 0x0a	; 10
 144:	b8 f4       	brcc	.+46     	; 0x174 <afisare_timp+0x8e>
 146:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
 14a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 14e:	0a 97       	sbiw	r24, 0x0a	; 10
 150:	88 f4       	brcc	.+34     	; 0x174 <afisare_timp+0x8e>
	{
		SendData(" 0");
 152:	81 e1       	ldi	r24, 0x11	; 17
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_min);
 15a:	80 e2       	ldi	r24, 0x20	; 32
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(":0");
 162:	84 e1       	ldi	r24, 0x14	; 20
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_sec);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
 172:	08 95       	ret
	}
	else if((secunde < 10) && (minute >= 10))
 174:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 178:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 17c:	0a 97       	sbiw	r24, 0x0a	; 10
 17e:	98 f4       	brcc	.+38     	; 0x1a6 <afisare_timp+0xc0>
 180:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
 184:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 188:	0a 97       	sbiw	r24, 0x0a	; 10
 18a:	68 f0       	brcs	.+26     	; 0x1a6 <afisare_timp+0xc0>
	{
		SendData(ch_min);
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(":0");
 194:	84 e1       	ldi	r24, 0x14	; 20
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_sec);
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
 1a4:	08 95       	ret
	}
	else if((secunde >= 10) && (minute < 10))
 1a6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 1aa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 1ae:	0a 97       	sbiw	r24, 0x0a	; 10
 1b0:	b8 f0       	brcs	.+46     	; 0x1e0 <afisare_timp+0xfa>
 1b2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
 1b6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 1ba:	0a 97       	sbiw	r24, 0x0a	; 10
 1bc:	88 f4       	brcc	.+34     	; 0x1e0 <afisare_timp+0xfa>
	{
		SendData(" 0");
 1be:	81 e1       	ldi	r24, 0x11	; 17
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_min);
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(":");
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_sec);
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
 1de:	08 95       	ret
	}
	else if((secunde >= 10) && (minute >= 10))
 1e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 1e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 1e8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ea:	90 f0       	brcs	.+36     	; 0x210 <afisare_timp+0x12a>
 1ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minute>
 1f0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <minute+0x1>
 1f4:	0a 97       	sbiw	r24, 0x0a	; 10
 1f6:	60 f0       	brcs	.+24     	; 0x210 <afisare_timp+0x12a>
	{
		SendData(ch_min);
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(":");
 200:	8f e0       	ldi	r24, 0x0F	; 15
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
		SendData(ch_sec);
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendData>
 210:	08 95       	ret

00000212 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	2f 93       	push	r18
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
	
	cli();
 222:	f8 94       	cli
	
	flag_timer = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <flag_timer>
	contor++;
 22a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contor>
 22e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <contor+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <contor+0x1>
 238:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <contor>
	
	if(contor >= 1000){
 23c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <contor>
 240:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <contor+0x1>
 244:	88 3e       	cpi	r24, 0xE8	; 232
 246:	93 40       	sbci	r25, 0x03	; 3
 248:	68 f0       	brcs	.+26     	; 0x264 <__vector_14+0x52>
		secunde++;
 24a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <secunde>
 24e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <secunde+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <secunde+0x1>
 258:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <secunde>
		contor = 0;
 25c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <contor+0x1>
 260:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <contor>
	}
	
	sei();
 264:	78 94       	sei
}
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <USART_Init>:
#include "timer.h"
extern uint8_t flag_timer;

void USART_Init(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 276:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 27a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 61       	ori	r24, 0x18	; 24
 286:	80 83       	st	Z, r24
	UCSR0B |= (1 << UDRIE0);	
 288:	80 81       	ld	r24, Z
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 28e:	e2 ec       	ldi	r30, 0xC2	; 194
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	8e 60       	ori	r24, 0x0E	; 14
 296:	80 83       	st	Z, r24
	
	sei();
 298:	78 94       	sei
 29a:	08 95       	ret

0000029c <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	8f 93       	push	r24

	flag = 1;		
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>

}
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <SendData>:

void SendData(char *c){
 2ba:	fc 01       	movw	r30, r24

	while(*c != '\0')
 2bc:	0f c0       	rjmp	.+30     	; 0x2dc <SendData+0x22>
	{	
		if((flag == 1) && (flag_timer == 1))
 2be:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 2c2:	21 30       	cpi	r18, 0x01	; 1
 2c4:	59 f4       	brne	.+22     	; 0x2dc <SendData+0x22>
 2c6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <flag_timer>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	39 f4       	brne	.+14     	; 0x2dc <SendData+0x22>
		{
			UDR0 = *c;
 2ce:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2d2:	31 96       	adiw	r30, 0x01	; 1
			
			flag = 0;
 2d4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
			flag_timer = 0;
 2d8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <flag_timer>

}

void SendData(char *c){

	while(*c != '\0')
 2dc:	90 81       	ld	r25, Z
 2de:	91 11       	cpse	r25, r1
 2e0:	ee cf       	rjmp	.-36     	; 0x2be <SendData+0x4>
			
			flag = 0;
			flag_timer = 0;
		}
	}
 2e2:	08 95       	ret

000002e4 <__itoa_ncheck>:
 2e4:	bb 27       	eor	r27, r27
 2e6:	4a 30       	cpi	r20, 0x0A	; 10
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <__itoa_ncheck+0x12>
 2ea:	99 23       	and	r25, r25
 2ec:	22 f4       	brpl	.+8      	; 0x2f6 <__itoa_ncheck+0x12>
 2ee:	bd e2       	ldi	r27, 0x2D	; 45
 2f0:	90 95       	com	r25
 2f2:	81 95       	neg	r24
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__utoa_common>

000002fa <__utoa_ncheck>:
 2fa:	bb 27       	eor	r27, r27

000002fc <__utoa_common>:
 2fc:	fb 01       	movw	r30, r22
 2fe:	55 27       	eor	r21, r21
 300:	aa 27       	eor	r26, r26
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	a4 17       	cp	r26, r20
 30a:	10 f0       	brcs	.+4      	; 0x310 <__utoa_common+0x14>
 30c:	a4 1b       	sub	r26, r20
 30e:	83 95       	inc	r24
 310:	50 51       	subi	r21, 0x10	; 16
 312:	b9 f7       	brne	.-18     	; 0x302 <__utoa_common+0x6>
 314:	a0 5d       	subi	r26, 0xD0	; 208
 316:	aa 33       	cpi	r26, 0x3A	; 58
 318:	08 f0       	brcs	.+2      	; 0x31c <__utoa_common+0x20>
 31a:	a9 5d       	subi	r26, 0xD9	; 217
 31c:	a1 93       	st	Z+, r26
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	79 f7       	brne	.-34     	; 0x300 <__utoa_common+0x4>
 322:	b1 11       	cpse	r27, r1
 324:	b1 93       	st	Z+, r27
 326:	11 92       	st	Z+, r1
 328:	cb 01       	movw	r24, r22
 32a:	0c 94 97 01 	jmp	0x32e	; 0x32e <strrev>

0000032e <strrev>:
 32e:	dc 01       	movw	r26, r24
 330:	fc 01       	movw	r30, r24
 332:	67 2f       	mov	r22, r23
 334:	71 91       	ld	r23, Z+
 336:	77 23       	and	r23, r23
 338:	e1 f7       	brne	.-8      	; 0x332 <strrev+0x4>
 33a:	32 97       	sbiw	r30, 0x02	; 2
 33c:	04 c0       	rjmp	.+8      	; 0x346 <strrev+0x18>
 33e:	7c 91       	ld	r23, X
 340:	6d 93       	st	X+, r22
 342:	70 83       	st	Z, r23
 344:	62 91       	ld	r22, -Z
 346:	ae 17       	cp	r26, r30
 348:	bf 07       	cpc	r27, r31
 34a:	c8 f3       	brcs	.-14     	; 0x33e <strrev+0x10>
 34c:	08 95       	ret

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
