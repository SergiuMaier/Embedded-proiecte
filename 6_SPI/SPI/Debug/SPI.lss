
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000019e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  0000023c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099e  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000806  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "main_func.h"
#include "USART_func.h"

int main(void)
{	
	init_devices();
  a6:	0e 94 7d 00 	call	0xfa	; 0xfa <init_devices>
	USART_Init(MYUBRR);
  aa:	67 e6       	ldi	r22, 0x67	; 103
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Init>
   
    while(1) 
    {
		send_data("secunde\r\n");
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 84 00 	call	0x108	; 0x108 <send_data>
  be:	fb cf       	rjmp	.-10     	; 0xb6 <main+0x10>

000000c0 <interrupt_init>:
#include "main_defines.h"
#include "USART_func.h"

void interrupt_init(void){
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
  ca:	8d b3       	in	r24, 0x1d	; 29
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
  d0:	8c b3       	in	r24, 0x1c	; 28
  d2:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
  d4:	e8 e6       	ldi	r30, 0x68	; 104
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <timer_init>:
}

void timer_init(void){
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9; 
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1<<CS02)|(0<<CS01)|(0<<CS00); //256
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  ee:	ee e6       	ldi	r30, 0x6E	; 110
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <init_devices>:
}

void init_devices(){
	
	cli();
  fa:	f8 94       	cli
	
	interrupt_init();
  fc:	0e 94 60 00 	call	0xc0	; 0xc0 <interrupt_init>
	timer_init();
 100:	0e 94 6f 00 	call	0xde	; 0xde <timer_init>
	
	sei();
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <send_data>:
		//ore++;
		//minute %= 60;
	//}
//}

void send_data(char *ptr){
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
	
	while(*ptr != 0x00)
 10e:	04 c0       	rjmp	.+8      	; 0x118 <send_data+0x10>
	{
		USART_Transmit(*ptr);
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_Transmit>
		ptr++;
 116:	21 96       	adiw	r28, 0x01	; 1
	//}
//}

void send_data(char *ptr){
	
	while(*ptr != 0x00)
 118:	88 81       	ld	r24, Y
 11a:	81 11       	cpse	r24, r1
 11c:	f9 cf       	rjmp	.-14     	; 0x110 <send_data+0x8>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	
	cli();
 132:	f8 94       	cli
	
	contor++;
 134:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <contor>
 138:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <contor+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <contor+0x1>
 142:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <contor>
	
	if(contor >= 250)
 146:	8a 3f       	cpi	r24, 0xFA	; 250
 148:	91 05       	cpc	r25, r1
 14a:	6c f0       	brlt	.+26     	; 0x166 <__vector_14+0x42>
	{
		secunde++;
 14c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <secunde>
 150:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <secunde+0x1>
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <secunde+0x1>
 15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <secunde>
		contor = 0;
 15e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <contor+0x1>
 162:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <contor>
			//increment_minute();
			//secunde %= 60;
		//}	
	}
	
	sei();
 166:	78 94       	sei
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <USART_Init>:
#include "main_defines.h"
#include "USART_func.h"

void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8);
 176:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 17a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);	
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 18a:	08 95       	ret

0000018c <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
 18c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	95 ff       	sbrs	r25, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <USART_Transmit>
	
	UDR0 = data;
 194:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
