
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800112  00800112  000002bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abb  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00000e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000452  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017f  00000000  00000000  000020fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

int main(void)
{	
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	char val[10];
	int a = 0;

	//init_devices();	
	USART_Init(MYUBRR);
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 b5 00 	call	0x16a	; 0x16a <USART_Init>
#include <util/delay.h>

int main(void)
{	
	char val[10];
	int a = 0;
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c6:	4a e0       	ldi	r20, 0x0A	; 10
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	c8 01       	movw	r24, r16
  d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__itoa_ncheck>
	
    while(1) 
    { 
		itoa(a, val, 10);
		
		if(a < 10){
  d4:	0a 30       	cpi	r16, 0x0A	; 10
  d6:	11 05       	cpc	r17, r1
  d8:	2c f4       	brge	.+10     	; 0xe4 <main+0x3e>
			SendData("00:00:0");
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 c7 00 	call	0x18e	; 0x18e <SendData>
  e2:	04 c0       	rjmp	.+8      	; 0xec <main+0x46>
			//a++;
		}
		else{
			SendData("00:00:");	
  e4:	88 e0       	ldi	r24, 0x08	; 8
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 c7 00 	call	0x18e	; 0x18e <SendData>
			//a++;
		}
		a++;
  ec:	0f 5f       	subi	r16, 0xFF	; 255
  ee:	1f 4f       	sbci	r17, 0xFF	; 255
		SendData(val);
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 c7 00 	call	0x18e	; 0x18e <SendData>
		SendData("\n\r");
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 c7 00 	call	0x18e	; 0x18e <SendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	83 ed       	ldi	r24, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x60>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x6a>
 110:	00 00       	nop
 112:	d9 cf       	rjmp	.-78     	; 0xc6 <main+0x20>

00000114 <__vector_14>:
	timer_init();
	
	sei();
}

ISR(TIMER0_COMPA_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	
	cli();
 124:	f8 94       	cli
	
	contor++;
 126:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <contor>
 12a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <contor+0x1>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <contor+0x1>
 134:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <contor>
	
	if(contor >= 1000){
 138:	88 3e       	cpi	r24, 0xE8	; 232
 13a:	93 40       	sbci	r25, 0x03	; 3
 13c:	6c f0       	brlt	.+26     	; 0x158 <__vector_14+0x44>
		secunde++;
 13e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <secunde>
 142:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <secunde+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <secunde+0x1>
 14c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <secunde>
		contor = 0;
 150:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <contor+0x1>
 154:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <contor>
	}
	
	sei();
 158:	78 94       	sei
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <USART_Init>:
unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	
	return UDR0;
}
 16a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 16e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 178:	8e e0       	ldi	r24, 0x0E	; 14
 17a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 17e:	08 95       	ret

00000180 <USART_Transmit>:
 180:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 184:	95 ff       	sbrs	r25, 5
 186:	fc cf       	rjmp	.-8      	; 0x180 <USART_Transmit>
 188:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 18c:	08 95       	ret

0000018e <SendData>:

void SendData(char *ptr){
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	ec 01       	movw	r28, r24
	
	while(*ptr != 0x00)
 194:	03 c0       	rjmp	.+6      	; 0x19c <SendData+0xe>
	{
		USART_Transmit(*ptr);
 196:	0e 94 c0 00 	call	0x180	; 0x180 <USART_Transmit>
		ptr++;
 19a:	21 96       	adiw	r28, 0x01	; 1
	return UDR0;
}

void SendData(char *ptr){
	
	while(*ptr != 0x00)
 19c:	88 81       	ld	r24, Y
 19e:	81 11       	cpse	r24, r1
 1a0:	fa cf       	rjmp	.-12     	; 0x196 <SendData+0x8>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__itoa_ncheck>:
 1a8:	bb 27       	eor	r27, r27
 1aa:	4a 30       	cpi	r20, 0x0A	; 10
 1ac:	31 f4       	brne	.+12     	; 0x1ba <__itoa_ncheck+0x12>
 1ae:	99 23       	and	r25, r25
 1b0:	22 f4       	brpl	.+8      	; 0x1ba <__itoa_ncheck+0x12>
 1b2:	bd e2       	ldi	r27, 0x2D	; 45
 1b4:	90 95       	com	r25
 1b6:	81 95       	neg	r24
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__utoa_common>

000001be <__utoa_ncheck>:
 1be:	bb 27       	eor	r27, r27

000001c0 <__utoa_common>:
 1c0:	fb 01       	movw	r30, r22
 1c2:	55 27       	eor	r21, r21
 1c4:	aa 27       	eor	r26, r26
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	aa 1f       	adc	r26, r26
 1cc:	a4 17       	cp	r26, r20
 1ce:	10 f0       	brcs	.+4      	; 0x1d4 <__utoa_common+0x14>
 1d0:	a4 1b       	sub	r26, r20
 1d2:	83 95       	inc	r24
 1d4:	50 51       	subi	r21, 0x10	; 16
 1d6:	b9 f7       	brne	.-18     	; 0x1c6 <__utoa_common+0x6>
 1d8:	a0 5d       	subi	r26, 0xD0	; 208
 1da:	aa 33       	cpi	r26, 0x3A	; 58
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__utoa_common+0x20>
 1de:	a9 5d       	subi	r26, 0xD9	; 217
 1e0:	a1 93       	st	Z+, r26
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	79 f7       	brne	.-34     	; 0x1c4 <__utoa_common+0x4>
 1e6:	b1 11       	cpse	r27, r1
 1e8:	b1 93       	st	Z+, r27
 1ea:	11 92       	st	Z+, r1
 1ec:	cb 01       	movw	r24, r22
 1ee:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <strrev>

000001f2 <strrev>:
 1f2:	dc 01       	movw	r26, r24
 1f4:	fc 01       	movw	r30, r24
 1f6:	67 2f       	mov	r22, r23
 1f8:	71 91       	ld	r23, Z+
 1fa:	77 23       	and	r23, r23
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <strrev+0x4>
 1fe:	32 97       	sbiw	r30, 0x02	; 2
 200:	04 c0       	rjmp	.+8      	; 0x20a <strrev+0x18>
 202:	7c 91       	ld	r23, X
 204:	6d 93       	st	X+, r22
 206:	70 83       	st	Z, r23
 208:	62 91       	ld	r22, -Z
 20a:	ae 17       	cp	r26, r30
 20c:	bf 07       	cpc	r27, r31
 20e:	c8 f3       	brcs	.-14     	; 0x202 <strrev+0x10>
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
