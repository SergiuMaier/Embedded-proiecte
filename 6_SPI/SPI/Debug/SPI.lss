
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  00800112  00800112  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c1b  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b0  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_18>
  4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3e       	cpi	r26, 0xE2	; 226
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_devices>
	USART_Init(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 2b 01 	call	0x256	; 0x256 <USART_Init>
	
	while(1) 
    { 		
		afisare_timp();
  b2:	0e 94 6f 00 	call	0xde	; 0xde <afisare_timp>
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <timer_init>:

#include "timer.h"

void timer_init(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <init_devices>:
}

void init_devices(){
	
	cli();
  d4:	f8 94       	cli
	
	timer_init();
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <timer_init>
	
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
  e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e6:	4a e0       	ldi	r20, 0x0A	; 10
  e8:	6e e7       	ldi	r22, 0x7E	; 126
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__itoa_ncheck>
	itoa(minute, ch_min, 10);
  f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
  f4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	6a e1       	ldi	r22, 0x1A	; 26
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__itoa_ncheck>
		
	if(flag_timer == 1)
 102:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <flag_timer>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	c1 f5       	brne	.+112    	; 0x17a <afisare_timp+0x9c>
	{	
		SendData(CLEAR);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
		SendData("Timp: ");
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
		
		if(minute < 10)
 11a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 11e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 122:	0a 97       	sbiw	r24, 0x0a	; 10
 124:	48 f4       	brcc	.+18     	; 0x138 <afisare_timp+0x5a>
		{
			SendData(" 0");
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
			SendData(ch_min);
 12e:	8a e1       	ldi	r24, 0x1A	; 26
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
 136:	08 c0       	rjmp	.+16     	; 0x148 <afisare_timp+0x6a>
		}
		else
		{
			SendData(" ");
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
			SendData(ch_min);
 140:	8a e1       	ldi	r24, 0x1A	; 26
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
		}
		
		if(secunde <= 10){
 148:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 14c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 150:	0b 97       	sbiw	r24, 0x0b	; 11
 152:	48 f4       	brcc	.+18     	; 0x166 <afisare_timp+0x88>
			SendData(":0");
 154:	8d e0       	ldi	r24, 0x0D	; 13
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
			SendData(ch_sec);
 15c:	8e e7       	ldi	r24, 0x7E	; 126
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
 164:	08 c0       	rjmp	.+16     	; 0x176 <afisare_timp+0x98>
		}
		else
		{
			SendData(":");
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
			SendData(ch_sec);
 16e:	8e e7       	ldi	r24, 0x7E	; 126
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SendData>
			//SendData(ch_min);
			//SendData(":");
			//SendData(ch_sec);
		//}
		
		flag_timer = 0;
 176:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flag_timer>
 17a:	08 95       	ret

0000017c <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
	
	cli();
 19a:	f8 94       	cli
	
	contor++;
 19c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <contor>
 1a0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <contor+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <contor+0x1>
 1aa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <contor>
	
	if(contor >= 1000){
 1ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <contor>
 1b2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <contor+0x1>
 1b6:	88 3e       	cpi	r24, 0xE8	; 232
 1b8:	93 40       	sbci	r25, 0x03	; 3
 1ba:	e8 f1       	brcs	.+122    	; 0x236 <__vector_14+0xba>
		++secunde;
 1bc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 1c0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 1c4:	01 96       	adiw	r24, 0x01	; 1
 1c6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <secunde+0x1>
 1ca:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <secunde>
		flag_timer = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <flag_timer>
		contor = 0;
 1d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <contor+0x1>
 1d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <contor>
		
		if(secunde >= 60)
 1dc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 1e0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 1e4:	cc 97       	sbiw	r24, 0x3c	; 60
 1e6:	38 f1       	brcs	.+78     	; 0x236 <__vector_14+0xba>
		{
			secunde %= 60;
 1e8:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <secunde>
 1ec:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <secunde+0x1>
 1f0:	9a 01       	movw	r18, r20
 1f2:	a9 e8       	ldi	r26, 0x89	; 137
 1f4:	b8 e8       	ldi	r27, 0x88	; 136
 1f6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__umulhisi3>
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	92 95       	swap	r25
 200:	82 95       	swap	r24
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	89 27       	eor	r24, r25
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	89 27       	eor	r24, r25
 20a:	6c e3       	ldi	r22, 0x3C	; 60
 20c:	68 9f       	mul	r22, r24
 20e:	90 01       	movw	r18, r0
 210:	69 9f       	mul	r22, r25
 212:	30 0d       	add	r19, r0
 214:	11 24       	eor	r1, r1
 216:	ca 01       	movw	r24, r20
 218:	82 1b       	sub	r24, r18
 21a:	93 0b       	sbc	r25, r19
 21c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <secunde+0x1>
 220:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <secunde>
			++minute;
 224:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 228:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <minute+0x1>
 232:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <minute>
		}
	}
	
	sei();
 236:	78 94       	sei
}
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <USART_Init>:
#include "USART.h"
#include "timer.h"

void USART_Init(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 256:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 25a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 25e:	e1 ec       	ldi	r30, 0xC1	; 193
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 61       	ori	r24, 0x18	; 24
 266:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 268:	80 81       	ld	r24, Z
 26a:	80 6a       	ori	r24, 0xA0	; 160
 26c:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 26e:	e2 ec       	ldi	r30, 0xC2	; 194
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8e 60       	ori	r24, 0x0E	; 14
 276:	80 83       	st	Z, r24
	
	sei();
 278:	78 94       	sei
 27a:	08 95       	ret

0000027c <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	8f 93       	push	r24

	flag = 1;	
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_18>:

ISR(USART_RX_vect){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	8f 93       	push	r24
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31

	char rec;
	rec = UDR0;   //preiau valoarea receptata 
 2aa:	e6 ec       	ldi	r30, 0xC6	; 198
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
	UDR0 = rec;   //echo 
 2b0:	80 83       	st	Z, r24
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <SendData>:

void SendData(char *c){
 2c2:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <SendData+0x16>
	{
		if(flag == 1)
 2c6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
 2ca:	21 30       	cpi	r18, 0x01	; 1
 2cc:	29 f4       	brne	.+10     	; 0x2d8 <SendData+0x16>
		{			
			UDR0 = *c;
 2ce:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2d2:	31 96       	adiw	r30, 0x01	; 1
			flag = 0;
 2d4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	UDR0 = rec;   //echo 
}

void SendData(char *c){
	
	while(*c != '\0')
 2d8:	90 81       	ld	r25, Z
 2da:	91 11       	cpse	r25, r1
 2dc:	f4 cf       	rjmp	.-24     	; 0x2c6 <SendData+0x4>
			UDR0 = *c;
			c++;
			flag = 0;
		}
	}
 2de:	08 95       	ret

000002e0 <__umulhisi3>:
 2e0:	a2 9f       	mul	r26, r18
 2e2:	b0 01       	movw	r22, r0
 2e4:	b3 9f       	mul	r27, r19
 2e6:	c0 01       	movw	r24, r0
 2e8:	a3 9f       	mul	r26, r19
 2ea:	70 0d       	add	r23, r0
 2ec:	81 1d       	adc	r24, r1
 2ee:	11 24       	eor	r1, r1
 2f0:	91 1d       	adc	r25, r1
 2f2:	b2 9f       	mul	r27, r18
 2f4:	70 0d       	add	r23, r0
 2f6:	81 1d       	adc	r24, r1
 2f8:	11 24       	eor	r1, r1
 2fa:	91 1d       	adc	r25, r1
 2fc:	08 95       	ret

000002fe <__itoa_ncheck>:
 2fe:	bb 27       	eor	r27, r27
 300:	4a 30       	cpi	r20, 0x0A	; 10
 302:	31 f4       	brne	.+12     	; 0x310 <__itoa_ncheck+0x12>
 304:	99 23       	and	r25, r25
 306:	22 f4       	brpl	.+8      	; 0x310 <__itoa_ncheck+0x12>
 308:	bd e2       	ldi	r27, 0x2D	; 45
 30a:	90 95       	com	r25
 30c:	81 95       	neg	r24
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	0c 94 8b 01 	jmp	0x316	; 0x316 <__utoa_common>

00000314 <__utoa_ncheck>:
 314:	bb 27       	eor	r27, r27

00000316 <__utoa_common>:
 316:	fb 01       	movw	r30, r22
 318:	55 27       	eor	r21, r21
 31a:	aa 27       	eor	r26, r26
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	aa 1f       	adc	r26, r26
 322:	a4 17       	cp	r26, r20
 324:	10 f0       	brcs	.+4      	; 0x32a <__utoa_common+0x14>
 326:	a4 1b       	sub	r26, r20
 328:	83 95       	inc	r24
 32a:	50 51       	subi	r21, 0x10	; 16
 32c:	b9 f7       	brne	.-18     	; 0x31c <__utoa_common+0x6>
 32e:	a0 5d       	subi	r26, 0xD0	; 208
 330:	aa 33       	cpi	r26, 0x3A	; 58
 332:	08 f0       	brcs	.+2      	; 0x336 <__utoa_common+0x20>
 334:	a9 5d       	subi	r26, 0xD9	; 217
 336:	a1 93       	st	Z+, r26
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	79 f7       	brne	.-34     	; 0x31a <__utoa_common+0x4>
 33c:	b1 11       	cpse	r27, r1
 33e:	b1 93       	st	Z+, r27
 340:	11 92       	st	Z+, r1
 342:	cb 01       	movw	r24, r22
 344:	0c 94 a4 01 	jmp	0x348	; 0x348 <strrev>

00000348 <strrev>:
 348:	dc 01       	movw	r26, r24
 34a:	fc 01       	movw	r30, r24
 34c:	67 2f       	mov	r22, r23
 34e:	71 91       	ld	r23, Z+
 350:	77 23       	and	r23, r23
 352:	e1 f7       	brne	.-8      	; 0x34c <strrev+0x4>
 354:	32 97       	sbiw	r30, 0x02	; 2
 356:	04 c0       	rjmp	.+8      	; 0x360 <strrev+0x18>
 358:	7c 91       	ld	r23, X
 35a:	6d 93       	st	X+, r22
 35c:	70 83       	st	Z, r23
 35e:	62 91       	ld	r22, -Z
 360:	ae 17       	cp	r26, r30
 362:	bf 07       	cpc	r27, r31
 364:	c8 f3       	brcs	.-14     	; 0x358 <strrev+0x10>
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
