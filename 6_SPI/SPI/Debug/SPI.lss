
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a4  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081f  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  00001e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "main_func.h"
#include "USART_func.h"

int main(void)
{	
	init_devices();
  a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_devices>
	USART_Init(MYUBRR);
  aa:	67 e6       	ldi	r22, 0x67	; 103
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 c8 00 	call	0x190	; 0x190 <USART_Init>
   
    while(1) 
    {
		apelare();
  b6:	0e 94 bd 00 	call	0x17a	; 0x17a <apelare>
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x10>

000000bc <timer_init>:
#include "main_defines.h"
#include "USART_func.h"

void timer_init(void){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9; 
  c2:	89 ef       	ldi	r24, 0xF9	; 249
  c4:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //64
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  cc:	ee e6       	ldi	r30, 0x6E	; 110
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <init_devices>:
}

void init_devices(){
	
	cli();
  d8:	f8 94       	cli
	
	timer_init();
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <timer_init>
	
	sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
	
	cli();
  fe:	f8 94       	cli
	
	contor++;
 100:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contor>
 104:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <contor+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <contor+0x1>
 10e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contor>
	
	if(contor >= 1000)
 112:	88 3e       	cpi	r24, 0xE8	; 232
 114:	93 40       	sbci	r25, 0x03	; 3
 116:	14 f1       	brlt	.+68     	; 0x15c <__vector_14+0x7a>
	{
		secunde++;
 118:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <secunde>
 11c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <secunde+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <secunde+0x1>
 126:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <secunde>
		contor = 0;	
 12a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <contor+0x1>
 12e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <contor>
		
		if(secunde >= 60)
 132:	8c 33       	cpi	r24, 0x3C	; 60
 134:	91 05       	cpc	r25, r1
 136:	94 f0       	brlt	.+36     	; 0x15c <__vector_14+0x7a>
		{
			minute++;
 138:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 13c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 148:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
			secunde %= 60;
 14c:	6c e3       	ldi	r22, 0x3C	; 60
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__divmodhi4>
 154:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <secunde+0x1>
 158:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <secunde>
		}
	}
	
	sei();
 15c:	78 94       	sei
}
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <apelare>:

void apelare(){
	if(secunde == 10)
 17a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <secunde>
 17e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <secunde+0x1>
 182:	0a 97       	sbiw	r24, 0x0a	; 10
 184:	21 f4       	brne	.+8      	; 0x18e <apelare+0x14>
		send_data("secunde = 10\r\n");
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_data>
 18e:	08 95       	ret

00000190 <USART_Init>:
unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0)));
	
	return UDR0;
}
 190:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 194:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 198:	88 e1       	ldi	r24, 0x18	; 24
 19a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1a4:	08 95       	ret

000001a6 <USART_Transmit>:
 1a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <USART_Transmit>
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b2:	08 95       	ret

000001b4 <send_data>:

void send_data(char *ptr){
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
	
	while(*ptr != 0x00)
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <send_data+0xe>
	{
		USART_Transmit(*ptr);
 1bc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_Transmit>
		ptr++;
 1c0:	21 96       	adiw	r28, 0x01	; 1
	return UDR0;
}

void send_data(char *ptr){
	
	while(*ptr != 0x00)
 1c2:	88 81       	ld	r24, Y
 1c4:	81 11       	cpse	r24, r1
 1c6:	fa cf       	rjmp	.-12     	; 0x1bc <send_data+0x8>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <__divmodhi4>:
 1ce:	97 fb       	bst	r25, 7
 1d0:	07 2e       	mov	r0, r23
 1d2:	16 f4       	brtc	.+4      	; 0x1d8 <__divmodhi4+0xa>
 1d4:	00 94       	com	r0
 1d6:	07 d0       	rcall	.+14     	; 0x1e6 <__divmodhi4_neg1>
 1d8:	77 fd       	sbrc	r23, 7
 1da:	09 d0       	rcall	.+18     	; 0x1ee <__divmodhi4_neg2>
 1dc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__udivmodhi4>
 1e0:	07 fc       	sbrc	r0, 7
 1e2:	05 d0       	rcall	.+10     	; 0x1ee <__divmodhi4_neg2>
 1e4:	3e f4       	brtc	.+14     	; 0x1f4 <__divmodhi4_exit>

000001e6 <__divmodhi4_neg1>:
 1e6:	90 95       	com	r25
 1e8:	81 95       	neg	r24
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	08 95       	ret

000001ee <__divmodhi4_neg2>:
 1ee:	70 95       	com	r23
 1f0:	61 95       	neg	r22
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255

000001f4 <__divmodhi4_exit>:
 1f4:	08 95       	ret

000001f6 <__udivmodhi4>:
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	51 e1       	ldi	r21, 0x11	; 17
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__udivmodhi4_ep>

000001fe <__udivmodhi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	a6 17       	cp	r26, r22
 204:	b7 07       	cpc	r27, r23
 206:	10 f0       	brcs	.+4      	; 0x20c <__udivmodhi4_ep>
 208:	a6 1b       	sub	r26, r22
 20a:	b7 0b       	sbc	r27, r23

0000020c <__udivmodhi4_ep>:
 20c:	88 1f       	adc	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	5a 95       	dec	r21
 212:	a9 f7       	brne	.-22     	; 0x1fe <__udivmodhi4_loop>
 214:	80 95       	com	r24
 216:	90 95       	com	r25
 218:	bc 01       	movw	r22, r24
 21a:	cd 01       	movw	r24, r26
 21c:	08 95       	ret

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
