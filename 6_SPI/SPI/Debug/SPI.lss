
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000037e  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800148  00800148  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d10  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  000025b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_18>
  4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bd 01 	jmp	0x37a	; 0x37a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_devices>
	init_USART(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 34 01 	call	0x268	; 0x268 <init_USART>

	while(1) 
    { 	
		afisare_timp();
  b2:	0e 94 6f 00 	call	0xde	; 0xde <afisare_timp>
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <init_timer>:
void introducere_mesaj(){
	
	//SendData(CLEAR);
	
	SendData("\n\r\n\r");
	SendData("<txt>");
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	87 bd       	out	0x27, r24	; 39
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <init_devices>:
  d4:	f8 94       	cli
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <init_timer>
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <afisare_timp>:
  de:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
  e2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
  e6:	4a e0       	ldi	r20, 0x0A	; 10
  e8:	6b e5       	ldi	r22, 0x5B	; 91
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	0e 94 88 01 	call	0x310	; 0x310 <__itoa_ncheck>
  f0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
  f4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	61 e5       	ldi	r22, 0x51	; 81
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 88 01 	call	0x310	; 0x310 <__itoa_ncheck>
 102:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 106:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 10a:	cc 97       	sbiw	r24, 0x3c	; 60
 10c:	38 f1       	brcs	.+78     	; 0x15c <afisare_timp+0x7e>
 10e:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <secunde>
 112:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <secunde+0x1>
 116:	9a 01       	movw	r18, r20
 118:	a9 e8       	ldi	r26, 0x89	; 137
 11a:	b8 e8       	ldi	r27, 0x88	; 136
 11c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__umulhisi3>
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	92 95       	swap	r25
 126:	82 95       	swap	r24
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	89 27       	eor	r24, r25
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	89 27       	eor	r24, r25
 130:	6c e3       	ldi	r22, 0x3C	; 60
 132:	68 9f       	mul	r22, r24
 134:	90 01       	movw	r18, r0
 136:	69 9f       	mul	r22, r25
 138:	30 0d       	add	r19, r0
 13a:	11 24       	eor	r1, r1
 13c:	ca 01       	movw	r24, r20
 13e:	82 1b       	sub	r24, r18
 140:	93 0b       	sbc	r25, r19
 142:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <secunde+0x1>
 146:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <secunde>
 14a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
 14e:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <minute+0x1>
 158:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <minute>
 15c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flag_timer>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	09 f0       	breq	.+2      	; 0x166 <afisare_timp+0x88>
 164:	4e c0       	rjmp	.+156    	; 0x202 <afisare_timp+0x124>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 16e:	8e e3       	ldi	r24, 0x3E	; 62
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 17e:	86 e1       	ldi	r24, 0x16	; 22
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 186:	89 e1       	ldi	r24, 0x19	; 25
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 18e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
 192:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
 196:	0a 97       	sbiw	r24, 0x0a	; 10
 198:	48 f4       	brcc	.+18     	; 0x1ac <afisare_timp+0xce>
 19a:	82 e2       	ldi	r24, 0x22	; 34
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1a2:	81 e5       	ldi	r24, 0x51	; 81
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1aa:	04 c0       	rjmp	.+8      	; 0x1b4 <afisare_timp+0xd6>
 1ac:	81 e5       	ldi	r24, 0x51	; 81
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1b4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 1b8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 1bc:	89 2b       	or	r24, r25
 1be:	79 f0       	breq	.+30     	; 0x1de <afisare_timp+0x100>
 1c0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 1c4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 1c8:	0b 97       	sbiw	r24, 0x0b	; 11
 1ca:	48 f4       	brcc	.+18     	; 0x1de <afisare_timp+0x100>
 1cc:	81 e2       	ldi	r24, 0x21	; 33
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1d4:	8b e5       	ldi	r24, 0x5B	; 91
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <afisare_timp+0x110>
 1de:	84 e2       	ldi	r24, 0x24	; 36
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1e6:	8b e5       	ldi	r24, 0x5B	; 91
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1ee:	86 e2       	ldi	r24, 0x26	; 38
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1f6:	8b e2       	ldi	r24, 0x2B	; 43
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SendData>
 1fe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <flag_timer>
 202:	08 95       	ret

00000204 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	
	cli();
 214:	f8 94       	cli
	
	contor++;
 216:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <contor>
 21a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <contor+0x1>
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <contor+0x1>
 224:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <contor>
	
	if(contor >= 1000){
 228:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <contor>
 22c:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <contor+0x1>
 230:	88 3e       	cpi	r24, 0xE8	; 232
 232:	93 40       	sbci	r25, 0x03	; 3
 234:	80 f0       	brcs	.+32     	; 0x256 <__vector_14+0x52>
		secunde++;
 236:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 23a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <secunde+0x1>
 244:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <secunde>
		contor = 0;
 248:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <contor+0x1>
 24c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <contor>
		flag_timer = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <flag_timer>
	}
	
	sei();
 256:	78 94       	sei
}
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <init_USART>:
#include "USART.h"
#include "timer.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 268:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 26c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 270:	e1 ec       	ldi	r30, 0xC1	; 193
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 61       	ori	r24, 0x18	; 24
 278:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 27a:	80 81       	ld	r24, Z
 27c:	80 6a       	ori	r24, 0xA0	; 160
 27e:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	8e 60       	ori	r24, 0x0E	; 14
 288:	80 83       	st	Z, r24
	
	sei();
 28a:	78 94       	sei
 28c:	08 95       	ret

0000028e <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24

	flag_tx = 1;	
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <flag_tx>
}
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_18>:

ISR(USART_RX_vect){
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	8f 93       	push	r24
 2b8:	ef 93       	push	r30
 2ba:	ff 93       	push	r31

	char rec;
	
	rec = UDR0;
 2bc:	e6 ec       	ldi	r30, 0xC6	; 198
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
	UDR0 = rec;
 2c2:	80 83       	st	Z, r24
	
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <SendData>:

void SendData(char *c){
 2d4:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2d6:	09 c0       	rjmp	.+18     	; 0x2ea <SendData+0x16>
	{
		if(flag_tx == 1)
 2d8:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <flag_tx>
 2dc:	21 30       	cpi	r18, 0x01	; 1
 2de:	29 f4       	brne	.+10     	; 0x2ea <SendData+0x16>
		{			
			UDR0 = *c;
 2e0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2e4:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 2e6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <flag_tx>
	
}

void SendData(char *c){
	
	while(*c != '\0')
 2ea:	90 81       	ld	r25, Z
 2ec:	91 11       	cpse	r25, r1
 2ee:	f4 cf       	rjmp	.-24     	; 0x2d8 <SendData+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
 2f0:	08 95       	ret

000002f2 <__umulhisi3>:
 2f2:	a2 9f       	mul	r26, r18
 2f4:	b0 01       	movw	r22, r0
 2f6:	b3 9f       	mul	r27, r19
 2f8:	c0 01       	movw	r24, r0
 2fa:	a3 9f       	mul	r26, r19
 2fc:	70 0d       	add	r23, r0
 2fe:	81 1d       	adc	r24, r1
 300:	11 24       	eor	r1, r1
 302:	91 1d       	adc	r25, r1
 304:	b2 9f       	mul	r27, r18
 306:	70 0d       	add	r23, r0
 308:	81 1d       	adc	r24, r1
 30a:	11 24       	eor	r1, r1
 30c:	91 1d       	adc	r25, r1
 30e:	08 95       	ret

00000310 <__itoa_ncheck>:
 310:	bb 27       	eor	r27, r27
 312:	4a 30       	cpi	r20, 0x0A	; 10
 314:	31 f4       	brne	.+12     	; 0x322 <__itoa_ncheck+0x12>
 316:	99 23       	and	r25, r25
 318:	22 f4       	brpl	.+8      	; 0x322 <__itoa_ncheck+0x12>
 31a:	bd e2       	ldi	r27, 0x2D	; 45
 31c:	90 95       	com	r25
 31e:	81 95       	neg	r24
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	0c 94 94 01 	jmp	0x328	; 0x328 <__utoa_common>

00000326 <__utoa_ncheck>:
 326:	bb 27       	eor	r27, r27

00000328 <__utoa_common>:
 328:	fb 01       	movw	r30, r22
 32a:	55 27       	eor	r21, r21
 32c:	aa 27       	eor	r26, r26
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	aa 1f       	adc	r26, r26
 334:	a4 17       	cp	r26, r20
 336:	10 f0       	brcs	.+4      	; 0x33c <__utoa_common+0x14>
 338:	a4 1b       	sub	r26, r20
 33a:	83 95       	inc	r24
 33c:	50 51       	subi	r21, 0x10	; 16
 33e:	b9 f7       	brne	.-18     	; 0x32e <__utoa_common+0x6>
 340:	a0 5d       	subi	r26, 0xD0	; 208
 342:	aa 33       	cpi	r26, 0x3A	; 58
 344:	08 f0       	brcs	.+2      	; 0x348 <__utoa_common+0x20>
 346:	a9 5d       	subi	r26, 0xD9	; 217
 348:	a1 93       	st	Z+, r26
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	79 f7       	brne	.-34     	; 0x32c <__utoa_common+0x4>
 34e:	b1 11       	cpse	r27, r1
 350:	b1 93       	st	Z+, r27
 352:	11 92       	st	Z+, r1
 354:	cb 01       	movw	r24, r22
 356:	0c 94 ad 01 	jmp	0x35a	; 0x35a <strrev>

0000035a <strrev>:
 35a:	dc 01       	movw	r26, r24
 35c:	fc 01       	movw	r30, r24
 35e:	67 2f       	mov	r22, r23
 360:	71 91       	ld	r23, Z+
 362:	77 23       	and	r23, r23
 364:	e1 f7       	brne	.-8      	; 0x35e <strrev+0x4>
 366:	32 97       	sbiw	r30, 0x02	; 2
 368:	04 c0       	rjmp	.+8      	; 0x372 <strrev+0x18>
 36a:	7c 91       	ld	r23, X
 36c:	6d 93       	st	X+, r22
 36e:	70 83       	st	Z, r23
 370:	62 91       	ld	r22, -Z
 372:	ae 17       	cp	r26, r30
 374:	bf 07       	cpc	r27, r31
 376:	c8 f3       	brcs	.-14     	; 0x36a <strrev+0x10>
 378:	08 95       	ret

0000037a <_exit>:
 37a:	f8 94       	cli

0000037c <__stop_program>:
 37c:	ff cf       	rjmp	.-2      	; 0x37c <__stop_program>
