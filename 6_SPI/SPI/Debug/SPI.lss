
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000003b0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800148  00800148  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3d  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f7  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000208  00000000  00000000  00002641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_18>
  4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 36       	cpi	r26, 0x65	; 101
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <init_devices>
	init_USART(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4d 01 	call	0x29a	; 0x29a <init_USART>
	
	introducere_mesaj();
  b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <introducere_mesaj>
//	}
	
	while(1) 
    { 	
		//if(semafor == 1)
			afisare_timp();
  b6:	0e 94 71 00 	call	0xe2	; 0xe2 <afisare_timp>
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x10>

000000bc <init_timer>:

#include "timer.h"

void init_timer(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  c2:	89 ef       	ldi	r24, 0xF9	; 249
  c4:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	83 60       	ori	r24, 0x03	; 3
  ca:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  cc:	ee e6       	ldi	r30, 0x6E	; 110
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <init_devices>:
}

void init_devices(){
	
	cli();
  d8:	f8 94       	cli
	
	init_timer();
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <init_timer>
	
	sei();
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
  e2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
  e6:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ea:	4a e0       	ldi	r20, 0x0A	; 10
  ec:	6b e5       	ldi	r22, 0x5B	; 91
  ee:	71 e0       	ldi	r23, 0x01	; 1
  f0:	0e 94 a1 01 	call	0x342	; 0x342 <__itoa_ncheck>
	itoa(minute, ch_min, 10);
  f4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
  f8:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
  fc:	4a e0       	ldi	r20, 0x0A	; 10
  fe:	61 e5       	ldi	r22, 0x51	; 81
 100:	71 e0       	ldi	r23, 0x01	; 1
 102:	0e 94 a1 01 	call	0x342	; 0x342 <__itoa_ncheck>
		
	if(flag_timer == 1)
 106:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <flag_timer>
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	09 f0       	breq	.+2      	; 0x110 <afisare_timp+0x2e>
 10e:	4e c0       	rjmp	.+156    	; 0x1ac <afisare_timp+0xca>
	{	
		SendData(CLEAR);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		
		SendData("\n\r");
 118:	8e e3       	ldi	r24, 0x3E	; 62
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		SendData(" |-------------|\n\r");
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		SendData(" |");
 128:	86 e1       	ldi	r24, 0x16	; 22
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		SendData(" Timp: ");
 130:	89 e1       	ldi	r24, 0x19	; 25
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		
		//Timp:  00:00
		
		if(minute < 10)
 138:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
 13c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
 140:	0a 97       	sbiw	r24, 0x0a	; 10
 142:	48 f4       	brcc	.+18     	; 0x156 <afisare_timp+0x74>
		{
			SendData("0");
 144:	82 e2       	ldi	r24, 0x22	; 34
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
			SendData(ch_min);
 14c:	81 e5       	ldi	r24, 0x51	; 81
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
 154:	04 c0       	rjmp	.+8      	; 0x15e <afisare_timp+0x7c>
		}
		else
			SendData(ch_min);
 156:	81 e5       	ldi	r24, 0x51	; 81
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		
		if((secunde >= 1) && (secunde <= 10)) //interval pt rezolvare bug 00:059
 15e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 162:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 166:	89 2b       	or	r24, r25
 168:	79 f0       	breq	.+30     	; 0x188 <afisare_timp+0xa6>
 16a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 16e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 172:	0b 97       	sbiw	r24, 0x0b	; 11
 174:	48 f4       	brcc	.+18     	; 0x188 <afisare_timp+0xa6>
		{
			SendData(":0");
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
			SendData(ch_sec);
 17e:	8b e5       	ldi	r24, 0x5B	; 91
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
 186:	08 c0       	rjmp	.+16     	; 0x198 <afisare_timp+0xb6>
		}
		else
		{
			SendData(":");
 188:	84 e2       	ldi	r24, 0x24	; 36
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
			SendData(ch_sec);
 190:	8b e5       	ldi	r24, 0x5B	; 91
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		}
		
		SendData(" |\n\r");
 198:	86 e2       	ldi	r24, 0x26	; 38
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		SendData(" |-------------|");
 1a0:	8b e2       	ldi	r24, 0x2B	; 43
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
		
		flag_timer = 0;
 1a8:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <flag_timer>
 1ac:	08 95       	ret

000001ae <introducere_mesaj>:

void introducere_mesaj(){
	
	//SendData(CLEAR);
	
	SendData("\n\r\n\r");
 1ae:	8c e3       	ldi	r24, 0x3C	; 60
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
	SendData("<pla>");
 1b6:	81 e4       	ldi	r24, 0x41	; 65
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 83 01 	call	0x306	; 0x306 <SendData>
 1be:	08 95       	ret

000001c0 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect){
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
	
	cli();
 1de:	f8 94       	cli
	
	contor++;
 1e0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <contor>
 1e4:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <contor+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <contor+0x1>
 1ee:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <contor>
	
	if(contor >= 1000){
 1f2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <contor>
 1f6:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <contor+0x1>
 1fa:	88 3e       	cpi	r24, 0xE8	; 232
 1fc:	93 40       	sbci	r25, 0x03	; 3
 1fe:	e8 f1       	brcs	.+122    	; 0x27a <__vector_14+0xba>
		++secunde;
 200:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 204:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <secunde+0x1>
 20e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <secunde>
		flag_timer = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <flag_timer>
		contor = 0;
 218:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <contor+0x1>
 21c:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <contor>
		
		if(secunde >= 60)
 220:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <secunde>
 224:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <secunde+0x1>
 228:	cc 97       	sbiw	r24, 0x3c	; 60
 22a:	38 f1       	brcs	.+78     	; 0x27a <__vector_14+0xba>
		{
			secunde %= 60;
 22c:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <secunde>
 230:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <secunde+0x1>
 234:	9a 01       	movw	r18, r20
 236:	a9 e8       	ldi	r26, 0x89	; 137
 238:	b8 e8       	ldi	r27, 0x88	; 136
 23a:	0e 94 92 01 	call	0x324	; 0x324 <__umulhisi3>
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	92 95       	swap	r25
 244:	82 95       	swap	r24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	89 27       	eor	r24, r25
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	89 27       	eor	r24, r25
 24e:	6c e3       	ldi	r22, 0x3C	; 60
 250:	68 9f       	mul	r22, r24
 252:	90 01       	movw	r18, r0
 254:	69 9f       	mul	r22, r25
 256:	30 0d       	add	r19, r0
 258:	11 24       	eor	r1, r1
 25a:	ca 01       	movw	r24, r20
 25c:	82 1b       	sub	r24, r18
 25e:	93 0b       	sbc	r25, r19
 260:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <secunde+0x1>
 264:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <secunde>
			++minute;
 268:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <minute>
 26c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <minute+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <minute+0x1>
 276:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <minute>
		}
	}
	
	sei();
 27a:	78 94       	sei
}
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <init_USART>:
#include "USART.h"
#include "timer.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 29a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 29e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 2a2:	e1 ec       	ldi	r30, 0xC1	; 193
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 61       	ori	r24, 0x18	; 24
 2aa:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 2ac:	80 81       	ld	r24, Z
 2ae:	80 6a       	ori	r24, 0xA0	; 160
 2b0:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 2b2:	e2 ec       	ldi	r30, 0xC2	; 194
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	8e 60       	ori	r24, 0x0E	; 14
 2ba:	80 83       	st	Z, r24
	
	sei();
 2bc:	78 94       	sei
 2be:	08 95       	ret

000002c0 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24

	flag_tx = 1;	
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <flag_tx>
}
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_18>:

ISR(USART_RX_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31

	char rec;
	
	rec = UDR0;
 2ee:	e6 ec       	ldi	r30, 0xC6	; 198
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
	UDR0 = rec;
 2f4:	80 83       	st	Z, r24
	
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <SendData>:

void SendData(char *c){
 306:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 308:	09 c0       	rjmp	.+18     	; 0x31c <SendData+0x16>
	{
		if(flag_tx == 1)
 30a:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <flag_tx>
 30e:	21 30       	cpi	r18, 0x01	; 1
 310:	29 f4       	brne	.+10     	; 0x31c <SendData+0x16>
		{			
			UDR0 = *c;
 312:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 316:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 318:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <flag_tx>
	
}

void SendData(char *c){
	
	while(*c != '\0')
 31c:	90 81       	ld	r25, Z
 31e:	91 11       	cpse	r25, r1
 320:	f4 cf       	rjmp	.-24     	; 0x30a <SendData+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
 322:	08 95       	ret

00000324 <__umulhisi3>:
 324:	a2 9f       	mul	r26, r18
 326:	b0 01       	movw	r22, r0
 328:	b3 9f       	mul	r27, r19
 32a:	c0 01       	movw	r24, r0
 32c:	a3 9f       	mul	r26, r19
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	b2 9f       	mul	r27, r18
 338:	70 0d       	add	r23, r0
 33a:	81 1d       	adc	r24, r1
 33c:	11 24       	eor	r1, r1
 33e:	91 1d       	adc	r25, r1
 340:	08 95       	ret

00000342 <__itoa_ncheck>:
 342:	bb 27       	eor	r27, r27
 344:	4a 30       	cpi	r20, 0x0A	; 10
 346:	31 f4       	brne	.+12     	; 0x354 <__itoa_ncheck+0x12>
 348:	99 23       	and	r25, r25
 34a:	22 f4       	brpl	.+8      	; 0x354 <__itoa_ncheck+0x12>
 34c:	bd e2       	ldi	r27, 0x2D	; 45
 34e:	90 95       	com	r25
 350:	81 95       	neg	r24
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__utoa_common>

00000358 <__utoa_ncheck>:
 358:	bb 27       	eor	r27, r27

0000035a <__utoa_common>:
 35a:	fb 01       	movw	r30, r22
 35c:	55 27       	eor	r21, r21
 35e:	aa 27       	eor	r26, r26
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	aa 1f       	adc	r26, r26
 366:	a4 17       	cp	r26, r20
 368:	10 f0       	brcs	.+4      	; 0x36e <__utoa_common+0x14>
 36a:	a4 1b       	sub	r26, r20
 36c:	83 95       	inc	r24
 36e:	50 51       	subi	r21, 0x10	; 16
 370:	b9 f7       	brne	.-18     	; 0x360 <__utoa_common+0x6>
 372:	a0 5d       	subi	r26, 0xD0	; 208
 374:	aa 33       	cpi	r26, 0x3A	; 58
 376:	08 f0       	brcs	.+2      	; 0x37a <__utoa_common+0x20>
 378:	a9 5d       	subi	r26, 0xD9	; 217
 37a:	a1 93       	st	Z+, r26
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	79 f7       	brne	.-34     	; 0x35e <__utoa_common+0x4>
 380:	b1 11       	cpse	r27, r1
 382:	b1 93       	st	Z+, r27
 384:	11 92       	st	Z+, r1
 386:	cb 01       	movw	r24, r22
 388:	0c 94 c6 01 	jmp	0x38c	; 0x38c <strrev>

0000038c <strrev>:
 38c:	dc 01       	movw	r26, r24
 38e:	fc 01       	movw	r30, r24
 390:	67 2f       	mov	r22, r23
 392:	71 91       	ld	r23, Z+
 394:	77 23       	and	r23, r23
 396:	e1 f7       	brne	.-8      	; 0x390 <strrev+0x4>
 398:	32 97       	sbiw	r30, 0x02	; 2
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <strrev+0x18>
 39c:	7c 91       	ld	r23, X
 39e:	6d 93       	st	X+, r22
 3a0:	70 83       	st	Z, r23
 3a2:	62 91       	ld	r22, -Z
 3a4:	ae 17       	cp	r26, r30
 3a6:	bf 07       	cpc	r27, r31
 3a8:	c8 f3       	brcs	.-14     	; 0x39c <strrev+0x10>
 3aa:	08 95       	ret

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
