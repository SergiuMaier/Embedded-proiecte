
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000037a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  00800112  00800112  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc3  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000510  00000000  00000000  00001ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000428  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ad  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_18>
  4c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3e       	cpi	r26, 0xE2	; 226
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "USART.h"
#include "timer.h"

int main(void)
{		
	init_devices();	
  a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_devices>
	USART_Init(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 41 01 	call	0x282	; 0x282 <USART_Init>
	
	while(1) 
    { 		
		afisare_timp();
  b2:	0e 94 6f 00 	call	0xde	; 0xde <afisare_timp>
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0xc>

000000b8 <timer_init>:

#include "timer.h"

void timer_init(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  c8:	ee e6       	ldi	r30, 0x6E	; 110
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <init_devices>:
}

void init_devices(){
	
	cli();
  d4:	f8 94       	cli
	
	timer_init();
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <timer_init>
	
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
  de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
  e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e6:	4a e0       	ldi	r20, 0x0A	; 10
  e8:	6e e7       	ldi	r22, 0x7E	; 126
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	0e 94 86 01 	call	0x30c	; 0x30c <__itoa_ncheck>
	itoa(minute, ch_min, 10);
  f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
  f4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
  f8:	4a e0       	ldi	r20, 0x0A	; 10
  fa:	6a e1       	ldi	r22, 0x1A	; 26
  fc:	71 e0       	ldi	r23, 0x01	; 1
  fe:	0e 94 86 01 	call	0x30c	; 0x30c <__itoa_ncheck>
		
	if(flag_timer == 1)
 102:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <flag_timer>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <afisare_timp+0x2e>
 10a:	75 c0       	rjmp	.+234    	; 0x1f6 <afisare_timp+0x118>
	{	
		SendData(CLEAR);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
		SendData("Timp: ");
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
		
		if((secunde <= 10) && (minute <= 10))
 11c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 120:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 124:	0b 97       	sbiw	r24, 0x0b	; 11
 126:	b8 f4       	brcc	.+46     	; 0x156 <afisare_timp+0x78>
 128:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 12c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 130:	0b 97       	sbiw	r24, 0x0b	; 11
 132:	88 f4       	brcc	.+34     	; 0x156 <afisare_timp+0x78>
		{
			SendData(" 0");
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_min);
 13c:	8a e1       	ldi	r24, 0x1A	; 26
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(":0");
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_sec);
 14c:	8e e7       	ldi	r24, 0x7E	; 126
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
 154:	4e c0       	rjmp	.+156    	; 0x1f2 <afisare_timp+0x114>
		}
		else if((secunde <= 10) && (minute > 10))
 156:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 15a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 15e:	0b 97       	sbiw	r24, 0x0b	; 11
 160:	98 f4       	brcc	.+38     	; 0x188 <afisare_timp+0xaa>
 162:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 166:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 16a:	0b 97       	sbiw	r24, 0x0b	; 11
 16c:	68 f0       	brcs	.+26     	; 0x188 <afisare_timp+0xaa>
		{
			SendData(ch_min);
 16e:	8a e1       	ldi	r24, 0x1A	; 26
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(":0");
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_sec);
 17e:	8e e7       	ldi	r24, 0x7E	; 126
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
 186:	35 c0       	rjmp	.+106    	; 0x1f2 <afisare_timp+0x114>
		}
		else if((secunde > 10) && (minute <= 10))
 188:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 18c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 190:	0b 97       	sbiw	r24, 0x0b	; 11
 192:	b8 f0       	brcs	.+46     	; 0x1c2 <afisare_timp+0xe4>
 194:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 198:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 19c:	0b 97       	sbiw	r24, 0x0b	; 11
 19e:	88 f4       	brcc	.+34     	; 0x1c2 <afisare_timp+0xe4>
		{
			SendData(" 0");
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_min);
 1a8:	8a e1       	ldi	r24, 0x1A	; 26
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(":");
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_sec);
 1b8:	8e e7       	ldi	r24, 0x7E	; 126
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
 1c0:	18 c0       	rjmp	.+48     	; 0x1f2 <afisare_timp+0x114>
		}
		else if((secunde > 10) && (minute > 10))
 1c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 1c6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 1ca:	0b 97       	sbiw	r24, 0x0b	; 11
 1cc:	90 f0       	brcs	.+36     	; 0x1f2 <afisare_timp+0x114>
 1ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 1d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 1d6:	0b 97       	sbiw	r24, 0x0b	; 11
 1d8:	60 f0       	brcs	.+24     	; 0x1f2 <afisare_timp+0x114>
		{
			SendData(ch_min);
 1da:	8a e1       	ldi	r24, 0x1A	; 26
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(":");
 1e2:	80 e1       	ldi	r24, 0x10	; 16
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
			SendData(ch_sec);
 1ea:	8e e7       	ldi	r24, 0x7E	; 126
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <SendData>
		}
		
		flag_timer = 0;
 1f2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <flag_timer>
 1f6:	08 95       	ret

000001f8 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	
	cli();
 208:	f8 94       	cli
	
	contor++;
 20a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <contor>
 20e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <contor+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <contor+0x1>
 218:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <contor>
	
	if(contor >= 1000){
 21c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <contor>
 220:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <contor+0x1>
 224:	88 3e       	cpi	r24, 0xE8	; 232
 226:	93 40       	sbci	r25, 0x03	; 3
 228:	18 f1       	brcs	.+70     	; 0x270 <__vector_14+0x78>
		secunde++;
 22a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 22e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <secunde+0x1>
 238:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <secunde>
		flag_timer = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <flag_timer>
		contor = 0;
 242:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <contor+0x1>
 246:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <contor>
		
		if(secunde >= 60)
 24a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <secunde>
 24e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <secunde+0x1>
 252:	cc 97       	sbiw	r24, 0x3c	; 60
 254:	68 f0       	brcs	.+26     	; 0x270 <__vector_14+0x78>
		{
			minute++;
 256:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <minute>
 25a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <minute+0x1>
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <minute+0x1>
 264:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <minute>
			secunde = 0;
 268:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <secunde+0x1>
 26c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <secunde>
		}
	}
	
	sei();
 270:	78 94       	sei
}
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <USART_Init>:
#include "USART.h"
#include "timer.h"

void USART_Init(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 282:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 286:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 61       	ori	r24, 0x18	; 24
 292:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0)	
 294:	80 81       	ld	r24, Z
 296:	80 6a       	ori	r24, 0xA0	; 160
 298:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 29a:	e2 ec       	ldi	r30, 0xC2	; 194
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8e 60       	ori	r24, 0x0E	; 14
 2a2:	80 83       	st	Z, r24
	
	sei();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24

	flag = 1;	
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_18>:

ISR(USART_RX_vect){
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31

	char rec;
	rec = UDR0;   //preiau valoarea receptata 
 2d6:	e6 ec       	ldi	r30, 0xC6	; 198
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
	UDR0 = rec;   //echo 
 2dc:	80 83       	st	Z, r24
}
 2de:	ff 91       	pop	r31
 2e0:	ef 91       	pop	r30
 2e2:	8f 91       	pop	r24
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <SendData>:

void SendData(char *c){
 2ee:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2f0:	09 c0       	rjmp	.+18     	; 0x304 <SendData+0x16>
	{
		if(flag == 1)
 2f2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
 2f6:	21 30       	cpi	r18, 0x01	; 1
 2f8:	29 f4       	brne	.+10     	; 0x304 <SendData+0x16>
		{			
			UDR0 = *c;
 2fa:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2fe:	31 96       	adiw	r30, 0x01	; 1
			flag = 0;
 300:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	UDR0 = rec;   //echo 
}

void SendData(char *c){
	
	while(*c != '\0')
 304:	90 81       	ld	r25, Z
 306:	91 11       	cpse	r25, r1
 308:	f4 cf       	rjmp	.-24     	; 0x2f2 <SendData+0x4>
			UDR0 = *c;
			c++;
			flag = 0;
		}
	}
 30a:	08 95       	ret

0000030c <__itoa_ncheck>:
 30c:	bb 27       	eor	r27, r27
 30e:	4a 30       	cpi	r20, 0x0A	; 10
 310:	31 f4       	brne	.+12     	; 0x31e <__itoa_ncheck+0x12>
 312:	99 23       	and	r25, r25
 314:	22 f4       	brpl	.+8      	; 0x31e <__itoa_ncheck+0x12>
 316:	bd e2       	ldi	r27, 0x2D	; 45
 318:	90 95       	com	r25
 31a:	81 95       	neg	r24
 31c:	9f 4f       	sbci	r25, 0xFF	; 255
 31e:	0c 94 92 01 	jmp	0x324	; 0x324 <__utoa_common>

00000322 <__utoa_ncheck>:
 322:	bb 27       	eor	r27, r27

00000324 <__utoa_common>:
 324:	fb 01       	movw	r30, r22
 326:	55 27       	eor	r21, r21
 328:	aa 27       	eor	r26, r26
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	aa 1f       	adc	r26, r26
 330:	a4 17       	cp	r26, r20
 332:	10 f0       	brcs	.+4      	; 0x338 <__utoa_common+0x14>
 334:	a4 1b       	sub	r26, r20
 336:	83 95       	inc	r24
 338:	50 51       	subi	r21, 0x10	; 16
 33a:	b9 f7       	brne	.-18     	; 0x32a <__utoa_common+0x6>
 33c:	a0 5d       	subi	r26, 0xD0	; 208
 33e:	aa 33       	cpi	r26, 0x3A	; 58
 340:	08 f0       	brcs	.+2      	; 0x344 <__utoa_common+0x20>
 342:	a9 5d       	subi	r26, 0xD9	; 217
 344:	a1 93       	st	Z+, r26
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	79 f7       	brne	.-34     	; 0x328 <__utoa_common+0x4>
 34a:	b1 11       	cpse	r27, r1
 34c:	b1 93       	st	Z+, r27
 34e:	11 92       	st	Z+, r1
 350:	cb 01       	movw	r24, r22
 352:	0c 94 ab 01 	jmp	0x356	; 0x356 <strrev>

00000356 <strrev>:
 356:	dc 01       	movw	r26, r24
 358:	fc 01       	movw	r30, r24
 35a:	67 2f       	mov	r22, r23
 35c:	71 91       	ld	r23, Z+
 35e:	77 23       	and	r23, r23
 360:	e1 f7       	brne	.-8      	; 0x35a <strrev+0x4>
 362:	32 97       	sbiw	r30, 0x02	; 2
 364:	04 c0       	rjmp	.+8      	; 0x36e <strrev+0x18>
 366:	7c 91       	ld	r23, X
 368:	6d 93       	st	X+, r22
 36a:	70 83       	st	Z, r23
 36c:	62 91       	ld	r22, -Z
 36e:	ae 17       	cp	r26, r30
 370:	bf 07       	cpc	r27, r31
 372:	c8 f3       	brcs	.-14     	; 0x366 <strrev+0x10>
 374:	08 95       	ret

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
