
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080014e  0080014e  000004ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e66  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000942  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b5  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_18>
  4c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
{	
	//pt debug:	
	//DDRB = 0x01;
	//PORTB = 0x00;
	
	init_devices();	
  a6:	0e 94 76 00 	call	0xec	; 0xec <init_devices>
	init_USART(MYUBRR);
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 4b 01 	call	0x296	; 0x296 <init_USART>
	
	send_data(CLEAR);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
	rand_nou();
  ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <rand_nou>
	
	while(1) 
    {
		receive_data();
  be:	0e 94 8b 01 	call	0x316	; 0x316 <receive_data>
		 	
		if(flag_afisare_timp == 1) //se poate face o functie 
  c2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <flag_afisare_timp>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	d1 f7       	brne	.-12     	; 0xbe <main+0x18>
			afisare_timp();
  ca:	0e 94 80 00 	call	0x100	; 0x100 <afisare_timp>
  ce:	f7 cf       	rjmp	.-18     	; 0xbe <main+0x18>

000000d0 <init_timer>:

#include "timer.h"

void init_timer(){
	
	TCCR0A |= (1 << WGM01)|(0 << WGM00);           //mod ctc
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	84 bd       	out	0x24, r24	; 36
	OCR0A = 0xF9;                                  //duty cycle 10ms
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (0 << CS02)|(1 << CS01)|(1 << CS00); //prescalar 64
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
  e0:	ee e6       	ldi	r30, 0x6E	; 110
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <init_devices>:
}

void init_devices(){
	
	cli();
  ec:	f8 94       	cli
	
	init_timer();
  ee:	0e 94 68 00 	call	0xd0	; 0xd0 <init_timer>
	
	sei();
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <rand_nou>:
}

void rand_nou(){ //apelata in fiecare functie afisata
	
	send_data("\n\r>>");
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
  fe:	08 95       	ret

00000100 <afisare_timp>:
}

void afisare_timp(){
	
	itoa(secunde, ch_sec, 10);
 100:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <secunde>
 104:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <secunde+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 108:	4a e0       	ldi	r20, 0x0A	; 10
 10a:	63 e6       	ldi	r22, 0x63	; 99
 10c:	71 e0       	ldi	r23, 0x01	; 1
 10e:	0e 94 bf 01 	call	0x37e	; 0x37e <__itoa_ncheck>
	itoa(minute, ch_min, 10);
 112:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <minute>
 116:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <minute+0x1>
 11a:	4a e0       	ldi	r20, 0x0A	; 10
 11c:	69 e5       	ldi	r22, 0x59	; 89
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	0e 94 bf 01 	call	0x37e	; 0x37e <__itoa_ncheck>
		
	if(secunde >= 60)	//in ISR aveam 01:59 in loc de 01:00
 124:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <secunde>
 128:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <secunde+0x1>
 12c:	cc 97       	sbiw	r24, 0x3c	; 60
 12e:	38 f1       	brcs	.+78     	; 0x17e <afisare_timp+0x7e>
	{
		secunde %= 60;
 130:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <secunde>
 134:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <secunde+0x1>
 138:	9a 01       	movw	r18, r20
 13a:	a9 e8       	ldi	r26, 0x89	; 137
 13c:	b8 e8       	ldi	r27, 0x88	; 136
 13e:	0e 94 b0 01 	call	0x360	; 0x360 <__umulhisi3>
 142:	96 95       	lsr	r25
 144:	87 95       	ror	r24
 146:	92 95       	swap	r25
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 27       	eor	r24, r25
 14e:	9f 70       	andi	r25, 0x0F	; 15
 150:	89 27       	eor	r24, r25
 152:	6c e3       	ldi	r22, 0x3C	; 60
 154:	68 9f       	mul	r22, r24
 156:	90 01       	movw	r18, r0
 158:	69 9f       	mul	r22, r25
 15a:	30 0d       	add	r19, r0
 15c:	11 24       	eor	r1, r1
 15e:	ca 01       	movw	r24, r20
 160:	82 1b       	sub	r24, r18
 162:	93 0b       	sbc	r25, r19
 164:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <secunde+0x1>
 168:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <secunde>
		minute++;
 16c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <minute>
 170:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <minute+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <minute+0x1>
 17a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <minute>
	}	
		
	if(flag_timer == 1)
 17e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <flag_timer>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <afisare_timp+0x88>
 186:	54 c0       	rjmp	.+168    	; 0x230 <afisare_timp+0x130>
	{	
		send_data(CLEAR);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		
		send_data("\n\r");
 190:	83 e4       	ldi	r24, 0x43	; 67
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		send_data(" |-------------|\n\r");
 198:	88 e0       	ldi	r24, 0x08	; 8
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		send_data(" |");
 1a0:	8b e1       	ldi	r24, 0x1B	; 27
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		send_data(" Timp: ");
 1a8:	8e e1       	ldi	r24, 0x1E	; 30
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		
		//Timp:  00:00
		
		if(minute < 10)
 1b0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <minute>
 1b4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <minute+0x1>
 1b8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ba:	48 f4       	brcc	.+18     	; 0x1ce <afisare_timp+0xce>
		{
			send_data("0");
 1bc:	87 e2       	ldi	r24, 0x27	; 39
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
			send_data(ch_min);
 1c4:	89 e5       	ldi	r24, 0x59	; 89
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <afisare_timp+0xd6>
		}
		else
			send_data(ch_min);
 1ce:	89 e5       	ldi	r24, 0x59	; 89
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		
		if((secunde >= 1) && (secunde <= 10)) //interval pt rezolvare bug 00:059
 1d6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <secunde>
 1da:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <secunde+0x1>
 1de:	89 2b       	or	r24, r25
 1e0:	79 f0       	breq	.+30     	; 0x200 <afisare_timp+0x100>
 1e2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <secunde>
 1e6:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <secunde+0x1>
 1ea:	0b 97       	sbiw	r24, 0x0b	; 11
 1ec:	48 f4       	brcc	.+18     	; 0x200 <afisare_timp+0x100>
		{
			send_data(":0");
 1ee:	86 e2       	ldi	r24, 0x26	; 38
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
			send_data(ch_sec);
 1f6:	83 e6       	ldi	r24, 0x63	; 99
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <afisare_timp+0x110>
		}
		else
		{
			send_data(":");
 200:	89 e2       	ldi	r24, 0x29	; 41
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
			send_data(ch_sec);
 208:	83 e6       	ldi	r24, 0x63	; 99
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		}
		
		send_data(" |\n\r");
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		send_data(" |-------------|");
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		send_data("\n\r\n\r");
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
		
		rand_nou();
 228:	0e 94 7b 00 	call	0xf6	; 0xf6 <rand_nou>
		
		flag_timer = 0;
 22c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <flag_timer>
 230:	08 95       	ret

00000232 <__vector_14>:
	}
} 

ISR(TIMER0_COMPA_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
	
	cli();
 242:	f8 94       	cli
	
	contor++;
 244:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <contor>
 248:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <contor+0x1>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <contor+0x1>
 252:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <contor>
	
	if(contor >= 1000){
 256:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <contor>
 25a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <contor+0x1>
 25e:	88 3e       	cpi	r24, 0xE8	; 232
 260:	93 40       	sbci	r25, 0x03	; 3
 262:	80 f0       	brcs	.+32     	; 0x284 <__vector_14+0x52>
		secunde++;
 264:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <secunde>
 268:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <secunde+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <secunde+0x1>
 272:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <secunde>
		contor = 0;
 276:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <contor+0x1>
 27a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <contor>
		flag_timer = 1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <flag_timer>
	}
	
	sei();
 284:	78 94       	sei
}
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <init_USART>:
#include "USART.h"
#include "timer.h"

void init_USART(uint16_t ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 296:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 29a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B |= (1 << RXEN0)|(1 << TXEN0);
 29e:	e1 ec       	ldi	r30, 0xC1	; 193
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	88 61       	ori	r24, 0x18	; 24
 2a6:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0)|(1 << UDRIE0);//(1 << TXCIE0);	
 2a8:	80 81       	ld	r24, Z
 2aa:	80 6a       	ori	r24, 0xA0	; 160
 2ac:	80 83       	st	Z, r24
	UCSR0C |= (1 << USBS0)|(3 << UCSZ00);
 2ae:	e2 ec       	ldi	r30, 0xC2	; 194
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	8e 60       	ori	r24, 0x0E	; 14
 2b6:	80 83       	st	Z, r24
	
	sei();
 2b8:	78 94       	sei
 2ba:	08 95       	ret

000002bc <__vector_19>:
}

ISR(USART_UDRE_vect){ //apelata atunci cand se pot trimite info
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24

	flag_tx = 1;	
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <flag_tx>
}
 2ce:	8f 91       	pop	r24
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <send_data>:

void send_data(char *c){
 2da:	fc 01       	movw	r30, r24
	
	while(*c != '\0')
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <send_data+0x16>
	{
		if(flag_tx == 1)
 2de:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <flag_tx>
 2e2:	21 30       	cpi	r18, 0x01	; 1
 2e4:	29 f4       	brne	.+10     	; 0x2f0 <send_data+0x16>
		{
			UDR0 = *c;
 2e6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			c++;
 2ea:	31 96       	adiw	r30, 0x01	; 1
			flag_tx = 0;
 2ec:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <flag_tx>
	flag_tx = 1;	
}

void send_data(char *c){
	
	while(*c != '\0')
 2f0:	90 81       	ld	r25, Z
 2f2:	91 11       	cpse	r25, r1
 2f4:	f4 cf       	rjmp	.-24     	; 0x2de <send_data+0x4>
			UDR0 = *c;
			c++;
			flag_tx = 0;
		}
	}
}
 2f6:	08 95       	ret

000002f8 <__vector_18>:

ISR(USART_RX_vect){
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
	
	flag_rx = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
}
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <receive_data>:

void receive_data(){
	
	char c;

	if(flag_rx == 1)
 316:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	01 f5       	brne	.+64     	; 0x35e <receive_data+0x48>
	{	
		c = UDR0;
 31e:	e6 ec       	ldi	r30, 0xC6	; 198
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
		UDR0 = c; //echo, afisez ce tastez
 324:	80 83       	st	Z, r24
		
		switch(c){
 326:	81 33       	cpi	r24, 0x31	; 49
 328:	19 f0       	breq	.+6      	; 0x330 <receive_data+0x1a>
 32a:	82 33       	cpi	r24, 0x32	; 50
 32c:	39 f0       	breq	.+14     	; 0x33c <receive_data+0x26>
 32e:	0f c0       	rjmp	.+30     	; 0x34e <receive_data+0x38>
			case '1': //send_data(CLEAR);
			          rand_nou();
 330:	0e 94 7b 00 	call	0xf6	; 0xf6 <rand_nou>
					  flag_afisare_timp = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <flag_afisare_timp>
			          break;
 33a:	0f c0       	rjmp	.+30     	; 0x35a <receive_data+0x44>
			
			case '2': send_data(CLEAR);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
					  rand_nou();
 344:	0e 94 7b 00 	call	0xf6	; 0xf6 <rand_nou>
					  flag_afisare_timp = 0;
 348:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <flag_afisare_timp>
			          break;
 34c:	06 c0       	rjmp	.+12     	; 0x35a <receive_data+0x44>
			
			default: send_data("\n\rNAN\n\r");
 34e:	86 e4       	ldi	r24, 0x46	; 70
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	0e 94 6d 01 	call	0x2da	; 0x2da <send_data>
					 rand_nou();		  
 356:	0e 94 7b 00 	call	0xf6	; 0xf6 <rand_nou>
					 break;
		}
		
		flag_rx = 0;
 35a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
 35e:	08 95       	ret

00000360 <__umulhisi3>:
 360:	a2 9f       	mul	r26, r18
 362:	b0 01       	movw	r22, r0
 364:	b3 9f       	mul	r27, r19
 366:	c0 01       	movw	r24, r0
 368:	a3 9f       	mul	r26, r19
 36a:	70 0d       	add	r23, r0
 36c:	81 1d       	adc	r24, r1
 36e:	11 24       	eor	r1, r1
 370:	91 1d       	adc	r25, r1
 372:	b2 9f       	mul	r27, r18
 374:	70 0d       	add	r23, r0
 376:	81 1d       	adc	r24, r1
 378:	11 24       	eor	r1, r1
 37a:	91 1d       	adc	r25, r1
 37c:	08 95       	ret

0000037e <__itoa_ncheck>:
 37e:	bb 27       	eor	r27, r27
 380:	4a 30       	cpi	r20, 0x0A	; 10
 382:	31 f4       	brne	.+12     	; 0x390 <__itoa_ncheck+0x12>
 384:	99 23       	and	r25, r25
 386:	22 f4       	brpl	.+8      	; 0x390 <__itoa_ncheck+0x12>
 388:	bd e2       	ldi	r27, 0x2D	; 45
 38a:	90 95       	com	r25
 38c:	81 95       	neg	r24
 38e:	9f 4f       	sbci	r25, 0xFF	; 255
 390:	0c 94 cb 01 	jmp	0x396	; 0x396 <__utoa_common>

00000394 <__utoa_ncheck>:
 394:	bb 27       	eor	r27, r27

00000396 <__utoa_common>:
 396:	fb 01       	movw	r30, r22
 398:	55 27       	eor	r21, r21
 39a:	aa 27       	eor	r26, r26
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	aa 1f       	adc	r26, r26
 3a2:	a4 17       	cp	r26, r20
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <__utoa_common+0x14>
 3a6:	a4 1b       	sub	r26, r20
 3a8:	83 95       	inc	r24
 3aa:	50 51       	subi	r21, 0x10	; 16
 3ac:	b9 f7       	brne	.-18     	; 0x39c <__utoa_common+0x6>
 3ae:	a0 5d       	subi	r26, 0xD0	; 208
 3b0:	aa 33       	cpi	r26, 0x3A	; 58
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__utoa_common+0x20>
 3b4:	a9 5d       	subi	r26, 0xD9	; 217
 3b6:	a1 93       	st	Z+, r26
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	79 f7       	brne	.-34     	; 0x39a <__utoa_common+0x4>
 3bc:	b1 11       	cpse	r27, r1
 3be:	b1 93       	st	Z+, r27
 3c0:	11 92       	st	Z+, r1
 3c2:	cb 01       	movw	r24, r22
 3c4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <strrev>

000003c8 <strrev>:
 3c8:	dc 01       	movw	r26, r24
 3ca:	fc 01       	movw	r30, r24
 3cc:	67 2f       	mov	r22, r23
 3ce:	71 91       	ld	r23, Z+
 3d0:	77 23       	and	r23, r23
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <strrev+0x4>
 3d4:	32 97       	sbiw	r30, 0x02	; 2
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <strrev+0x18>
 3d8:	7c 91       	ld	r23, X
 3da:	6d 93       	st	X+, r22
 3dc:	70 83       	st	Z, r23
 3de:	62 91       	ld	r22, -Z
 3e0:	ae 17       	cp	r26, r30
 3e2:	bf 07       	cpc	r27, r31
 3e4:	c8 f3       	brcs	.-14     	; 0x3d8 <strrev+0x10>
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
