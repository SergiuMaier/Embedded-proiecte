
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000003c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000899  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  00000d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000328  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a7  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_1>
   8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  88:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinSet>:
	}while (1);
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	
	*port |=  1 << pin;
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <pinSet+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <pinSet+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  a8:	fc 01       	movw	r30, r24
	
	*port &=  ~(1 << pin);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pinReset+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <pinReset+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <ledOn>:
}

void ledOn(){
	
	if(flag_on == 1){
  c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_on>
  c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag_on+0x1>
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	a9 f4       	brne	.+42     	; 0xf8 <ledOn+0x36>
		pinSet(&PORTB, PINB0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	85 e2       	ldi	r24, 0x25	; 37
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		pinSet(&PORTB, PINB1);
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	85 e2       	ldi	r24, 0x25	; 37
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		pinSet(&PORTB, PINB2);
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	85 e2       	ldi	r24, 0x25	; 37
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		pinSet(&PORTB, PINB3);
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	85 e2       	ldi	r24, 0x25	; 37
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
  f6:	14 c0       	rjmp	.+40     	; 0x120 <ledOn+0x5e>
	}else{
		pinReset(&PORTB, PINB0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
		pinReset(&PORTB, PINB1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	85 e2       	ldi	r24, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
		pinReset(&PORTB, PINB2);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
		pinReset(&PORTB, PINB3);
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
	}
	
	if((secunde - contor_on) >= TIMP_APRINDERE){
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 128:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <contor_on>
 12c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <contor_on+0x1>
 130:	82 1b       	sub	r24, r18
 132:	93 0b       	sbc	r25, r19
 134:	05 97       	sbiw	r24, 0x05	; 5
 136:	24 f0       	brlt	.+8      	; 0x140 <ledOn+0x7e>
		flag_on = 0;
 138:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_on+0x1>
 13c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_on>
 140:	08 95       	ret

00000142 <main>:
int contor_on = 0;			//contor pentru masurarea duratei de timp in care LED-urile sunt aprinse
int secunde = 0;			

int main(void)
{
	DDRB = 0x0F;   //00001111
 142:	8f e0       	ldi	r24, 0x0F	; 15
 144:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 146:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	8c 60       	ori	r24, 0x0C	; 12
 14c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8c 60       	ori	r24, 0x0C	; 12
 152:	8b b9       	out	0x0b, r24	; 11
	
	cli();
 154:	f8 94       	cli
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 156:	e9 e6       	ldi	r30, 0x69	; 105
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 60       	ori	r24, 0x0F	; 15
 15e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 160:	8d b3       	in	r24, 0x1d	; 29
 162:	83 60       	ori	r24, 0x03	; 3
 164:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 166:	8c b3       	in	r24, 0x1c	; 28
 168:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 16a:	e8 e6       	ldi	r30, 0x68	; 104
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 83       	st	Z, r24
	
	
	//momentan time-ul executa o intrerupere la fiecare 4ms
				
	TCCR0B = (1 << CS02) | (0 << CS01) | (0 << CS00); //valoare prescalar
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0xF9;					      
 176:	89 ef       	ldi	r24, 0xF9	; 249
 178:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01) | (0 << WGM00);  //CTC
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	84 bd       	out	0x24, r24	; 36
	//determinareFrecventa();
	TIMSK0 |= (1 << OCIE0A); 
 17e:	ee e6       	ldi	r30, 0x6E	; 110
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
	
	sei();
 188:	78 94       	sei
	
	do
	{
		ledOn();	
 18a:	0e 94 61 00 	call	0xc2	; 0xc2 <ledOn>
 18e:	fd cf       	rjmp	.-6      	; 0x18a <main+0x48>

00000190 <__vector_14>:
	//}
	//
	//OCR0A = valoare_aproximata - 1; 
//}

ISR(TIMER0_COMPA_vect) {  //pt caz general
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	
	cli();
 1b2:	f8 94       	cli
	
	contor_secunde++;
 1b4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <contor_secunde>
 1b8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <contor_secunde+0x1>
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <contor_secunde+0x1>
 1c4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <contor_secunde>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){ 
 1c8:	07 2e       	mov	r0, r23
 1ca:	00 0c       	add	r0, r0
 1cc:	88 0b       	sbc	r24, r24
 1ce:	99 0b       	sbc	r25, r25
 1d0:	0e 94 41 01 	call	0x282	; 0x282 <__floatsisf>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	3f ef       	ldi	r19, 0xFF	; 255
 1d8:	49 e7       	ldi	r20, 0x79	; 121
 1da:	53 e4       	ldi	r21, 0x43	; 67
 1dc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__gesf2>
 1e0:	88 23       	and	r24, r24
 1e2:	6c f0       	brlt	.+26     	; 0x1fe <__vector_14+0x6e>
		
		secunde++;
 1e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		contor_secunde = 0;
 1f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <contor_secunde+0x1>
 1fa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contor_secunde>
	}
	
	sei();
 1fe:	78 94       	sei
}
 200:	ff 91       	pop	r31
 202:	ef 91       	pop	r30
 204:	bf 91       	pop	r27
 206:	af 91       	pop	r26
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	7f 91       	pop	r23
 20e:	6f 91       	pop	r22
 210:	5f 91       	pop	r21
 212:	4f 91       	pop	r20
 214:	3f 91       	pop	r19
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <__vector_1>:

ISR(INT0_vect) { //pt butonul de on
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
	
	cli();
 230:	f8 94       	cli
	
	flag_on = 1;		 //LED-uri on
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flag_on+0x1>
 23a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_on>
	contor_on = secunde; //determinarea timpului la care a fost apasat butonul  
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contor_on+0x1>
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contor_on>
	
	sei();
 24e:	78 94       	sei
}
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_2>:

ISR(INT1_vect) { //pt butonul de off
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
	
	cli();
 268:	f8 94       	cli
	
	flag_on = 0; //LED-uri off
 26a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_on+0x1>
 26e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_on>
	
	sei();
 272:	78 94       	sei
}
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__floatunsisf>:
 27e:	e8 94       	clt
 280:	09 c0       	rjmp	.+18     	; 0x294 <__floatsisf+0x12>

00000282 <__floatsisf>:
 282:	97 fb       	bst	r25, 7
 284:	3e f4       	brtc	.+14     	; 0x294 <__floatsisf+0x12>
 286:	90 95       	com	r25
 288:	80 95       	com	r24
 28a:	70 95       	com	r23
 28c:	61 95       	neg	r22
 28e:	7f 4f       	sbci	r23, 0xFF	; 255
 290:	8f 4f       	sbci	r24, 0xFF	; 255
 292:	9f 4f       	sbci	r25, 0xFF	; 255
 294:	99 23       	and	r25, r25
 296:	a9 f0       	breq	.+42     	; 0x2c2 <__floatsisf+0x40>
 298:	f9 2f       	mov	r31, r25
 29a:	96 e9       	ldi	r25, 0x96	; 150
 29c:	bb 27       	eor	r27, r27
 29e:	93 95       	inc	r25
 2a0:	f6 95       	lsr	r31
 2a2:	87 95       	ror	r24
 2a4:	77 95       	ror	r23
 2a6:	67 95       	ror	r22
 2a8:	b7 95       	ror	r27
 2aa:	f1 11       	cpse	r31, r1
 2ac:	f8 cf       	rjmp	.-16     	; 0x29e <__floatsisf+0x1c>
 2ae:	fa f4       	brpl	.+62     	; 0x2ee <__floatsisf+0x6c>
 2b0:	bb 0f       	add	r27, r27
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <__floatsisf+0x36>
 2b4:	60 ff       	sbrs	r22, 0
 2b6:	1b c0       	rjmp	.+54     	; 0x2ee <__floatsisf+0x6c>
 2b8:	6f 5f       	subi	r22, 0xFF	; 255
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	16 c0       	rjmp	.+44     	; 0x2ee <__floatsisf+0x6c>
 2c2:	88 23       	and	r24, r24
 2c4:	11 f0       	breq	.+4      	; 0x2ca <__floatsisf+0x48>
 2c6:	96 e9       	ldi	r25, 0x96	; 150
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <__floatsisf+0x6a>
 2ca:	77 23       	and	r23, r23
 2cc:	21 f0       	breq	.+8      	; 0x2d6 <__floatsisf+0x54>
 2ce:	9e e8       	ldi	r25, 0x8E	; 142
 2d0:	87 2f       	mov	r24, r23
 2d2:	76 2f       	mov	r23, r22
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <__floatsisf+0x5e>
 2d6:	66 23       	and	r22, r22
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <__floatsisf+0x74>
 2da:	96 e8       	ldi	r25, 0x86	; 134
 2dc:	86 2f       	mov	r24, r22
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	2a f0       	brmi	.+10     	; 0x2ee <__floatsisf+0x6c>
 2e4:	9a 95       	dec	r25
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	88 1f       	adc	r24, r24
 2ec:	da f7       	brpl	.-10     	; 0x2e4 <__floatsisf+0x62>
 2ee:	88 0f       	add	r24, r24
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	97 f9       	bld	r25, 7
 2f6:	08 95       	ret

000002f8 <__gesf2>:
 2f8:	0e 94 81 01 	call	0x302	; 0x302 <__fp_cmp>
 2fc:	08 f4       	brcc	.+2      	; 0x300 <__gesf2+0x8>
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	08 95       	ret

00000302 <__fp_cmp>:
 302:	99 0f       	add	r25, r25
 304:	00 08       	sbc	r0, r0
 306:	55 0f       	add	r21, r21
 308:	aa 0b       	sbc	r26, r26
 30a:	e0 e8       	ldi	r30, 0x80	; 128
 30c:	fe ef       	ldi	r31, 0xFE	; 254
 30e:	16 16       	cp	r1, r22
 310:	17 06       	cpc	r1, r23
 312:	e8 07       	cpc	r30, r24
 314:	f9 07       	cpc	r31, r25
 316:	c0 f0       	brcs	.+48     	; 0x348 <__fp_cmp+0x46>
 318:	12 16       	cp	r1, r18
 31a:	13 06       	cpc	r1, r19
 31c:	e4 07       	cpc	r30, r20
 31e:	f5 07       	cpc	r31, r21
 320:	98 f0       	brcs	.+38     	; 0x348 <__fp_cmp+0x46>
 322:	62 1b       	sub	r22, r18
 324:	73 0b       	sbc	r23, r19
 326:	84 0b       	sbc	r24, r20
 328:	95 0b       	sbc	r25, r21
 32a:	39 f4       	brne	.+14     	; 0x33a <__fp_cmp+0x38>
 32c:	0a 26       	eor	r0, r26
 32e:	61 f0       	breq	.+24     	; 0x348 <__fp_cmp+0x46>
 330:	23 2b       	or	r18, r19
 332:	24 2b       	or	r18, r20
 334:	25 2b       	or	r18, r21
 336:	21 f4       	brne	.+8      	; 0x340 <__fp_cmp+0x3e>
 338:	08 95       	ret
 33a:	0a 26       	eor	r0, r26
 33c:	09 f4       	brne	.+2      	; 0x340 <__fp_cmp+0x3e>
 33e:	a1 40       	sbci	r26, 0x01	; 1
 340:	a6 95       	lsr	r26
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	81 1d       	adc	r24, r1
 346:	81 1d       	adc	r24, r1
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
