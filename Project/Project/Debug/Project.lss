
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082a  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00001189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001837  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_1>
   8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8e:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <pinSet>:
		}
	}
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	*port |=  1 << pin;
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <pinSet+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <pinSet+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  ae:	fc 01       	movw	r30, r24
	*port &=  ~(1 << pin);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <pinReset+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <pinReset+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <main>:
int flag_aprindere = 1; //Initially, all 4 LEDs will be powered-on

int main(void)
{
	//output for LEDs
	DDRB = 0x0F;   //00001111
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  cc:	15 b8       	out	0x05, r1	; 5
	
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8c 60       	ori	r24, 0x0C	; 12
  d8:	8b b9       	out	0x0b, r24	; 11
	cli();
  da:	f8 94       	cli
	
	//MCUCR |= (1 << IVSEL)|(1 << IVCE);
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8f 60       	ori	r24, 0x0F	; 15
  e4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
  e6:	8d b3       	in	r24, 0x1d	; 29
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
  ec:	8c b3       	in	r24, 0x1c	; 28
  ee:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
  f0:	e8 e6       	ldi	r30, 0x68	; 104
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 83       	st	Z, r24
	
	sei();
  f8:	78 94       	sei
	//SREG |= (1 << SREG_I);
	
	while (1)
	{
		
		if(flag_aprindere == 1){
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	a9 f4       	brne	.+42     	; 0x130 <main+0x68>
			pinSet(&PORTB, PINB0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	85 e2       	ldi	r24, 0x25	; 37
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 4b 00 	call	0x96	; 0x96 <pinSet>
			pinSet(&PORTB, PINB1);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	85 e2       	ldi	r24, 0x25	; 37
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 4b 00 	call	0x96	; 0x96 <pinSet>
			pinSet(&PORTB, PINB2);
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	85 e2       	ldi	r24, 0x25	; 37
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 4b 00 	call	0x96	; 0x96 <pinSet>
			pinSet(&PORTB, PINB3);
 124:	63 e0       	ldi	r22, 0x03	; 3
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <pinSet>
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <main+0x32>
		}
		else{
			pinReset(&PORTB, PINB0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 57 00 	call	0xae	; 0xae <pinReset>
			pinReset(&PORTB, PINB1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 57 00 	call	0xae	; 0xae <pinReset>
			pinReset(&PORTB, PINB2);
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 57 00 	call	0xae	; 0xae <pinReset>
			pinReset(&PORTB, PINB3);
 14e:	63 e0       	ldi	r22, 0x03	; 3
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 57 00 	call	0xae	; 0xae <pinReset>
 158:	d0 cf       	rjmp	.-96     	; 0xfa <main+0x32>

0000015a <__vector_1>:

void pinReset(volatile uint8_t *port, uint8_t pin){
	*port &=  ~(1 << pin);
}

ISR(INT0_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	
	cli();
 168:	f8 94       	cli
	//SREG &= ~(1 << SREG_I);
	
	flag_aprindere = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	sei();
 176:	78 94       	sei
	//SREG |= (1 << SREG_I);
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_2>:

ISR(INT1_vect) {
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
	
	cli();
 190:	f8 94       	cli
	//SREG &= ~(1 << SREG_I);
	
	flag_aprindere = 0;
 192:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 196:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	sei();
 19a:	78 94       	sei
	//SREG |= (1 << SREG_I);
}
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
