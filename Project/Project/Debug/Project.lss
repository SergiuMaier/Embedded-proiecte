
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000876  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068f  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000313  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ab  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  000019d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_1>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <pinSet>:
	}
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	
	*port |=  1 << pin;
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <pinSet+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <pinSet+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  a8:	fc 01       	movw	r30, r24
	
	*port &=  ~(1 << pin);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <pinReset+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <pinReset+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <main>:
int secunde = 0;

int main(void)
{
	//output for LEDs
	DDRB = 0x0F;   //00001111
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  c6:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	8c 60       	ori	r24, 0x0C	; 12
  cc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8c 60       	ori	r24, 0x0C	; 12
  d2:	8b b9       	out	0x0b, r24	; 11
	
	cli();
  d4:	f8 94       	cli
	
	//MCUCR |= (1 << IVSEL)|(1 << IVCE);
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 60       	ori	r24, 0x0F	; 15
  de:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
  e0:	8d b3       	in	r24, 0x1d	; 29
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
  e6:	8c b3       	in	r24, 0x1c	; 28
  e8:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
  ea:	e8 e6       	ldi	r30, 0x68	; 104
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 83       	st	Z, r24
	
	TCCR0A = (1 << WGM01)|(0 << WGM00); //setare mod de functionare
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02)|(0 << CS01)|(0 << CS00); //prescalar
  f6:	85 b5       	in	r24, 0x25	; 37
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	85 bd       	out	0x25, r24	; 37
	OCR0A = 0xF9; //val de top
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); 
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	
	sei();
 10a:	78 94       	sei
	//SREG |= (1 << SREG_I);
	
	while (1)
	{
		
		if(flag_aprindere == 1){
 10c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_aprindere>
 110:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag_aprindere+0x1>
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	e1 f4       	brne	.+56     	; 0x150 <main+0x8e>
			
			contorAprins = secunde;
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <contorAprins+0x1>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contorAprins>
			
			pinSet(&PORTB, PINB0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	85 e2       	ldi	r24, 0x25	; 37
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
			pinSet(&PORTB, PINB1);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
			pinSet(&PORTB, PINB2);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	85 e2       	ldi	r24, 0x25	; 37
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
			pinSet(&PORTB, PINB3);
 146:	63 e0       	ldi	r22, 0x03	; 3
 148:	85 e2       	ldi	r24, 0x25	; 37
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 48 00 	call	0x90	; 0x90 <pinSet>
		}
		
		if((flag_aprindere == 0) || ((secunde - contorAprins) >= TIMP_APRINDERE)){
 150:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_aprindere>
 154:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag_aprindere+0x1>
 158:	89 2b       	or	r24, r25
 15a:	61 f0       	breq	.+24     	; 0x174 <main+0xb2>
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <contorAprins>
 168:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <contorAprins+0x1>
 16c:	82 1b       	sub	r24, r18
 16e:	93 0b       	sbc	r25, r19
 170:	05 97       	sbiw	r24, 0x05	; 5
 172:	64 f2       	brlt	.-104    	; 0x10c <main+0x4a>
			
			//contorAprins = 0;
			
			pinReset(&PORTB, PINB0);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	85 e2       	ldi	r24, 0x25	; 37
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
			pinReset(&PORTB, PINB1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
			pinReset(&PORTB, PINB2);
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
			pinReset(&PORTB, PINB3);
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 54 00 	call	0xa8	; 0xa8 <pinReset>
 19c:	b7 cf       	rjmp	.-146    	; 0x10c <main+0x4a>

0000019e <__vector_14>:
void pinReset(volatile uint8_t *port, uint8_t pin){
	
	*port &=  ~(1 << pin);
}

ISR(TIMER0_COMPA_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
	
	cli();
 1ac:	f8 94       	cli
	
	contor++;
 1ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <contor>
 1b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <contor+0x1>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <contor+0x1>
 1bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <contor>
	
	if(contor >= 250){ 
 1c0:	8a 3f       	cpi	r24, 0xFA	; 250
 1c2:	91 05       	cpc	r25, r1
 1c4:	6c f0       	brlt	.+26     	; 0x1e0 <__vector_14+0x42>
		secunde++;
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		contor = 0;
 1d8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <contor+0x1>
 1dc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <contor>
	}
	
	sei();
 1e0:	78 94       	sei
}
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_1>:

ISR(INT0_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	
	cli();
 1fe:	f8 94       	cli
	//SREG &= ~(1 << SREG_I);
	
	flag_aprindere = 1; //aprindere LED-uri
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flag_aprindere+0x1>
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_aprindere>
	
	sei();
 20c:	78 94       	sei
	//SREG |= (1 << SREG_I);
}
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_2>:

ISR(INT1_vect) {
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
	
	cli();
 226:	f8 94       	cli
	//SREG &= ~(1 << SREG_I);
	
	flag_aprindere = 0;	//stingere LED-uri
 228:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag_aprindere+0x1>
 22c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_aprindere>
	
	sei();
 230:	78 94       	sei
	//SREG |= (1 << SREG_I);
}
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
