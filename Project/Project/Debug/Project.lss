
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000004c2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000953  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000251  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_1>
   8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  9e:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <pinSet>:
	}while(1);
}

void pinSet(volatile uint8_t *port, uint8_t pin){
	
	*port |=  1 << pin;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <pinSet+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <pinSet+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <pinReset>:
}

void pinReset(volatile uint8_t *port, uint8_t pin){
  be:	fc 01       	movw	r30, r24
	
	*port &=  ~(1 << pin);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <pinReset+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <pinReset+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <ledOn>:
}

void ledOn(){
	
	if(secunde % 2 == 0){
  d8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  dc:	80 fd       	sbrc	r24, 0
  de:	05 c0       	rjmp	.+10     	; 0xea <ledOn+0x12>
		pinSet(&PORTB, PINB0);
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	85 e2       	ldi	r24, 0x25	; 37
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <pinSet>
	}
	
	if(flag_on == 1)
  ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <flag_on>
  ee:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <flag_on+0x1>
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	a9 f4       	brne	.+42     	; 0x120 <ledOn+0x48>
	{
		pinSet(&PORTB, PINB0);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	85 e2       	ldi	r24, 0x25	; 37
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <pinSet>
		pinSet(&PORTB, PINB1);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	85 e2       	ldi	r24, 0x25	; 37
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <pinSet>
		pinSet(&PORTB, PINB2);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <pinSet>
		pinSet(&PORTB, PINB3);
 114:	63 e0       	ldi	r22, 0x03	; 3
 116:	85 e2       	ldi	r24, 0x25	; 37
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 53 00 	call	0xa6	; 0xa6 <pinSet>
 11e:	14 c0       	rjmp	.+40     	; 0x148 <ledOn+0x70>
	}
	else
	{
		pinReset(&PORTB, PINB0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 5f 00 	call	0xbe	; 0xbe <pinReset>
		pinReset(&PORTB, PINB1);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <pinReset>
		pinReset(&PORTB, PINB2);
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <pinReset>
		pinReset(&PORTB, PINB3);
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <pinReset>
	}
	
	if((secunde - contor_on) >= TIMP_ON)
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 150:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <contor_on>
 154:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <contor_on+0x1>
 158:	82 1b       	sub	r24, r18
 15a:	93 0b       	sbc	r25, r19
 15c:	07 97       	sbiw	r24, 0x07	; 7
 15e:	24 f0       	brlt	.+8      	; 0x168 <ledOn+0x90>
	{
		flag_on = 0;
 160:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag_on+0x1>
 164:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag_on>
 168:	08 95       	ret

0000016a <calculValoareRegistru>:
	}
}

int calculValoareRegistru(){
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	2a 97       	sbiw	r28, 0x0a	; 10
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
	
	int frecventa_dorita = 1/GENERARE_INTRERUPERE;
	int frecventa_realizata = 0, valoare_preferentiala = 0;
	
	int valoare_prescalar[5] = { 1, 8, 64, 256, 1024};
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	e0 e0       	ldi	r30, 0x00	; 0
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	de 01       	movw	r26, r28
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <calculValoareRegistru+0x2a>
	//volatile uint8_t alegere_prescalar[5] = {TIMER_NO_PRESCALAR, TIMER_PRESCALAR_8, TIMER_PRESCALAR_64, TIMER_PRESCALAR_256, TIMER_PRESCALAR_1024};
	
	for(int i = 1; i <= sizeof(valoare_prescalar)/sizeof(int); i++) //pt fiecare element din valoare_prescalar[]
 19c:	01 e0       	ldi	r16, 0x01	; 1
 19e:	10 e0       	ldi	r17, 0x00	; 0
}

int calculValoareRegistru(){
	
	int frecventa_dorita = 1/GENERARE_INTRERUPERE;
	int frecventa_realizata = 0, valoare_preferentiala = 0;
 1a0:	e1 2c       	mov	r14, r1
 1a2:	f1 2c       	mov	r15, r1
	
	int valoare_prescalar[5] = { 1, 8, 64, 256, 1024};
	//volatile uint8_t alegere_prescalar[5] = {TIMER_NO_PRESCALAR, TIMER_PRESCALAR_8, TIMER_PRESCALAR_64, TIMER_PRESCALAR_256, TIMER_PRESCALAR_1024};
	
	for(int i = 1; i <= sizeof(valoare_prescalar)/sizeof(int); i++) //pt fiecare element din valoare_prescalar[]
 1a4:	30 c0       	rjmp	.+96     	; 0x206 <calculValoareRegistru+0x9c>
	{
		frecventa_realizata = 16000000/(VALOARE_TOP_REGISTRU*valoare_prescalar[i]);
 1a6:	f8 01       	movw	r30, r16
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8c 0f       	add	r24, r28
 1b2:	9d 1f       	adc	r25, r29
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	c0 80       	ld	r12, Z
 1ba:	d1 80       	ldd	r13, Z+1	; 0x01
 1bc:	3c 2d       	mov	r19, r12
 1be:	22 27       	eor	r18, r18
 1c0:	03 2e       	mov	r0, r19
 1c2:	00 0c       	add	r0, r0
 1c4:	44 0b       	sbc	r20, r20
 1c6:	55 0b       	sbc	r21, r21
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 1e 02 	call	0x43c	; 0x43c <__divmodsi4>
		
		if(frecventa_realizata > frecventa_dorita)
 1d4:	28 3e       	cpi	r18, 0xE8	; 232
 1d6:	33 40       	sbci	r19, 0x03	; 3
 1d8:	cc f4       	brge	.+50     	; 0x20c <calculValoareRegistru+0xa2>
			break;
		
		valoare_preferentiala = 16000000/(valoare_prescalar[i]*frecventa_dorita); //n	
 1da:	87 ee       	ldi	r24, 0xE7	; 231
 1dc:	93 e0       	ldi	r25, 0x03	; 3
 1de:	c8 9e       	mul	r12, r24
 1e0:	90 01       	movw	r18, r0
 1e2:	c9 9e       	mul	r12, r25
 1e4:	30 0d       	add	r19, r0
 1e6:	d8 9e       	mul	r13, r24
 1e8:	30 0d       	add	r19, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	03 2e       	mov	r0, r19
 1ee:	00 0c       	add	r0, r0
 1f0:	44 0b       	sbc	r20, r20
 1f2:	55 0b       	sbc	r21, r21
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	74 e2       	ldi	r23, 0x24	; 36
 1f8:	84 ef       	ldi	r24, 0xF4	; 244
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 1e 02 	call	0x43c	; 0x43c <__divmodsi4>
 200:	79 01       	movw	r14, r18
	int frecventa_realizata = 0, valoare_preferentiala = 0;
	
	int valoare_prescalar[5] = { 1, 8, 64, 256, 1024};
	//volatile uint8_t alegere_prescalar[5] = {TIMER_NO_PRESCALAR, TIMER_PRESCALAR_8, TIMER_PRESCALAR_64, TIMER_PRESCALAR_256, TIMER_PRESCALAR_1024};
	
	for(int i = 1; i <= sizeof(valoare_prescalar)/sizeof(int); i++) //pt fiecare element din valoare_prescalar[]
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	06 30       	cpi	r16, 0x06	; 6
 208:	11 05       	cpc	r17, r1
 20a:	68 f2       	brcs	.-102    	; 0x1a6 <calculValoareRegistru+0x3c>
		
		valoare_preferentiala = 16000000/(valoare_prescalar[i]*frecventa_dorita); //n	
	}
	
	return (valoare_preferentiala - 1);	
}
 20c:	c7 01       	movw	r24, r14
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	2a 96       	adiw	r28, 0x0a	; 10
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	08 95       	ret

0000022e <main>:
volatile uint8_t prescalar;


int main(void){
	
	DDRB = 0x0F;   //00001111
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 232:	15 b8       	out	0x05, r1	; 5
	DDRD |= (1 << PIND2) | (1 << PIND3);  //INT0 & INT1
 234:	8a b1       	in	r24, 0x0a	; 10
 236:	8c 60       	ori	r24, 0x0C	; 12
 238:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND3);
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	8b b9       	out	0x0b, r24	; 11
	
	cli();
 240:	f8 94       	cli
	
	EICRA |= (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
 242:	e9 e6       	ldi	r30, 0x69	; 105
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	8f 60       	ori	r24, 0x0F	; 15
 24a:	80 83       	st	Z, r24
	EIMSK |= (1 << INT1) | (1 << INT0);
 24c:	8d b3       	in	r24, 0x1d	; 29
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	8d bb       	out	0x1d, r24	; 29
	EIFR |= (0 << INTF1) | (0 << INTF0);
 252:	8c b3       	in	r24, 0x1c	; 28
 254:	8c bb       	out	0x1c, r24	; 28
	PCICR |= (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
 256:	e8 e6       	ldi	r30, 0x68	; 104
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 83       	st	Z, r24
	
	//momentan time-ul executa o intrerupere la fiecare 1ms
	
	TCCR0A |= (1 << WGM01) | (0 << WGM00);  //CTC		
 25e:	84 b5       	in	r24, 0x24	; 36
 260:	82 60       	ori	r24, 0x02	; 2
 262:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= TIMER_PRESCALAR_64;			//valoare prescalar
 264:	85 b5       	in	r24, 0x25	; 37
 266:	83 60       	ori	r24, 0x03	; 3
 268:	85 bd       	out	0x25, r24	; 37
	OCR0A = calculValoareRegistru();	
 26a:	0e 94 b5 00 	call	0x16a	; 0x16a <calculValoareRegistru>
 26e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
 270:	ee e6       	ldi	r30, 0x6E	; 110
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	82 60       	ori	r24, 0x02	; 2
 278:	80 83       	st	Z, r24
					      
	sei();
 27a:	78 94       	sei
	
	do
	{
		ledOn();	
 27c:	0e 94 6c 00 	call	0xd8	; 0xd8 <ledOn>
 280:	fd cf       	rjmp	.-6      	; 0x27c <main+0x4e>

00000282 <__vector_14>:
	}
	
	return (valoare_preferentiala - 1);	
}

ISR(TIMER0_COMPA_vect){  //pt caz general
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	
	cli();
 2a4:	f8 94       	cli
	
	contor_secunde++;
 2a6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <contor_secunde>
 2aa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <contor_secunde+0x1>
 2ae:	6f 5f       	subi	r22, 0xFF	; 255
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <contor_secunde+0x1>
 2b6:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <contor_secunde>
	
	if(contor_secunde >= (1/GENERARE_INTRERUPERE)){ 
 2ba:	07 2e       	mov	r0, r23
 2bc:	00 0c       	add	r0, r0
 2be:	88 0b       	sbc	r24, r24
 2c0:	99 0b       	sbc	r25, r25
 2c2:	0e 94 ba 01 	call	0x374	; 0x374 <__floatsisf>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	3f ef       	ldi	r19, 0xFF	; 255
 2ca:	49 e7       	ldi	r20, 0x79	; 121
 2cc:	54 e4       	ldi	r21, 0x44	; 68
 2ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__gesf2>
 2d2:	88 23       	and	r24, r24
 2d4:	6c f0       	brlt	.+26     	; 0x2f0 <__vector_14+0x6e>
		
		secunde++;
 2d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 2e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		contor_secunde = 0;
 2e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <contor_secunde+0x1>
 2ec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <contor_secunde>
	}
	
	sei();
 2f0:	78 94       	sei
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_1>:

ISR(INT0_vect){ //pt butonul de on
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
	
	cli();
 322:	f8 94       	cli
	
	flag_on = 1;		 //LED-uri on
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <flag_on+0x1>
 32c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <flag_on>
	contor_on = secunde; //determinarea timpului la care a fost apasat butonul  
 330:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 334:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 338:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <contor_on+0x1>
 33c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <contor_on>
	
	sei();
 340:	78 94       	sei
}
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_2>:

ISR(INT1_vect){ //pt butonul de off
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
	
	cli();
 35a:	f8 94       	cli
	
	flag_on = 0; //LED-uri off
 35c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <flag_on+0x1>
 360:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <flag_on>
	
	sei();
 364:	78 94       	sei
}
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__floatunsisf>:
 370:	e8 94       	clt
 372:	09 c0       	rjmp	.+18     	; 0x386 <__floatsisf+0x12>

00000374 <__floatsisf>:
 374:	97 fb       	bst	r25, 7
 376:	3e f4       	brtc	.+14     	; 0x386 <__floatsisf+0x12>
 378:	90 95       	com	r25
 37a:	80 95       	com	r24
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	8f 4f       	sbci	r24, 0xFF	; 255
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	99 23       	and	r25, r25
 388:	a9 f0       	breq	.+42     	; 0x3b4 <__floatsisf+0x40>
 38a:	f9 2f       	mov	r31, r25
 38c:	96 e9       	ldi	r25, 0x96	; 150
 38e:	bb 27       	eor	r27, r27
 390:	93 95       	inc	r25
 392:	f6 95       	lsr	r31
 394:	87 95       	ror	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b7 95       	ror	r27
 39c:	f1 11       	cpse	r31, r1
 39e:	f8 cf       	rjmp	.-16     	; 0x390 <__floatsisf+0x1c>
 3a0:	fa f4       	brpl	.+62     	; 0x3e0 <__floatsisf+0x6c>
 3a2:	bb 0f       	add	r27, r27
 3a4:	11 f4       	brne	.+4      	; 0x3aa <__floatsisf+0x36>
 3a6:	60 ff       	sbrs	r22, 0
 3a8:	1b c0       	rjmp	.+54     	; 0x3e0 <__floatsisf+0x6c>
 3aa:	6f 5f       	subi	r22, 0xFF	; 255
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	8f 4f       	sbci	r24, 0xFF	; 255
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	16 c0       	rjmp	.+44     	; 0x3e0 <__floatsisf+0x6c>
 3b4:	88 23       	and	r24, r24
 3b6:	11 f0       	breq	.+4      	; 0x3bc <__floatsisf+0x48>
 3b8:	96 e9       	ldi	r25, 0x96	; 150
 3ba:	11 c0       	rjmp	.+34     	; 0x3de <__floatsisf+0x6a>
 3bc:	77 23       	and	r23, r23
 3be:	21 f0       	breq	.+8      	; 0x3c8 <__floatsisf+0x54>
 3c0:	9e e8       	ldi	r25, 0x8E	; 142
 3c2:	87 2f       	mov	r24, r23
 3c4:	76 2f       	mov	r23, r22
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <__floatsisf+0x5e>
 3c8:	66 23       	and	r22, r22
 3ca:	71 f0       	breq	.+28     	; 0x3e8 <__floatsisf+0x74>
 3cc:	96 e8       	ldi	r25, 0x86	; 134
 3ce:	86 2f       	mov	r24, r22
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	2a f0       	brmi	.+10     	; 0x3e0 <__floatsisf+0x6c>
 3d6:	9a 95       	dec	r25
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	da f7       	brpl	.-10     	; 0x3d6 <__floatsisf+0x62>
 3e0:	88 0f       	add	r24, r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	97 f9       	bld	r25, 7
 3e8:	08 95       	ret

000003ea <__gesf2>:
 3ea:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__fp_cmp>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <__gesf2+0x8>
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__fp_cmp>:
 3f4:	99 0f       	add	r25, r25
 3f6:	00 08       	sbc	r0, r0
 3f8:	55 0f       	add	r21, r21
 3fa:	aa 0b       	sbc	r26, r26
 3fc:	e0 e8       	ldi	r30, 0x80	; 128
 3fe:	fe ef       	ldi	r31, 0xFE	; 254
 400:	16 16       	cp	r1, r22
 402:	17 06       	cpc	r1, r23
 404:	e8 07       	cpc	r30, r24
 406:	f9 07       	cpc	r31, r25
 408:	c0 f0       	brcs	.+48     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 40a:	12 16       	cp	r1, r18
 40c:	13 06       	cpc	r1, r19
 40e:	e4 07       	cpc	r30, r20
 410:	f5 07       	cpc	r31, r21
 412:	98 f0       	brcs	.+38     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 414:	62 1b       	sub	r22, r18
 416:	73 0b       	sbc	r23, r19
 418:	84 0b       	sbc	r24, r20
 41a:	95 0b       	sbc	r25, r21
 41c:	39 f4       	brne	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41e:	0a 26       	eor	r0, r26
 420:	61 f0       	breq	.+24     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 422:	23 2b       	or	r18, r19
 424:	24 2b       	or	r18, r20
 426:	25 2b       	or	r18, r21
 428:	21 f4       	brne	.+8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42a:	08 95       	ret
 42c:	0a 26       	eor	r0, r26
 42e:	09 f4       	brne	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	a1 40       	sbci	r26, 0x01	; 1
 432:	a6 95       	lsr	r26
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	81 1d       	adc	r24, r1
 438:	81 1d       	adc	r24, r1
 43a:	08 95       	ret

0000043c <__divmodsi4>:
 43c:	05 2e       	mov	r0, r21
 43e:	97 fb       	bst	r25, 7
 440:	1e f4       	brtc	.+6      	; 0x448 <__divmodsi4+0xc>
 442:	00 94       	com	r0
 444:	0e 94 35 02 	call	0x46a	; 0x46a <__negsi2>
 448:	57 fd       	sbrc	r21, 7
 44a:	07 d0       	rcall	.+14     	; 0x45a <__divmodsi4_neg2>
 44c:	0e 94 3d 02 	call	0x47a	; 0x47a <__udivmodsi4>
 450:	07 fc       	sbrc	r0, 7
 452:	03 d0       	rcall	.+6      	; 0x45a <__divmodsi4_neg2>
 454:	4e f4       	brtc	.+18     	; 0x468 <__divmodsi4_exit>
 456:	0c 94 35 02 	jmp	0x46a	; 0x46a <__negsi2>

0000045a <__divmodsi4_neg2>:
 45a:	50 95       	com	r21
 45c:	40 95       	com	r20
 45e:	30 95       	com	r19
 460:	21 95       	neg	r18
 462:	3f 4f       	sbci	r19, 0xFF	; 255
 464:	4f 4f       	sbci	r20, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255

00000468 <__divmodsi4_exit>:
 468:	08 95       	ret

0000046a <__negsi2>:
 46a:	90 95       	com	r25
 46c:	80 95       	com	r24
 46e:	70 95       	com	r23
 470:	61 95       	neg	r22
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	08 95       	ret

0000047a <__udivmodsi4>:
 47a:	a1 e2       	ldi	r26, 0x21	; 33
 47c:	1a 2e       	mov	r1, r26
 47e:	aa 1b       	sub	r26, r26
 480:	bb 1b       	sub	r27, r27
 482:	fd 01       	movw	r30, r26
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <__udivmodsi4_ep>

00000486 <__udivmodsi4_loop>:
 486:	aa 1f       	adc	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	ee 1f       	adc	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	a2 17       	cp	r26, r18
 490:	b3 07       	cpc	r27, r19
 492:	e4 07       	cpc	r30, r20
 494:	f5 07       	cpc	r31, r21
 496:	20 f0       	brcs	.+8      	; 0x4a0 <__udivmodsi4_ep>
 498:	a2 1b       	sub	r26, r18
 49a:	b3 0b       	sbc	r27, r19
 49c:	e4 0b       	sbc	r30, r20
 49e:	f5 0b       	sbc	r31, r21

000004a0 <__udivmodsi4_ep>:
 4a0:	66 1f       	adc	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	1a 94       	dec	r1
 4aa:	69 f7       	brne	.-38     	; 0x486 <__udivmodsi4_loop>
 4ac:	60 95       	com	r22
 4ae:	70 95       	com	r23
 4b0:	80 95       	com	r24
 4b2:	90 95       	com	r25
 4b4:	9b 01       	movw	r18, r22
 4b6:	ac 01       	movw	r20, r24
 4b8:	bd 01       	movw	r22, r26
 4ba:	cf 01       	movw	r24, r30
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
